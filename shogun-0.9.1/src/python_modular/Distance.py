# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
The `Distance` module gathers all distances available in the SHOGUN toolkit.
"""

import _Distance
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class ShogunException(_object):
    """Proxy of C++ ShogunException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShogunException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShogunException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, str) -> ShogunException"""
        this = _Distance.new_ShogunException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_ShogunException
    __del__ = lambda self : None;
    def get_exception_string(*args):
        """get_exception_string(self) -> str"""
        return _Distance.ShogunException_get_exception_string(*args)

ShogunException_swigregister = _Distance.ShogunException_swigregister
ShogunException_swigregister(ShogunException)

MSG_GCDEBUG = _Distance.MSG_GCDEBUG
MSG_DEBUG = _Distance.MSG_DEBUG
MSG_INFO = _Distance.MSG_INFO
MSG_NOTICE = _Distance.MSG_NOTICE
MSG_WARN = _Distance.MSG_WARN
MSG_ERROR = _Distance.MSG_ERROR
MSG_CRITICAL = _Distance.MSG_CRITICAL
MSG_ALERT = _Distance.MSG_ALERT
MSG_EMERGENCY = _Distance.MSG_EMERGENCY
MSG_MESSAGEONLY = _Distance.MSG_MESSAGEONLY
class IO(_object):
    """Proxy of C++ IO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IO
        __init__(self, orig) -> IO
        """
        this = _Distance.new_IO(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_loglevel(*args):
        """set_loglevel(self, level)"""
        return _Distance.IO_set_loglevel(*args)

    def get_loglevel(*args):
        """get_loglevel(self) -> EMessageType"""
        return _Distance.IO_get_loglevel(*args)

    def get_show_progress(*args):
        """get_show_progress(self) -> bool"""
        return _Distance.IO_get_show_progress(*args)

    def get_show_file_and_line(*args):
        """get_show_file_and_line(self) -> bool"""
        return _Distance.IO_get_show_file_and_line(*args)

    def message(*args):
        """message(self, prio, file, line, fmt, ?)"""
        return _Distance.IO_message(*args)

    def progress(*args):
        """
        progress(self, current_val, min_val=0.0, max_val=1.0, decimals=1, 
            prefix="PROGRESS:\t")
        progress(self, current_val, min_val=0.0, max_val=1.0, decimals=1)
        progress(self, current_val, min_val=0.0, max_val=1.0)
        progress(self, current_val, min_val=0.0)
        progress(self, current_val)
        """
        return _Distance.IO_progress(*args)

    def absolute_progress(*args):
        """
        absolute_progress(self, current_val, val, min_val=0.0, max_val=1.0, decimals=1, 
            prefix="PROGRESS:\t")
        absolute_progress(self, current_val, val, min_val=0.0, max_val=1.0, decimals=1)
        absolute_progress(self, current_val, val, min_val=0.0, max_val=1.0)
        absolute_progress(self, current_val, val, min_val=0.0)
        absolute_progress(self, current_val, val)
        """
        return _Distance.IO_absolute_progress(*args)

    def done(*args):
        """done(self)"""
        return _Distance.IO_done(*args)

    def not_implemented(*args):
        """not_implemented(self, file, line)"""
        return _Distance.IO_not_implemented(*args)

    def deprecated(*args):
        """deprecated(self, file, line)"""
        return _Distance.IO_deprecated(*args)

    def buffered_message(*args):
        """buffered_message(self, prio, fmt, ?)"""
        return _Distance.IO_buffered_message(*args)

    def skip_spaces(*args):
        """skip_spaces(str) -> str"""
        return _Distance.IO_skip_spaces(*args)

    if _newclass:skip_spaces = staticmethod(skip_spaces)
    __swig_getmethods__["skip_spaces"] = lambda x: skip_spaces
    def skip_blanks(*args):
        """skip_blanks(str) -> str"""
        return _Distance.IO_skip_blanks(*args)

    if _newclass:skip_blanks = staticmethod(skip_blanks)
    __swig_getmethods__["skip_blanks"] = lambda x: skip_blanks
    def get_target(*args):
        """get_target(self) -> FILE"""
        return _Distance.IO_get_target(*args)

    def set_target(*args):
        """set_target(self, target)"""
        return _Distance.IO_set_target(*args)

    def set_target_to_stderr(*args):
        """set_target_to_stderr(self)"""
        return _Distance.IO_set_target_to_stderr(*args)

    def set_target_to_stdout(*args):
        """set_target_to_stdout(self)"""
        return _Distance.IO_set_target_to_stdout(*args)

    def enable_progress(*args):
        """enable_progress(self)"""
        return _Distance.IO_enable_progress(*args)

    def disable_progress(*args):
        """disable_progress(self)"""
        return _Distance.IO_disable_progress(*args)

    def enable_file_and_line(*args):
        """enable_file_and_line(self)"""
        return _Distance.IO_enable_file_and_line(*args)

    def disable_file_and_line(*args):
        """disable_file_and_line(self)"""
        return _Distance.IO_disable_file_and_line(*args)

    def set_dirname(*args):
        """set_dirname(dirname)"""
        return _Distance.IO_set_dirname(*args)

    if _newclass:set_dirname = staticmethod(set_dirname)
    __swig_getmethods__["set_dirname"] = lambda x: set_dirname
    def concat_filename(*args):
        """concat_filename(filename) -> str"""
        return _Distance.IO_concat_filename(*args)

    if _newclass:concat_filename = staticmethod(concat_filename)
    __swig_getmethods__["concat_filename"] = lambda x: concat_filename
    def filter(*args):
        """filter(d) -> int"""
        return _Distance.IO_filter(*args)

    if _newclass:filter = staticmethod(filter)
    __swig_getmethods__["filter"] = lambda x: filter
    def ref(*args):
        """ref(self) ->  int"""
        return _Distance.IO_ref(*args)

    def ref_count(*args):
        """ref_count(self) ->  int"""
        return _Distance.IO_ref_count(*args)

    def unref(*args):
        """unref(self) ->  int"""
        return _Distance.IO_unref(*args)

    def get_name(*args):
        """get_name(self) -> str"""
        return _Distance.IO_get_name(*args)

    __swig_destroy__ = _Distance.delete_IO
    __del__ = lambda self : None;
IO_swigregister = _Distance.IO_swigregister
IO_swigregister(IO)
cvar = _Distance.cvar

def IO_skip_spaces(*args):
  """IO_skip_spaces(str) -> str"""
  return _Distance.IO_skip_spaces(*args)

def IO_skip_blanks(*args):
  """IO_skip_blanks(str) -> str"""
  return _Distance.IO_skip_blanks(*args)

def IO_set_dirname(*args):
  """IO_set_dirname(dirname)"""
  return _Distance.IO_set_dirname(*args)

def IO_concat_filename(*args):
  """IO_concat_filename(filename) -> str"""
  return _Distance.IO_concat_filename(*args)

def IO_filter(*args):
  """IO_filter(d) -> int"""
  return _Distance.IO_filter(*args)

class SGObject(_object):
    """Proxy of C++ SGObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SGObject
    __del__ = lambda self : None;
    def ref(*args):
        """ref(self) ->  int"""
        return _Distance.SGObject_ref(*args)

    def ref_count(*args):
        """ref_count(self) ->  int"""
        return _Distance.SGObject_ref_count(*args)

    def unref(*args):
        """unref(self) ->  int"""
        return _Distance.SGObject_unref(*args)

    def get_name(*args):
        """get_name(self) -> str"""
        return _Distance.SGObject_get_name(*args)

    __swig_setmethods__["io"] = _Distance.SGObject_io_set
    __swig_getmethods__["io"] = _Distance.SGObject_io_get
    if _newclass:io = _swig_property(_Distance.SGObject_io_get, _Distance.SGObject_io_set)
    __swig_setmethods__["parallel"] = _Distance.SGObject_parallel_set
    __swig_getmethods__["parallel"] = _Distance.SGObject_parallel_get
    if _newclass:parallel = _swig_property(_Distance.SGObject_parallel_get, _Distance.SGObject_parallel_set)
    __swig_setmethods__["version"] = _Distance.SGObject_version_set
    __swig_getmethods__["version"] = _Distance.SGObject_version_get
    if _newclass:version = _swig_property(_Distance.SGObject_version_get, _Distance.SGObject_version_set)
SGObject_swigregister = _Distance.SGObject_swigregister
SGObject_swigregister(SGObject)

class Version(_object):
    """Proxy of C++ Version class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Version"""
        this = _Distance.new_Version(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_Version
    __del__ = lambda self : None;
    def print_version(*args):
        """print_version()"""
        return _Distance.Version_print_version(*args)

    if _newclass:print_version = staticmethod(print_version)
    __swig_getmethods__["print_version"] = lambda x: print_version
    def get_version_extra(*args):
        """get_version_extra() -> str"""
        return _Distance.Version_get_version_extra(*args)

    if _newclass:get_version_extra = staticmethod(get_version_extra)
    __swig_getmethods__["get_version_extra"] = lambda x: get_version_extra
    def get_version_release(*args):
        """get_version_release() -> str"""
        return _Distance.Version_get_version_release(*args)

    if _newclass:get_version_release = staticmethod(get_version_release)
    __swig_getmethods__["get_version_release"] = lambda x: get_version_release
    def get_version_revision(*args):
        """get_version_revision() ->  int"""
        return _Distance.Version_get_version_revision(*args)

    if _newclass:get_version_revision = staticmethod(get_version_revision)
    __swig_getmethods__["get_version_revision"] = lambda x: get_version_revision
    def get_version_year(*args):
        """get_version_year() ->  int"""
        return _Distance.Version_get_version_year(*args)

    if _newclass:get_version_year = staticmethod(get_version_year)
    __swig_getmethods__["get_version_year"] = lambda x: get_version_year
    def get_version_month(*args):
        """get_version_month() ->  int"""
        return _Distance.Version_get_version_month(*args)

    if _newclass:get_version_month = staticmethod(get_version_month)
    __swig_getmethods__["get_version_month"] = lambda x: get_version_month
    def get_version_day(*args):
        """get_version_day() ->  int"""
        return _Distance.Version_get_version_day(*args)

    if _newclass:get_version_day = staticmethod(get_version_day)
    __swig_getmethods__["get_version_day"] = lambda x: get_version_day
    def get_version_hour(*args):
        """get_version_hour() ->  int"""
        return _Distance.Version_get_version_hour(*args)

    if _newclass:get_version_hour = staticmethod(get_version_hour)
    __swig_getmethods__["get_version_hour"] = lambda x: get_version_hour
    def get_version_minute(*args):
        """get_version_minute() ->  int"""
        return _Distance.Version_get_version_minute(*args)

    if _newclass:get_version_minute = staticmethod(get_version_minute)
    __swig_getmethods__["get_version_minute"] = lambda x: get_version_minute
    def get_version_in_minutes(*args):
        """get_version_in_minutes() -> int"""
        return _Distance.Version_get_version_in_minutes(*args)

    if _newclass:get_version_in_minutes = staticmethod(get_version_in_minutes)
    __swig_getmethods__["get_version_in_minutes"] = lambda x: get_version_in_minutes
    def ref(*args):
        """ref(self) ->  int"""
        return _Distance.Version_ref(*args)

    def ref_count(*args):
        """ref_count(self) ->  int"""
        return _Distance.Version_ref_count(*args)

    def unref(*args):
        """unref(self) ->  int"""
        return _Distance.Version_unref(*args)

Version_swigregister = _Distance.Version_swigregister
Version_swigregister(Version)

def Version_print_version(*args):
  """Version_print_version()"""
  return _Distance.Version_print_version(*args)

def Version_get_version_extra(*args):
  """Version_get_version_extra() -> str"""
  return _Distance.Version_get_version_extra(*args)

def Version_get_version_release(*args):
  """Version_get_version_release() -> str"""
  return _Distance.Version_get_version_release(*args)

def Version_get_version_revision(*args):
  """Version_get_version_revision() ->  int"""
  return _Distance.Version_get_version_revision(*args)

def Version_get_version_year(*args):
  """Version_get_version_year() ->  int"""
  return _Distance.Version_get_version_year(*args)

def Version_get_version_month(*args):
  """Version_get_version_month() ->  int"""
  return _Distance.Version_get_version_month(*args)

def Version_get_version_day(*args):
  """Version_get_version_day() ->  int"""
  return _Distance.Version_get_version_day(*args)

def Version_get_version_hour(*args):
  """Version_get_version_hour() ->  int"""
  return _Distance.Version_get_version_hour(*args)

def Version_get_version_minute(*args):
  """Version_get_version_minute() ->  int"""
  return _Distance.Version_get_version_minute(*args)

def Version_get_version_in_minutes(*args):
  """Version_get_version_in_minutes() -> int"""
  return _Distance.Version_get_version_in_minutes(*args)

class Parallel(_object):
    """Proxy of C++ Parallel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parallel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parallel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Parallel
        __init__(self, orig) -> Parallel
        """
        this = _Distance.new_Parallel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_Parallel
    __del__ = lambda self : None;
    def get_num_cpus(*args):
        """get_num_cpus(self) ->  int"""
        return _Distance.Parallel_get_num_cpus(*args)

    def set_num_threads(*args):
        """set_num_threads(self, n)"""
        return _Distance.Parallel_set_num_threads(*args)

    def get_num_threads(*args):
        """get_num_threads(self) ->  int"""
        return _Distance.Parallel_get_num_threads(*args)

    def ref(*args):
        """ref(self) ->  int"""
        return _Distance.Parallel_ref(*args)

    def ref_count(*args):
        """ref_count(self) ->  int"""
        return _Distance.Parallel_ref_count(*args)

    def unref(*args):
        """unref(self) ->  int"""
        return _Distance.Parallel_unref(*args)

Parallel_swigregister = _Distance.Parallel_swigregister
Parallel_swigregister(Parallel)

class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _Distance.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _Distance.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _Distance.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, x) -> ptrdiff_t"""
        return _Distance.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, x) -> bool"""
        return _Distance.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _Distance.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _Distance.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _Distance.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, n) -> PySwigIterator"""
        return _Distance.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, x) -> bool"""
        return _Distance.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, x) -> bool"""
        return _Distance.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, n) -> PySwigIterator"""
        return _Distance.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, n) -> PySwigIterator"""
        return _Distance.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, n) -> PySwigIterator"""
        return _Distance.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, n) -> PySwigIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _Distance.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _Distance.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class IntVector(_object):
    """Proxy of C++ IntVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _Distance.IntVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _Distance.IntVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> std::vector<(int)>::size_type"""
        return _Distance.IntVector___len__(*args)

    def pop(*args):
        """pop(self) -> std::vector<(int)>::value_type"""
        return _Distance.IntVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, i, j) -> IntVector"""
        return _Distance.IntVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, i, j, v)"""
        return _Distance.IntVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, i, j)"""
        return _Distance.IntVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, i)"""
        return _Distance.IntVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, i) -> std::vector<(int)>::value_type"""
        return _Distance.IntVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, i, x)"""
        return _Distance.IntVector___setitem__(*args)

    def append(*args):
        """append(self, x)"""
        return _Distance.IntVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _Distance.IntVector_empty(*args)

    def size(*args):
        """size(self) -> std::vector<(int)>::size_type"""
        return _Distance.IntVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _Distance.IntVector_clear(*args)

    def swap(*args):
        """swap(self, v)"""
        return _Distance.IntVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> std::vector<(int)>::allocator_type"""
        return _Distance.IntVector_get_allocator(*args)

    def begin(*args):
        """begin(self) -> std::vector<(int)>::const_iterator"""
        return _Distance.IntVector_begin(*args)

    def end(*args):
        """end(self) -> std::vector<(int)>::const_iterator"""
        return _Distance.IntVector_end(*args)

    def rbegin(*args):
        """rbegin(self) -> std::vector<(int)>::const_reverse_iterator"""
        return _Distance.IntVector_rbegin(*args)

    def rend(*args):
        """rend(self) -> std::vector<(int)>::const_reverse_iterator"""
        return _Distance.IntVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _Distance.IntVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(int)>::iterator
        erase(self, first, last) -> std::vector<(int)>::iterator
        """
        return _Distance.IntVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> IntVector
        __init__(self, ?) -> IntVector
        __init__(self, size) -> IntVector
        __init__(self, size, value) -> IntVector
        """
        this = _Distance.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, x)"""
        return _Distance.IntVector_push_back(*args)

    def front(*args):
        """front(self) -> std::vector<(int)>::value_type"""
        return _Distance.IntVector_front(*args)

    def back(*args):
        """back(self) -> std::vector<(int)>::value_type"""
        return _Distance.IntVector_back(*args)

    def assign(*args):
        """assign(self, n, x)"""
        return _Distance.IntVector_assign(*args)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _Distance.IntVector_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(int)>::iterator
        insert(self, pos, n, x)
        """
        return _Distance.IntVector_insert(*args)

    def reserve(*args):
        """reserve(self, n)"""
        return _Distance.IntVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> std::vector<(int)>::size_type"""
        return _Distance.IntVector_capacity(*args)

    __swig_destroy__ = _Distance.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _Distance.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    """Proxy of C++ DoubleVector class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _Distance.DoubleVector_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _Distance.DoubleVector___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> std::vector<(double)>::size_type"""
        return _Distance.DoubleVector___len__(*args)

    def pop(*args):
        """pop(self) -> std::vector<(double)>::value_type"""
        return _Distance.DoubleVector_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, i, j) -> DoubleVector"""
        return _Distance.DoubleVector___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, i, j, v)"""
        return _Distance.DoubleVector___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, i, j)"""
        return _Distance.DoubleVector___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, i)"""
        return _Distance.DoubleVector___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, i) -> std::vector<(double)>::value_type"""
        return _Distance.DoubleVector___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, i, x)"""
        return _Distance.DoubleVector___setitem__(*args)

    def append(*args):
        """append(self, x)"""
        return _Distance.DoubleVector_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _Distance.DoubleVector_empty(*args)

    def size(*args):
        """size(self) -> std::vector<(double)>::size_type"""
        return _Distance.DoubleVector_size(*args)

    def clear(*args):
        """clear(self)"""
        return _Distance.DoubleVector_clear(*args)

    def swap(*args):
        """swap(self, v)"""
        return _Distance.DoubleVector_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> std::vector<(double)>::allocator_type"""
        return _Distance.DoubleVector_get_allocator(*args)

    def begin(*args):
        """begin(self) -> std::vector<(double)>::const_iterator"""
        return _Distance.DoubleVector_begin(*args)

    def end(*args):
        """end(self) -> std::vector<(double)>::const_iterator"""
        return _Distance.DoubleVector_end(*args)

    def rbegin(*args):
        """rbegin(self) -> std::vector<(double)>::const_reverse_iterator"""
        return _Distance.DoubleVector_rbegin(*args)

    def rend(*args):
        """rend(self) -> std::vector<(double)>::const_reverse_iterator"""
        return _Distance.DoubleVector_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _Distance.DoubleVector_pop_back(*args)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(double)>::iterator
        erase(self, first, last) -> std::vector<(double)>::iterator
        """
        return _Distance.DoubleVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> DoubleVector
        __init__(self, ?) -> DoubleVector
        __init__(self, size) -> DoubleVector
        __init__(self, size, value) -> DoubleVector
        """
        this = _Distance.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, x)"""
        return _Distance.DoubleVector_push_back(*args)

    def front(*args):
        """front(self) -> std::vector<(double)>::value_type"""
        return _Distance.DoubleVector_front(*args)

    def back(*args):
        """back(self) -> std::vector<(double)>::value_type"""
        return _Distance.DoubleVector_back(*args)

    def assign(*args):
        """assign(self, n, x)"""
        return _Distance.DoubleVector_assign(*args)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _Distance.DoubleVector_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(double)>::iterator
        insert(self, pos, n, x)
        """
        return _Distance.DoubleVector_insert(*args)

    def reserve(*args):
        """reserve(self, n)"""
        return _Distance.DoubleVector_reserve(*args)

    def capacity(*args):
        """capacity(self) -> std::vector<(double)>::size_type"""
        return _Distance.DoubleVector_capacity(*args)

    __swig_destroy__ = _Distance.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _Distance.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

D_UNKNOWN = _Distance.D_UNKNOWN
D_MINKOWSKI = _Distance.D_MINKOWSKI
D_MANHATTAN = _Distance.D_MANHATTAN
D_CANBERRA = _Distance.D_CANBERRA
D_CHEBYSHEW = _Distance.D_CHEBYSHEW
D_GEODESIC = _Distance.D_GEODESIC
D_JENSEN = _Distance.D_JENSEN
D_MANHATTANWORD = _Distance.D_MANHATTANWORD
D_HAMMINGWORD = _Distance.D_HAMMINGWORD
D_CANBERRAWORD = _Distance.D_CANBERRAWORD
D_SPARSEEUCLIDIAN = _Distance.D_SPARSEEUCLIDIAN
D_EUCLIDIAN = _Distance.D_EUCLIDIAN
D_CHISQUARE = _Distance.D_CHISQUARE
D_TANIMOTO = _Distance.D_TANIMOTO
D_COSINE = _Distance.D_COSINE
D_BRAYCURTIS = _Distance.D_BRAYCURTIS
class Distance(SGObject):
    """
    class Distance

    All distance classes are derived from this base class.

    C++ includes: Distance.h 
    """
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distance, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Distance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_Distance
    __del__ = lambda self : None;
    def distance(*args):
        """
        distance(self, idx_a, idx_b) -> float

        get distance function for lhs feature vector a and rhs feature vector
        b

        Parameters:
        -----------

        idx_a:  feature vector a at idx_a

        idx_b:  feature vector b at idx_b

        distance value 
        """
        return _Distance.Distance_distance(*args)

    def get_distance_matrix(*args):
        """
        get_distance_matrix(self) -> numpy 2dim array of float

        get distance matrix

        Parameters:
        -----------

        dst:  distance matrix is stored in here

        m:  dimension m of matrix is stored in here

        n:  dimension n of matrix is stored in here 
        """
        return _Distance.Distance_get_distance_matrix(*args)

    def get_distance_matrix_real(*args):
        """
        get_distance_matrix_real(self, m, n, target) -> float

        get distance matrix real

        Parameters:
        -----------

        m:  dimension m

        n:  dimension n

        target:  target matrix

        target matrix 
        """
        return _Distance.Distance_get_distance_matrix_real(*args)

    def get_distance_matrix_shortreal(*args):
        """
        get_distance_matrix_shortreal(self, m, n, target) -> float

        get distance matrix short real

        Parameters:
        -----------

        m:  dimension m

        n:  dimension n

        target:  target matrix

        target matrix 
        """
        return _Distance.Distance_get_distance_matrix_shortreal(*args)

    def init(*args):
        """
        init(self, lhs, rhs) -> bool

        init distance

        make sure to check that your distance can deal with the supplied
        features (!)

        Parameters:
        -----------

        lhs:  features of left-hand side

        rhs:  features of right-hand side

        if init was successful 
        """
        return _Distance.Distance_init(*args)

    def cleanup(*args):
        """
        cleanup(self)

        cleanup distance

        abstract base method 
        """
        return _Distance.Distance_cleanup(*args)

    def load(*args):
        """
        load(self, fname) -> bool

        load distance matrix from file

        Parameters:
        -----------

        fname:  filename to load from

        if loading was successful 
        """
        return _Distance.Distance_load(*args)

    def save(*args):
        """
        save(self, fname) -> bool

        save distance matrix to file

        Parameters:
        -----------

        fname:  filename to save to

        if saving was successful 
        """
        return _Distance.Distance_save(*args)

    def get_lhs(*args):
        """
        get_lhs(self) -> Features

        get left-hand side features used in distance matrix

        left-hand side features 
        """
        return _Distance.Distance_get_lhs(*args)

    def get_rhs(*args):
        """
        get_rhs(self) -> Features

        get right-hand side features used in distance matrix

        right-hand side features 
        """
        return _Distance.Distance_get_rhs(*args)

    def replace_rhs(*args):
        """
        replace_rhs(self, rhs) -> Features

        replace right-hand side features used in distance matrix

        make sure to check that your distance can deal with the supplied
        features (!)

        Parameters:
        -----------

        rhs:  features of right-hand side

        replaced right-hand side features 
        """
        return _Distance.Distance_replace_rhs(*args)

    def remove_lhs_and_rhs(*args):
        """
        remove_lhs_and_rhs(self)

        remove lhs and rhs from distance 
        """
        return _Distance.Distance_remove_lhs_and_rhs(*args)

    def remove_lhs(*args):
        """
        remove_lhs(self)

        takes all necessary steps if the lhs is removed from distance matrix

        """
        return _Distance.Distance_remove_lhs(*args)

    def remove_rhs(*args):
        """
        remove_rhs(self)

        takes all necessary steps if the rhs is removed from distance matrix

        """
        return _Distance.Distance_remove_rhs(*args)

    def get_distance_type(*args):
        """
        get_distance_type(self) -> EDistanceType

        get distance type we are

        abstrace base method

        distance type 
        """
        return _Distance.Distance_get_distance_type(*args)

    def get_feature_type(*args):
        """
        get_feature_type(self) -> EFeatureType

        get feature type the distance can deal with

        abstrace base method

        feature type 
        """
        return _Distance.Distance_get_feature_type(*args)

    def get_feature_class(*args):
        """
        get_feature_class(self) -> EFeatureClass

        get feature class the distance can deal with

        abstract base method

        feature class 
        """
        return _Distance.Distance_get_feature_class(*args)

    def get_precompute_matrix(*args):
        """
        get_precompute_matrix(self) -> bool

        FIXME: precompute matrix should be dropped, handling should be via
        customdistance

        if precompute_matrix 
        """
        return _Distance.Distance_get_precompute_matrix(*args)

    def set_precompute_matrix(*args):
        """
        set_precompute_matrix(self, flag)

        FIXME: precompute matrix should be dropped, handling should be via
        customdistance

        Parameters:
        -----------

        flag:  if precompute_matrix 
        """
        return _Distance.Distance_set_precompute_matrix(*args)

    def get_num_vec_lhs(*args):
        """
        get_num_vec_lhs(self) ->  int

        get number of vectors of lhs features

        number of vectors of left-hand side 
        """
        return _Distance.Distance_get_num_vec_lhs(*args)

    def get_num_vec_rhs(*args):
        """
        get_num_vec_rhs(self) ->  int

        get number of vectors of rhs features

        number of vectors of right-hand side 
        """
        return _Distance.Distance_get_num_vec_rhs(*args)

    def has_features(*args):
        """
        has_features(self) -> bool

        test whether features have been assigned to lhs and rhs

        true if features are assigned 
        """
        return _Distance.Distance_has_features(*args)

    def lhs_equals_rhs(*args):
        """
        lhs_equals_rhs(self) -> bool

        test whether features on lhs and rhs are the same

        true if features are the same 
        """
        return _Distance.Distance_lhs_equals_rhs(*args)

Distance_swigregister = _Distance.Distance_swigregister
Distance_swigregister(Distance)

class SimpleRealDistance(Distance):
    """
    template class SimpleDistance

    C++ includes: SimpleDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleRealDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleRealDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SimpleRealDistance
    __del__ = lambda self : None;
SimpleRealDistance_swigregister = _Distance.SimpleRealDistance_swigregister
SimpleRealDistance_swigregister(SimpleRealDistance)

class SimpleWordDistance(Distance):
    """
    template class SimpleDistance

    C++ includes: SimpleDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleWordDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SimpleWordDistance
    __del__ = lambda self : None;
SimpleWordDistance_swigregister = _Distance.SimpleWordDistance_swigregister
SimpleWordDistance_swigregister(SimpleWordDistance)

class SimpleCharDistance(Distance):
    """
    template class SimpleDistance

    C++ includes: SimpleDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleCharDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleCharDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SimpleCharDistance
    __del__ = lambda self : None;
SimpleCharDistance_swigregister = _Distance.SimpleCharDistance_swigregister
SimpleCharDistance_swigregister(SimpleCharDistance)

class SimpleIntDistance(Distance):
    """
    template class SimpleDistance

    C++ includes: SimpleDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleIntDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleIntDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SimpleIntDistance
    __del__ = lambda self : None;
SimpleIntDistance_swigregister = _Distance.SimpleIntDistance_swigregister
SimpleIntDistance_swigregister(SimpleIntDistance)

class SparseRealDistance(Distance):
    """
    template class SparseDistance

    C++ includes: SparseDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseRealDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseRealDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SparseRealDistance
    __del__ = lambda self : None;
SparseRealDistance_swigregister = _Distance.SparseRealDistance_swigregister
SparseRealDistance_swigregister(SparseRealDistance)

class SparseWordDistance(Distance):
    """
    template class SparseDistance

    C++ includes: SparseDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseWordDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SparseWordDistance
    __del__ = lambda self : None;
SparseWordDistance_swigregister = _Distance.SparseWordDistance_swigregister
SparseWordDistance_swigregister(SparseWordDistance)

class SparseCharDistance(Distance):
    """
    template class SparseDistance

    C++ includes: SparseDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseCharDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseCharDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SparseCharDistance
    __del__ = lambda self : None;
SparseCharDistance_swigregister = _Distance.SparseCharDistance_swigregister
SparseCharDistance_swigregister(SparseCharDistance)

class SparseIntDistance(Distance):
    """
    template class SparseDistance

    C++ includes: SparseDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseIntDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseIntDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_SparseIntDistance
    __del__ = lambda self : None;
SparseIntDistance_swigregister = _Distance.SparseIntDistance_swigregister
SparseIntDistance_swigregister(SparseIntDistance)

class StringRealDistance(Distance):
    """
    template class StringDistance

    C++ includes: StringDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringRealDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringRealDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_StringRealDistance
    __del__ = lambda self : None;
StringRealDistance_swigregister = _Distance.StringRealDistance_swigregister
StringRealDistance_swigregister(StringRealDistance)

class StringWordDistance(Distance):
    """
    template class StringDistance

    C++ includes: StringDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringWordDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_StringWordDistance
    __del__ = lambda self : None;
StringWordDistance_swigregister = _Distance.StringWordDistance_swigregister
StringWordDistance_swigregister(StringWordDistance)

class StringCharDistance(Distance):
    """
    template class StringDistance

    C++ includes: StringDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringCharDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringCharDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_StringCharDistance
    __del__ = lambda self : None;
StringCharDistance_swigregister = _Distance.StringCharDistance_swigregister
StringCharDistance_swigregister(StringCharDistance)

class StringIntDistance(Distance):
    """
    template class StringDistance

    C++ includes: StringDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringIntDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringIntDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_StringIntDistance
    __del__ = lambda self : None;
StringIntDistance_swigregister = _Distance.StringIntDistance_swigregister
StringIntDistance_swigregister(StringIntDistance)

class StringUlongDistance(Distance):
    """
    template class StringDistance

    C++ includes: StringDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringUlongDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringUlongDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_StringUlongDistance
    __del__ = lambda self : None;
StringUlongDistance_swigregister = _Distance.StringUlongDistance_swigregister
StringUlongDistance_swigregister(StringUlongDistance)

class RealDistance(SimpleRealDistance):
    """
    class RealDistance

    C++ includes: RealDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Distance.delete_RealDistance
    __del__ = lambda self : None;
RealDistance_swigregister = _Distance.RealDistance_swigregister
RealDistance_swigregister(RealDistance)

class CanberraMetric(SimpleRealDistance):
    """
    class CanberraMetric

    The Canberra distance sums up the dissimilarity (ratios) between
    feature dimensions of two data points.

    \\[\\displaystyle d(\\bf{x},\\bf{x'}) =
    \\sum_{i=1}^{n}\\frac{|\\bf{x_{i}-\\bf{x'_{i}}}|}
    {|\\bf{x_{i}}|+|\\bf{x'_{i}}|} \\quad \\bf{x},\\bf{x'}
    \\in R^{n} \\]

    A summation element has range [0,1]. Note that $d(x,0)=d(0,x')=n$ and
    $d(0,0)=0$.

    C++ includes: CanberraMetric.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CanberraMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CanberraMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CanberraMetric
        __init__(self, l, r) -> CanberraMetric

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_CanberraMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_CanberraMetric
    __del__ = lambda self : None;
CanberraMetric_swigregister = _Distance.CanberraMetric_swigregister
CanberraMetric_swigregister(CanberraMetric)

class ChebyshewMetric(SimpleRealDistance):
    """
    class ChebyshewMetric

    The Chebyshev distance ( $L_{\\infty}$ norm) returns the maximum of
    absolute feature dimension differences between two data points.

    \\[\\displaystyle d(\\bf{x},\\bf{x'}) =
    max|\\bf{x_{i}}-\\bf{x'_{i}}| \\quad x,x' \\in R^{n} \\]

    See:  Wikipedia: Chebyshev distance

    C++ includes: ChebyshewMetric.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyshewMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyshewMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ChebyshewMetric
        __init__(self, l, r) -> ChebyshewMetric

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_ChebyshewMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_ChebyshewMetric
    __del__ = lambda self : None;
ChebyshewMetric_swigregister = _Distance.ChebyshewMetric_swigregister
ChebyshewMetric_swigregister(ChebyshewMetric)

class GeodesicMetric(SimpleRealDistance):
    """
    class GeodesicMetric

    The Geodesic distance (Great circle distance) computes the shortest
    path between two data points on a sphere (the radius is set to one for
    the evaluation).

    \\[\\displaystyle d(\\bf{x},\\bf{x'}) =
    arccos\\sum_{i=1}^{n} \\frac{\\bf{x_{i}}\\cdot\\bf{x'_{i}}}
    {\\sqrt{x_{i}x_{i} x'_{i}x'_{i}}} \\]

    See:  Wikipedia: Geodesic distance

    C++ includes: GeodesicMetric.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeodesicMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeodesicMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GeodesicMetric
        __init__(self, l, r) -> GeodesicMetric

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_GeodesicMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_GeodesicMetric
    __del__ = lambda self : None;
GeodesicMetric_swigregister = _Distance.GeodesicMetric_swigregister
GeodesicMetric_swigregister(GeodesicMetric)

class JensenMetric(SimpleRealDistance):
    """
    class JensenMetric

    The Jensen-Shannon distance/divergence measures the similarity between
    two data points which is based on the Kullback-Leibler divergence.

    \\[\\displaystyle d(\\bf{x},\\bf{x'}) = \\sum_{i=0}^{n}
    x_{i} log\\frac{x_{i}}{0.5(x_{i} +x'_{i})} + x'_{i}
    log\\frac{x'_{i}}{0.5(x_{i}+x'_{i})} \\]

    See:  Wikipedia: Jensen-Shannon divergence

    Wikipedia: Kullback-Leibler divergence

    C++ includes: JensenMetric.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JensenMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JensenMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> JensenMetric
        __init__(self, l, r) -> JensenMetric

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_JensenMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_JensenMetric
    __del__ = lambda self : None;
JensenMetric_swigregister = _Distance.JensenMetric_swigregister
JensenMetric_swigregister(JensenMetric)

class ManhattanMetric(SimpleRealDistance):
    """
    class ManhattanMetric

    The Manhattan distance (city block distance, $L_{1}$ norm, rectilinear
    distance or taxi cab metric ) is a special case of general Minkowski
    metric and computes the absolute differences between the feature
    dimensions of two data points.

    \\[\\displaystyle d(\\bf{x},\\bf{x'}) = \\sum_{i=1}^{n}
    |\\bf{x_{i}}-\\bf{x'_{i}}| \\quad \\bf{x},\\bf{x'} \\in
    R^{n} \\]

    See:   CMinkowskiMetric

    Wikipedia: Manhattan distance

    C++ includes: ManhattanMetric.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ManhattanMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ManhattanMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ManhattanMetric
        __init__(self, l, r) -> ManhattanMetric

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_ManhattanMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_ManhattanMetric
    __del__ = lambda self : None;
ManhattanMetric_swigregister = _Distance.ManhattanMetric_swigregister
ManhattanMetric_swigregister(ManhattanMetric)

class MinkowskiMetric(SimpleRealDistance):
    """
    class MinkowskiMetric

    The Minkowski metric is one general class of metrics for a
    $\\displaystyle R^{n}$ feature space also referred as the
    $\\displaystyle L_{k} $ norm.

    \\[ \\displaystyle d(\\bf{x},\\bf{x'}) = (\\sum_{i=1}^{n}
    |\\bf{x_{i}}-\\bf{x'_{i}}|^{k})^{\\frac{1}{k}} \\quad x,x'
    \\in R^{n} \\]

    special cases:  $\\displaystyle L_{1} $ norm: Manhattan distance
    See:   CManhattanMetric

    $\\displaystyle L_{2} $ norm: Euclidean distance See:
    CEuclidianDistance  Note that the Minkowski distance tends to the
    Chebyshew distance for increasing $k$.

    See:  Wikipedia: Distance

    C++ includes: MinkowskiMetric.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinkowskiMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinkowskiMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, k) -> MinkowskiMetric
        __init__(self, l, r, k) -> MinkowskiMetric

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side

        k:  parameter k 
        """
        this = _Distance.new_MinkowskiMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_MinkowskiMetric
    __del__ = lambda self : None;
MinkowskiMetric_swigregister = _Distance.MinkowskiMetric_swigregister
MinkowskiMetric_swigregister(MinkowskiMetric)

class HammingWordDistance(StringWordDistance):
    """
    class HammingWordDistance

    C++ includes: HammingWordDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [StringWordDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HammingWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HammingWordDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, use_sign) -> HammingWordDistance
        __init__(self, l, r, use_sign) -> HammingWordDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side

        use_sign:  if sign shall be used 
        """
        this = _Distance.new_HammingWordDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_HammingWordDistance
    __del__ = lambda self : None;
    def get_dictionary(*args):
        """
        get_dictionary(self, dsize, dweights)

        get dictionary weights

        Parameters:
        -----------

        dsize:  size of the dictionary

        dweights:  dictionary weights are stored in here 
        """
        return _Distance.HammingWordDistance_get_dictionary(*args)

HammingWordDistance_swigregister = _Distance.HammingWordDistance_swigregister
HammingWordDistance_swigregister(HammingWordDistance)

class ManhattanWordDistance(StringWordDistance):
    """
    class ManhattanWordDistance

    C++ includes: ManhattanWordDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [StringWordDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ManhattanWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ManhattanWordDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ManhattanWordDistance
        __init__(self, l, r) -> ManhattanWordDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_ManhattanWordDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_ManhattanWordDistance
    __del__ = lambda self : None;
    def get_dictionary(*args):
        """
        get_dictionary(self, dsize, dweights)

        get dictionary weights

        Parameters:
        -----------

        dsize:  size of the dictionary

        dweights:  dictionary weights are stored in here 
        """
        return _Distance.ManhattanWordDistance_get_dictionary(*args)

ManhattanWordDistance_swigregister = _Distance.ManhattanWordDistance_swigregister
ManhattanWordDistance_swigregister(ManhattanWordDistance)

class CanberraWordDistance(StringWordDistance):
    """
    class CanberraWordDistance

    C++ includes: CanberraWordDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [StringWordDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CanberraWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CanberraWordDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CanberraWordDistance
        __init__(self, l, r) -> CanberraWordDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_CanberraWordDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_CanberraWordDistance
    __del__ = lambda self : None;
    def get_dictionary(*args):
        """
        get_dictionary(self, dsize, dweights)

        get dictionary weights

        Parameters:
        -----------

        dsize:  size of the dictionary

        dweights:  dictionary weights are stored in here 
        """
        return _Distance.CanberraWordDistance_get_dictionary(*args)

CanberraWordDistance_swigregister = _Distance.CanberraWordDistance_swigregister
CanberraWordDistance_swigregister(CanberraWordDistance)

class EuclidianDistance(RealDistance):
    """
    class EuclidianDistance

    The familiar Euclidian distance for real valued features computes the
    square root of the sum of squared disparity between the corresponding
    feature dimensions of two data points.

    \\[\\displaystyle d({\\bf x},{\\bf x'})=
    \\sqrt{\\sum_{i=0}^{n}|{\\bf x_i}-{\\bf x'_i}|^2} \\]

    This special case of Minkowski metric is invariant to an arbitrary
    translation or rotation in feature space.

    The Euclidian Squared distance does not take the square root:

    \\[\\displaystyle d({\\bf x},{\\bf x'})=
    \\sum_{i=0}^{n}|{\\bf x_i}-{\\bf x'_i}|^2 \\]

    See:   CMinkowskiMetric

    Wikipedia: Distance in Euclidean space

    C++ includes: EuclidianDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [RealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuclidianDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [RealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EuclidianDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> EuclidianDistance
        __init__(self, l, r) -> EuclidianDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_EuclidianDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_EuclidianDistance
    __del__ = lambda self : None;
    def get_disable_sqrt(*args):
        """
        get_disable_sqrt(self) -> bool

        disable application of sqrt on matrix computation the matrix can then
        also be named norm squared

        if application of sqrt is disabled 
        """
        return _Distance.EuclidianDistance_get_disable_sqrt(*args)

    def set_disable_sqrt(*args):
        """
        set_disable_sqrt(self, state)

        disable application of sqrt on matrix computation the matrix can then
        also be named norm squared

        Parameters:
        -----------

        state:  new disable_sqrt 
        """
        return _Distance.EuclidianDistance_set_disable_sqrt(*args)

EuclidianDistance_swigregister = _Distance.EuclidianDistance_swigregister
EuclidianDistance_swigregister(EuclidianDistance)

class SparseEuclidianDistance(SparseRealDistance):
    """
    class SparseEucldianDistance

    C++ includes: SparseEuclidianDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [SparseRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseEuclidianDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SparseRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseEuclidianDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SparseEuclidianDistance
        __init__(self, l, r) -> SparseEuclidianDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_SparseEuclidianDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_SparseEuclidianDistance
    __del__ = lambda self : None;
SparseEuclidianDistance_swigregister = _Distance.SparseEuclidianDistance_swigregister
SparseEuclidianDistance_swigregister(SparseEuclidianDistance)

class BrayCurtisDistance(SimpleRealDistance):
    """
    class Bray-Curtis distance

    The Bray-Curtis distance (Sorensen distance) is similar to the
    Manhattan distance with normalization.

    \\[\\displaystyle d(\\bf{x},\\bf{x}') =
    \\frac{\\sum_{i=1}^{n}|x_{i}-x'_{i}|}{\\sum_{i=1}^{n}|x_{i}
    +x'_{i}|} \\quad x,x' \\in R^{n} \\]

    C++ includes: BrayCurtisDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrayCurtisDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrayCurtisDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BrayCurtisDistance
        __init__(self, l, r) -> BrayCurtisDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_BrayCurtisDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_BrayCurtisDistance
    __del__ = lambda self : None;
BrayCurtisDistance_swigregister = _Distance.BrayCurtisDistance_swigregister
BrayCurtisDistance_swigregister(BrayCurtisDistance)

class ChiSquareDistance(SimpleRealDistance):
    """
    class ChiSquareDistance

    This implementation of $\\chi^{2}$ distance extends the concept of
    $\\chi^{2}$ metric to negative values.

    \\[\\displaystyle d(\\bf{x},\\bf{x'}) =
    \\sum_{i=1}^{n}\\frac{(x_{i}-x'_{i})^2} {|x_{i}|+|x'_{i}|}
    \\quad \\bf{x},\\bf{x'} \\in R^{n} \\]

    See:  K. Rieck, P. Laskov. Linear-Time Computation of Similarity
    Measures for Sequential Data. Journal of Machine Learning Research,
    9:23-- 48,2008.

    C++ includes: ChiSquareDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChiSquareDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChiSquareDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ChiSquareDistance
        __init__(self, l, r) -> ChiSquareDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_ChiSquareDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_ChiSquareDistance
    __del__ = lambda self : None;
ChiSquareDistance_swigregister = _Distance.ChiSquareDistance_swigregister
ChiSquareDistance_swigregister(ChiSquareDistance)

class CosineDistance(SimpleRealDistance):
    """
    class CosineDistance

    The Cosine distance is obtained by using the Cosine similarity
    (Orchini similarity, angular similarity, normalized dot product),
    which measures similarity between two vectors by finding their angle.
    An extension to the Cosine similarity yields the Tanimoto coefficient.

    \\[\\displaystyle d(\\bf{x},\\bf{x'}) = 1 -
    \\frac{\\sum_{i=1}^{n}\\bf{x_{i}}\\bf{x'_{i}}}
    {\\sqrt{\\sum_{i=1}^{n} x_{i}^2 \\sum_{i=1}^{n} {x'}_{i}^2}}
    \\quad x,x' \\in R^{n} \\]

    See:  Wikipedia: Cosine similarity

    CTanimotoDistance

    C++ includes: CosineDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosineDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CosineDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CosineDistance
        __init__(self, l, r) -> CosineDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_CosineDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_CosineDistance
    __del__ = lambda self : None;
CosineDistance_swigregister = _Distance.CosineDistance_swigregister
CosineDistance_swigregister(CosineDistance)

class TanimotoDistance(SimpleRealDistance):
    """
    class Tanimoto coefficient

    The Tanimoto distance/coefficient (extended Jaccard coefficient) is
    obtained by extending the cosine similarity.

    \\[\\displaystyle d(\\bf{x},\\bf{x'}) =
    \\frac{\\sum_{i=1}^{n}x_{i}x'_{i}}{
    \\sum_{i=1}^{n}x_{i}x_{i}x'_{i}x'_{i}-x_{i}x'_{i}} /quad x,x' /in
    R^{n} \\]

    See:  Wikipedia: Tanimoto coefficient

    CCosineDistance

    C++ includes: TanimotoDistance.h 
    """
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TanimotoDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TanimotoDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TanimotoDistance
        __init__(self, l, r) -> TanimotoDistance

        constructor

        Parameters:
        -----------

        l:  features of left-hand side

        r:  features of right-hand side 
        """
        this = _Distance.new_TanimotoDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Distance.delete_TanimotoDistance
    __del__ = lambda self : None;
TanimotoDistance_swigregister = _Distance.TanimotoDistance_swigregister
TanimotoDistance_swigregister(TanimotoDistance)



