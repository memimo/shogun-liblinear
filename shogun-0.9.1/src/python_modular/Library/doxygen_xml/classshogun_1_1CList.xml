<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classshogun_1_1CList" kind="class" prot="public">
    <compoundname>shogun::CList</compoundname>
    <includes local="no">List.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>thread safe list access functions</header>
      <description><para><anchor id="_1amgrp452bb46bd64230a02d94244a9abc6df7"/> </para></description>
      <memberdef kind="function" id="classshogun_1_1CList_1a32c6ecdd882da0a6b1946034699b16a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_first_element</definition>
        <argsstring>(CListElement&lt; T &gt; *&amp;p_current)</argsstring>
        <name>get_first_element</name>
        <param>
          <type><ref refid="classshogun_1_1CListElement" kindref="compound">CListElement</ref>&lt; T &gt; *&amp;</type>
          <declname>p_current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>go to first element in list and return it</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_current</parametername>
</parameternamelist>
<parameterdescription>
<para>current list element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>first element in list or NULL if list is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="187" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="186" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a95033cfb41564dfdde112a4185183880" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_last_element</definition>
        <argsstring>(CListElement&lt; T &gt; *&amp;p_current)</argsstring>
        <name>get_last_element</name>
        <param>
          <type><ref refid="classshogun_1_1CListElement" kindref="compound">CListElement</ref>&lt; T &gt; *&amp;</type>
          <declname>p_current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>go to last element in list and return it</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_current</parametername>
</parameternamelist>
<parameterdescription>
<para>current list element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>last element in list or NULL if list is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="205" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="204" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1ac26c3cd91e6c8332a881d3c4fb16cace" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_next_element</definition>
        <argsstring>(CListElement&lt; T &gt; *&amp;p_current)</argsstring>
        <name>get_next_element</name>
        <param>
          <type><ref refid="classshogun_1_1CListElement" kindref="compound">CListElement</ref>&lt; T &gt; *&amp;</type>
          <declname>p_current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>go to next element in list and return it</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_current</parametername>
</parameternamelist>
<parameterdescription>
<para>current list element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next element in list or NULL if list is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="223" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="222" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1ac84d6983e556053e6012f95d6415f345" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_previous_element</definition>
        <argsstring>(CListElement&lt; T &gt; *&amp;p_current)</argsstring>
        <name>get_previous_element</name>
        <param>
          <type><ref refid="classshogun_1_1CListElement" kindref="compound">CListElement</ref>&lt; T &gt; *&amp;</type>
          <declname>p_current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>go to previous element in list and return it</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_current</parametername>
</parameternamelist>
<parameterdescription>
<para>current list element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>previous element in list or NULL if list is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="241" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="240" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a157dde54e942d02453abc4d77130095e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_current_element</definition>
        <argsstring>(CListElement&lt; T &gt; *&amp;p_current)</argsstring>
        <name>get_current_element</name>
        <param>
          <type><ref refid="classshogun_1_1CListElement" kindref="compound">CListElement</ref>&lt; T &gt; *&amp;</type>
          <declname>p_current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get current element in list</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_current</parametername>
</parameternamelist>
<parameterdescription>
<para>current list element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>current element in list or NULL if not available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="259" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="258" bodyend="268"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshogun_1_1CList_1a91221882dfa796ca775798be55114c5e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CList&lt; T &gt;::delete_data</definition>
        <argsstring></argsstring>
        <name>delete_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if data is to be deleted on object destruction </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="425" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CList_1af076fbbcd5bc0b057d588dbfc141e033" prot="private" static="no" mutable="no">
        <type><ref refid="classshogun_1_1CListElement" kindref="compound">CListElement</ref>&lt; T &gt; *</type>
        <definition>CListElement&lt;T&gt;* shogun::CList&lt; T &gt;::first</definition>
        <argsstring></argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>first element in list </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="427" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CList_1a8fd5e540d0c4f497101d877943e15b9e" prot="private" static="no" mutable="no">
        <type><ref refid="classshogun_1_1CListElement" kindref="compound">CListElement</ref>&lt; T &gt; *</type>
        <definition>CListElement&lt;T&gt;* shogun::CList&lt; T &gt;::current</definition>
        <argsstring></argsstring>
        <name>current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>current element in list </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="429" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CList_1a167b45554e3b95e9aa42a717f8a0bae4" prot="private" static="no" mutable="no">
        <type><ref refid="classshogun_1_1CListElement" kindref="compound">CListElement</ref>&lt; T &gt; *</type>
        <definition>CListElement&lt;T&gt;* shogun::CList&lt; T &gt;::last</definition>
        <argsstring></argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>last element in list </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="431" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CList_1ace247f09a1bd460ee05240ca3b1e690e" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CList&lt; T &gt;::num_elements</definition>
        <argsstring></argsstring>
        <name>num_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>number of elements </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="433" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshogun_1_1CList_1a6e925fc1ddb6b1b670117b9053e244ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CList&lt; T &gt;::CList</definition>
        <argsstring>(bool p_delete_data=false)</argsstring>
        <name>CList</name>
        <param>
          <type>bool</type>
          <declname>p_delete_data</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_delete_data</parametername>
</parameternamelist>
<parameterdescription>
<para>if data shall be deleted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="62" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a618e5e352dc4eda75312f25bed35a251" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual shogun::CList&lt; T &gt;::~CList</definition>
        <argsstring>()</argsstring>
        <name>~CList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="72" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="71" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1aff0ca411c58d602333bde90f10b7df7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::CList&lt; T &gt;::get_num_elements</definition>
        <argsstring>()</argsstring>
        <name>get_num_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of elements in list</para><para><simplesect kind="return"><para>number of elements in list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="91" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a8f2828b1de0b474ba185c0dfdd54373a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_first_element</definition>
        <argsstring>()</argsstring>
        <name>get_first_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>go to first element in list and return it</para><para><simplesect kind="return"><para>first element in list or NULL if list is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="98" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="97" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1abfacbcd2869a9bb72cba1a3acf6006dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_last_element</definition>
        <argsstring>()</argsstring>
        <name>get_last_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>go to last element in list and return it</para><para><simplesect kind="return"><para>last element in list or NULL if list is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="115" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="114" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1af193c79906cf41ac312bb0ac29632953" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_next_element</definition>
        <argsstring>()</argsstring>
        <name>get_next_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>go to next element in list and return it</para><para><simplesect kind="return"><para>next element in list or NULL if list is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="132" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="131" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a7a29dc05811b10d171f749270331afa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_previous_element</definition>
        <argsstring>()</argsstring>
        <name>get_previous_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>go to previous element in list and return it</para><para><simplesect kind="return"><para>previous element in list or NULL if list is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="149" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="148" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a96aeb7ed5899fd3edb3aa663589c30a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::get_current_element</definition>
        <argsstring>()</argsstring>
        <name>get_current_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get current element in list</para><para><simplesect kind="return"><para>current element in list or NULL if not available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="166" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="165" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a8e240a137b061635dc7d8fc8c561f654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CList&lt; T &gt;::append_element</definition>
        <argsstring>(T data)</argsstring>
        <name>append_element</name>
        <param>
          <type>T</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>append element AFTER the current element</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data element to append </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if appending was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="277" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="276" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1ad6b3d6bb6806ba261056c7a821f590d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CList&lt; T &gt;::append_element_at_listend</definition>
        <argsstring>(T data)</argsstring>
        <name>append_element_at_listend</name>
        <param>
          <type>T</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>append at end of list</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data element to append </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if appending was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="320" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="319" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1aa211987bc0345585da6bf0ad0faa57ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CList&lt; T &gt;::insert_element</definition>
        <argsstring>(T data)</argsstring>
        <name>insert_element</name>
        <param>
          <type>T</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>insert element BEFORE the current element</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if inserting was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="334" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="333" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a04f46cfa6369ffd904d8de16f34c6e2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T shogun::CList&lt; T &gt;::delete_element</definition>
        <argsstring>(void)</argsstring>
        <name>delete_element</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>erases current element the new current element is the successor of the former current element</para><para><simplesect kind="return"><para>the elements data - if available - is returned else NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="383" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="382" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CList_1a1af85cd302c4c2478d1cbdb5c20b5f02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* shogun::CList&lt; T &gt;::get_name</definition>
        <argsstring>() const </argsstring>
        <name>get_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>object name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="421" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="421" bodyend="421"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class List implements a doubly connected list for low-level-objects. </para>    </briefdescription>
    <detaileddescription>
<para>For higher level objects pointers should be used. The list supports calling delete() of an object that is to be removed from the list. </para>    </detaileddescription>
    <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" line="55" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/List.h" bodystart="54" bodyend="434"/>
    <listofallmembers>
      <member refid="classshogun_1_1CList_1a8e240a137b061635dc7d8fc8c561f654" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>append_element</name></member>
      <member refid="classshogun_1_1CList_1ad6b3d6bb6806ba261056c7a821f590d9" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>append_element_at_listend</name></member>
      <member refid="classshogun_1_1CList_1a6e925fc1ddb6b1b670117b9053e244ae" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>CList</name></member>
      <member refid="classshogun_1_1CList_1a8fd5e540d0c4f497101d877943e15b9e" prot="private" virt="non-virtual"><scope>shogun::CList</scope><name>current</name></member>
      <member refid="classshogun_1_1CList_1a91221882dfa796ca775798be55114c5e" prot="private" virt="non-virtual"><scope>shogun::CList</scope><name>delete_data</name></member>
      <member refid="classshogun_1_1CList_1a04f46cfa6369ffd904d8de16f34c6e2b" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>delete_element</name></member>
      <member refid="classshogun_1_1CList_1af076fbbcd5bc0b057d588dbfc141e033" prot="private" virt="non-virtual"><scope>shogun::CList</scope><name>first</name></member>
      <member refid="classshogun_1_1CList_1a96aeb7ed5899fd3edb3aa663589c30a8" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_current_element</name></member>
      <member refid="classshogun_1_1CList_1a157dde54e942d02453abc4d77130095e" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_current_element</name></member>
      <member refid="classshogun_1_1CList_1a8f2828b1de0b474ba185c0dfdd54373a" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_first_element</name></member>
      <member refid="classshogun_1_1CList_1a32c6ecdd882da0a6b1946034699b16a2" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_first_element</name></member>
      <member refid="classshogun_1_1CList_1abfacbcd2869a9bb72cba1a3acf6006dc" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_last_element</name></member>
      <member refid="classshogun_1_1CList_1a95033cfb41564dfdde112a4185183880" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_last_element</name></member>
      <member refid="classshogun_1_1CList_1a1af85cd302c4c2478d1cbdb5c20b5f02" prot="public" virt="virtual"><scope>shogun::CList</scope><name>get_name</name></member>
      <member refid="classshogun_1_1CList_1af193c79906cf41ac312bb0ac29632953" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_next_element</name></member>
      <member refid="classshogun_1_1CList_1ac26c3cd91e6c8332a881d3c4fb16cace" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_next_element</name></member>
      <member refid="classshogun_1_1CList_1aff0ca411c58d602333bde90f10b7df7f" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_num_elements</name></member>
      <member refid="classshogun_1_1CList_1a7a29dc05811b10d171f749270331afa9" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_previous_element</name></member>
      <member refid="classshogun_1_1CList_1ac84d6983e556053e6012f95d6415f345" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>get_previous_element</name></member>
      <member refid="classshogun_1_1CList_1aa211987bc0345585da6bf0ad0faa57ae" prot="public" virt="non-virtual"><scope>shogun::CList</scope><name>insert_element</name></member>
      <member refid="classshogun_1_1CList_1a167b45554e3b95e9aa42a717f8a0bae4" prot="private" virt="non-virtual"><scope>shogun::CList</scope><name>last</name></member>
      <member refid="classshogun_1_1CList_1ace247f09a1bd460ee05240ca3b1e690e" prot="private" virt="non-virtual"><scope>shogun::CList</scope><name>num_elements</name></member>
      <member refid="classshogun_1_1CList_1a618e5e352dc4eda75312f25bed35a251" prot="public" virt="virtual"><scope>shogun::CList</scope><name>~CList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
