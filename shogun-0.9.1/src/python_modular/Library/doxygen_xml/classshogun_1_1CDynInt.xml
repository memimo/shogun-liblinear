<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classshogun_1_1CDynInt" kind="class" prot="public">
    <compoundname>shogun::CDynInt</compoundname>
    <includes local="no">DynInt.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>int</type>
        <declname>sz</declname>
        <defname>sz</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshogun_1_1CDynInt_1a9b4c9d5a2f9b76c268072b18f10fa46d" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T shogun::CDynInt&lt; T, sz &gt;::integer[sz]</definition>
        <argsstring>[sz]</argsstring>
        <name>integer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the integer requiring sizeof(T)*sz bytes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="558" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="558" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a94e538b82fc75cd20539c4205e5017a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>()</argsstring>
        <name>CDynInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>default constructor</para><para>creates a DynInt that is all zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="44" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1aec68ee6e2c8c81aacbbde01be0581768" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>(uint8_t x)</argsstring>
        <name>CDynInt</name>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor (set least significant ``word&apos;&apos;)</para><para>The least significant word is set, the rest filled with zeros.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>least significant word </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="56" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a7fb2ad1f03e667722db75ea06b227aab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>CDynInt</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor (set least significant ``word&apos;&apos;)</para><para>The least significant word is set, the rest filled with zeros.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>least significant word </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="69" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1abfbde162ac6d916ba0a6555fd1dd5b01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>CDynInt</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor (set least significant ``word&apos;&apos;)</para><para>The least significant word is set, the rest filled with zeros.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>least significant word </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="82" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a3680d0c8eea7b5ed22610c284f93ae6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>CDynInt</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor (set least significant ``word&apos;&apos;)</para><para>The least significant word is set, the rest filled with zeros.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>least significant word </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="95" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a2de1205d082fbfb7e37e1af2ba384279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>(int64_t x)</argsstring>
        <name>CDynInt</name>
        <param>
          <type>int64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor (set least significant ``word&apos;&apos;)</para><para>The least significant word is set, the rest filled with zeros.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>least significant word </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="108" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a55e089557904b66e8c9e68fb4e341315" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>CDynInt</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor (set least significant ``word&apos;&apos;)</para><para>The least significant word is set, the rest filled with zeros.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>least significant word </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="121" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="120" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a30d4498638a0f91f41c88f94bb6f924c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>(const T x[sz])</argsstring>
        <name>CDynInt</name>
        <param>
          <type>const T</type>
          <declname>x</declname>
          <array>[sz]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor (set whole array)</para><para>Initialize the DynInt based on an array, which is passed as an argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>array of size sz </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="134" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a821258789b14f2635566f19439ee49ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::CDynInt</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>CDynInt</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copy constructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="141" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a623e8a6a10352c89f78a1dd96452069b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::~CDynInt</definition>
        <argsstring>()</argsstring>
        <name>~CDynInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="148" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a22cefdaa4477beb881923eb16ea23b75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload = operator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>assign elements from x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="155" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1ab9fa2f39c47c9575552dcdca7ae7309d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>const CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator|</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload | operator and return x | y</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="166" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="165" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1afafb5cf989a720790a3a76b52b3f0524" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>const CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator&amp;</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &amp; operator and return x &amp; y</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="180" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="179" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a8d48e0909807dfdeda92541263f95169" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator&lt;&lt;</definition>
        <argsstring>(int shift)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &lt;&lt; operator</para><para>perform bit shift to the left</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift by this amount </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="196" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="195" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a93adf6c64a98e0dc44dd4235d31ad6c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator&gt;&gt;</definition>
        <argsstring>(int shift)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &gt;&gt; operator</para><para>perform bit shift to the right</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift by this amount </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="224" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="223" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a44e45e3ee805ef3dff80df06fc9cc084" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>const CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator^</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload ^ operator and return x ^ y</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="250" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="249" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1abef708bab7286f37654d771ea89067e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>const CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator+</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload + operator and return x + y</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="264" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="263" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a729b3643acea04fea55670d421199fa3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>const CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator-</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload - operator and return x - y</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="285" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1ae98b17f0b9471742d1cd8e97d8e84d6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>const CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator/</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload / operator and return x / y</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="294" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a503337751d429f3700a36222203760fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt;</type>
        <definition>const CDynInt&lt;T,sz&gt; shogun::CDynInt&lt; T, sz &gt;::operator*</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload * operator and return x * y</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="303" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1aa8741ce58e8291f82c4f78efd976f1c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator+=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload += operator; add x to current DynInt</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="312" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a0cf6261ae1254a410e87a3d505915c44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator-=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload -= operator; substract x from current DynInt</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="321" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a3120922bb6286199aa49d2a4e0dd7341" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator*=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload *= operator; multiple x to with current DynInt</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="330" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a97095b0098f5b737398e8dd1f082b851" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator/=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload /= operator; divide current object by x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="339" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1ae5d17fe9a7ec3f97a8408fe608cd598c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CDynInt&lt; T, sz &gt;::operator==</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload == operator; test if current object equals x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="348" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="347" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a0ce26095fc6902f830a78f8d654e25c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CDynInt&lt; T, sz &gt;::operator&gt;=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &gt;= operator; test if current object greater equal x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="363" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="362" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a554bf22a723b3455aa9355d6967e516c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CDynInt&lt; T, sz &gt;::operator&lt;=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &lt;= operator; test if current object lower equal x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="379" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="378" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1ab6880907ae8cf6423489b57142f64f20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CDynInt&lt; T, sz &gt;::operator&gt;</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &gt; operator; test if current object is bigger than x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="395" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="394" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a00b35c58f81930ae6535e975462c07a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CDynInt&lt; T, sz &gt;::operator&lt;</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &lt; operator; test if current object is smaller than x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="411" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="410" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a76b9330210c17fd2afa540b7577b1f4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CDynInt&lt; T, sz &gt;::operator!=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload ! operator; test if current object is not equal to x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="427" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="426" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a525ca11ea64649de7ddbd221c40ff136" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator|=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload |= operator</para><para>perform bitwise or with current DynInt and x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="443" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="442" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1aa40c45ff8885be9bf0a4dff5753995f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator&amp;=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &amp;= operator</para><para>perform bitwise and with current DynInt and x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="457" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="456" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a8d8e6b35866b103ad0867f41fcaca6e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator^=</definition>
        <argsstring>(const CDynInt&lt; T, sz &gt; &amp;x)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload ^= operator</para><para>perform bitwise xor with current DynInt and x</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="471" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="470" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1acbb53994898b2e9d5b0a72d7eb039499" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator&lt;&lt;=</definition>
        <argsstring>(int shift)</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &lt;&lt;= operator</para><para>perform bit shift to the left</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift by this amount </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="485" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="484" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a3ea26c1ea412f28da4e256bc980cd4a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator&gt;&gt;=</definition>
        <argsstring>(int shift)</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>overload &gt;&gt;= operator</para><para>perform bit shift to the right</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift by this amount </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="497" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="496" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a69d776bdfd8dc2d6eabf48d41dfdee85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator~</definition>
        <argsstring>()</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>negate DynInt </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="504" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="503" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a7eac6089dc8bbb5991441d0260ce9cac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shogun::CDynInt&lt; T, sz &gt;::operator T</definition>
        <argsstring>()</argsstring>
        <name>operator T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>cast to least significant word *dangerous* </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="511" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="511" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1ad5cb9aaadd050fce84a3969dbf1047c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>decrement DynInt by one </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="515" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="514" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1af10f3e1970939602ef2d9dfeca325123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CDynInt" kindref="compound">CDynInt</ref>&lt; T, sz &gt; &amp;</type>
        <definition>CDynInt&lt;T,sz&gt;&amp; shogun::CDynInt&lt; T, sz &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>increment DynInt by one </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="530" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="529" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1a15f7108f74a4971d9e0c453d44dd0229" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CDynInt&lt; T, sz &gt;::print_hex</definition>
        <argsstring>() const </argsstring>
        <name>print_hex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>print the current long integer in hex (without carriage return </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="545" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="544" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CDynInt_1aa6553252e8d53ed7ad28ccc3bff95bf2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CDynInt&lt; T, sz &gt;::print_bits</definition>
        <argsstring>() const </argsstring>
        <name>print_bits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>print the current long integer in bits (without carriage return </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="552" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="551" bodyend="554"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>integer type of dynamic size </para>    </briefdescription>
    <detaileddescription>
<para>This object can be used to create huge integers. These integers can be used directly instead of the usual int32_t etc types since operators are properly overloaded.</para><para>An exampe use would be 512 wide unsigned ints consisting of four uint64&apos;s:</para><para>CDynInt&lt;uint64_t, 4&gt; int512;</para><para>This data type is mostly used as a (efficient) storage container for bit-mapped strings. Therefore, currently only comparison, assignment and bit operations are implemented.</para><para>TODO: implement add,mul,div </para>    </detaileddescription>
    <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" line="37" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/lib/DynInt.h" bodystart="36" bodyend="559"/>
    <listofallmembers>
      <member refid="classshogun_1_1CDynInt_1a94e538b82fc75cd20539c4205e5017a6" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1aec68ee6e2c8c81aacbbde01be0581768" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1a7fb2ad1f03e667722db75ea06b227aab" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1abfbde162ac6d916ba0a6555fd1dd5b01" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1a3680d0c8eea7b5ed22610c284f93ae6c" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1a2de1205d082fbfb7e37e1af2ba384279" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1a55e089557904b66e8c9e68fb4e341315" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1a30d4498638a0f91f41c88f94bb6f924c" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1a821258789b14f2635566f19439ee49ca" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>CDynInt</name></member>
      <member refid="classshogun_1_1CDynInt_1a9b4c9d5a2f9b76c268072b18f10fa46d" prot="private" virt="non-virtual"><scope>shogun::CDynInt</scope><name>integer</name></member>
      <member refid="classshogun_1_1CDynInt_1a7eac6089dc8bbb5991441d0260ce9cac" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator T</name></member>
      <member refid="classshogun_1_1CDynInt_1a76b9330210c17fd2afa540b7577b1f4f" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator!=</name></member>
      <member refid="classshogun_1_1CDynInt_1afafb5cf989a720790a3a76b52b3f0524" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&amp;</name></member>
      <member refid="classshogun_1_1CDynInt_1aa40c45ff8885be9bf0a4dff5753995f4" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&amp;=</name></member>
      <member refid="classshogun_1_1CDynInt_1a503337751d429f3700a36222203760fa" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator*</name></member>
      <member refid="classshogun_1_1CDynInt_1a3120922bb6286199aa49d2a4e0dd7341" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator*=</name></member>
      <member refid="classshogun_1_1CDynInt_1abef708bab7286f37654d771ea89067e0" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator+</name></member>
      <member refid="classshogun_1_1CDynInt_1af10f3e1970939602ef2d9dfeca325123" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator++</name></member>
      <member refid="classshogun_1_1CDynInt_1aa8741ce58e8291f82c4f78efd976f1c9" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator+=</name></member>
      <member refid="classshogun_1_1CDynInt_1a729b3643acea04fea55670d421199fa3" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator-</name></member>
      <member refid="classshogun_1_1CDynInt_1ad5cb9aaadd050fce84a3969dbf1047c0" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator--</name></member>
      <member refid="classshogun_1_1CDynInt_1a0cf6261ae1254a410e87a3d505915c44" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator-=</name></member>
      <member refid="classshogun_1_1CDynInt_1ae98b17f0b9471742d1cd8e97d8e84d6b" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator/</name></member>
      <member refid="classshogun_1_1CDynInt_1a97095b0098f5b737398e8dd1f082b851" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator/=</name></member>
      <member refid="classshogun_1_1CDynInt_1a00b35c58f81930ae6535e975462c07a7" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&lt;</name></member>
      <member refid="classshogun_1_1CDynInt_1a8d48e0909807dfdeda92541263f95169" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&lt;&lt;</name></member>
      <member refid="classshogun_1_1CDynInt_1acbb53994898b2e9d5b0a72d7eb039499" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classshogun_1_1CDynInt_1a554bf22a723b3455aa9355d6967e516c" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&lt;=</name></member>
      <member refid="classshogun_1_1CDynInt_1a22cefdaa4477beb881923eb16ea23b75" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator=</name></member>
      <member refid="classshogun_1_1CDynInt_1ae5d17fe9a7ec3f97a8408fe608cd598c" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator==</name></member>
      <member refid="classshogun_1_1CDynInt_1ab6880907ae8cf6423489b57142f64f20" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&gt;</name></member>
      <member refid="classshogun_1_1CDynInt_1a0ce26095fc6902f830a78f8d654e25c8" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&gt;=</name></member>
      <member refid="classshogun_1_1CDynInt_1a93adf6c64a98e0dc44dd4235d31ad6c4" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&gt;&gt;</name></member>
      <member refid="classshogun_1_1CDynInt_1a3ea26c1ea412f28da4e256bc980cd4a2" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classshogun_1_1CDynInt_1a44e45e3ee805ef3dff80df06fc9cc084" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator^</name></member>
      <member refid="classshogun_1_1CDynInt_1a8d8e6b35866b103ad0867f41fcaca6e5" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator^=</name></member>
      <member refid="classshogun_1_1CDynInt_1ab9fa2f39c47c9575552dcdca7ae7309d" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator|</name></member>
      <member refid="classshogun_1_1CDynInt_1a525ca11ea64649de7ddbd221c40ff136" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator|=</name></member>
      <member refid="classshogun_1_1CDynInt_1a69d776bdfd8dc2d6eabf48d41dfdee85" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>operator~</name></member>
      <member refid="classshogun_1_1CDynInt_1aa6553252e8d53ed7ad28ccc3bff95bf2" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>print_bits</name></member>
      <member refid="classshogun_1_1CDynInt_1a15f7108f74a4971d9e0c453d44dd0229" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>print_hex</name></member>
      <member refid="classshogun_1_1CDynInt_1a623e8a6a10352c89f78a1dd96452069b" prot="public" virt="non-virtual"><scope>shogun::CDynInt</scope><name>~CDynInt</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
