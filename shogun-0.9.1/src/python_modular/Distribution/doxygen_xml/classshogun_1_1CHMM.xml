<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classshogun_1_1CHMM" kind="class" prot="public">
    <compoundname>shogun::CHMM</compoundname>
    <basecompoundref refid="classshogun_1_1CDistribution" prot="public" virt="non-virtual">shogun::CDistribution</basecompoundref>
    <includes local="no">HMM.h</includes>
      <sectiondef kind="user-defined">
      <header>model specific variables.</header>
      <description><para><anchor id="_1amgrp1cf141028fa58fcd06719f163db4ae7e"/> these are p,q,a,b,N,M etc </para></description>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ae86544e4a94912c1b2a7855275b63fa9" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <briefdescription>
<para>number of observation symbols eg. ACGT -&gt; 0123 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1186" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a5f189fdf991ad258753f9194baced69c" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::N</definition>
        <argsstring></argsstring>
        <name>N</name>
        <briefdescription>
<para>number of states </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1189" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a1341da6a3b84580d12b6e93a8eec5d2d" prot="protected" static="no" mutable="no">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::PSEUDO</definition>
        <argsstring></argsstring>
        <name>PSEUDO</name>
        <briefdescription>
<para>define pseudocounts against overfitting </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1192" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1afe2231061598330afaf6a287805e32ec" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::line</definition>
        <argsstring></argsstring>
        <name>line</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1195" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1aa668b9972769169424e9e7780d4d20e9" prot="protected" static="no" mutable="no">
        <type>CStringFeatures&lt; uint16_t &gt; *</type>
        <definition>CStringFeatures&lt;uint16_t&gt;* shogun::CHMM::p_observations</definition>
        <argsstring></argsstring>
        <name>p_observations</name>
        <briefdescription>
<para>observation matrix </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1198" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a8cfefef6d409bd6799d6467627d0c695" prot="protected" static="no" mutable="no">
        <type><ref refid="classshogun_1_1CModel" kindref="compound">CModel</ref> *</type>
        <definition>CModel* shogun::CHMM::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1201" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a54f49a5aa36e403f572ae8bb25c4bc2e" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::transition_matrix_A</definition>
        <argsstring></argsstring>
        <name>transition_matrix_A</name>
        <briefdescription>
<para>matrix of absolute counts of transitions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1204" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a71194f89c5ff5965a04a0fecb0938581" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::observation_matrix_B</definition>
        <argsstring></argsstring>
        <name>observation_matrix_B</name>
        <briefdescription>
<para>matrix of absolute counts of observations within each state </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1207" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1aa4feb6a080e4579fea401756a57821e6" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::transition_matrix_a</definition>
        <argsstring></argsstring>
        <name>transition_matrix_a</name>
        <briefdescription>
<para>transition matrix </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1210" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a2f7f0559a4869be8ec3a2d45bd9a9126" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::initial_state_distribution_p</definition>
        <argsstring></argsstring>
        <name>initial_state_distribution_p</name>
        <briefdescription>
<para>initial distribution of states </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1213" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a59e78eb474071af3096c45fd3d04050e" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::end_state_distribution_q</definition>
        <argsstring></argsstring>
        <name>end_state_distribution_q</name>
        <briefdescription>
<para>distribution of end-states </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1216" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a774f9275d018be9d3a3ea564af6c4a1a" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::observation_matrix_b</definition>
        <argsstring></argsstring>
        <name>observation_matrix_b</name>
        <briefdescription>
<para>distribution of observations within each state </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1219" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a141533c5e0c2f13f503f35198bcb7e2a" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::iterations</definition>
        <argsstring></argsstring>
        <name>iterations</name>
        <briefdescription>
<para>convergence criterion iterations </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1222" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1afb5453f56b7745f559ec520b48c1c5f8" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::iteration_count</definition>
        <argsstring></argsstring>
        <name>iteration_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1223" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a1a9690b7f51482396aa6cf0f046e100b" prot="protected" static="no" mutable="no">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::epsilon</definition>
        <argsstring></argsstring>
        <name>epsilon</name>
        <briefdescription>
<para>convergence criterion epsilon </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1226" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ac6b9c4bcec8f1d24ece26e41b06696d7" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::conv_it</definition>
        <argsstring></argsstring>
        <name>conv_it</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1227" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a40cacc736c0e4b978760693decd3b2d5" prot="protected" static="no" mutable="no">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::all_pat_prob</definition>
        <argsstring></argsstring>
        <name>all_pat_prob</name>
        <briefdescription>
<para>probability of best path </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1230" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ae683a6e3dc2e3b7550fffc13d7da2341" prot="protected" static="no" mutable="no">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::pat_prob</definition>
        <argsstring></argsstring>
        <name>pat_prob</name>
        <briefdescription>
<para>probability of best path </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1233" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a45c0ae569712ef94206a263ec78e9283" prot="protected" static="no" mutable="no">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::mod_prob</definition>
        <argsstring></argsstring>
        <name>mod_prob</name>
        <briefdescription>
<para>probability of model </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1236" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a1c19f0370d0b71f7965b35e3fe9ae0dd" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CHMM::mod_prob_updated</definition>
        <argsstring></argsstring>
        <name>mod_prob_updated</name>
        <briefdescription>
<para>true if model probability is up to date </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1239" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ab9b359a18731134dfcb58d5c1d74ff46" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CHMM::all_path_prob_updated</definition>
        <argsstring></argsstring>
        <name>all_path_prob_updated</name>
        <briefdescription>
<para>true if path probability is up to date </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1242" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ab9ce2372bfbd2a2c374c41803f6a2545" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::path_deriv_dimension</definition>
        <argsstring></argsstring>
        <name>path_deriv_dimension</name>
        <briefdescription>
<para>dimension for which path_deriv was calculated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1245" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a634f2667e9a771ed1ec64020fbdd0f0d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CHMM::path_deriv_updated</definition>
        <argsstring></argsstring>
        <name>path_deriv_updated</name>
        <briefdescription>
<para>true if path derivative is up to date </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1248" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a04ee88ece57f80b897323233955e8bb3" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CHMM::loglikelihood</definition>
        <argsstring></argsstring>
        <name>loglikelihood</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1251" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a1c632bd2b9e210d0189881448c2b42ba" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CHMM::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1254" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a6eccb1e55662101bbf349145dc90ad9c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CHMM::reused_caches</definition>
        <argsstring></argsstring>
        <name>reused_caches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1257" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1257" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructor/Destructor and helper function</header>
      <description><para><anchor id="_1amgrpa0835bdaf6e1d39d62fb8ffb14358c34"/> Train definitions. Encapsulates Modelparameters that are constant/shall be learned. Consists of structures and access functions for learning only defined transitions and constants. </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ab0063b20407ffb82a6eef50816bec0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CHMM::CHMM</definition>
        <argsstring>(int32_t N, int32_t M, CModel *model, float64_t PSEUDO)</argsstring>
        <name>CHMM</name>
        <param>
          <type>int32_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="classshogun_1_1CModel" kindref="compound">CModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>PSEUDO</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of states </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>number of emissions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>model which holds definitions of states to be learned + consts </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PSEUDO</parametername>
</parameternamelist>
<parameterdescription>
<para>Pseudo Value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="472"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a960df96e92b6a619ea9bd7f23a13264d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CHMM::CHMM</definition>
        <argsstring>(CStringFeatures&lt; uint16_t &gt; *obs, int32_t N, int32_t M, float64_t PSEUDO)</argsstring>
        <name>CHMM</name>
        <param>
          <type>CStringFeatures&lt; uint16_t &gt; *</type>
          <declname>obs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>PSEUDO</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="475"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a1a96eeeae99511f2a734dde51c8de890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CHMM::CHMM</definition>
        <argsstring>(int32_t N, float64_t *p, float64_t *q, float64_t *a)</argsstring>
        <name>CHMM</name>
        <param>
          <type>int32_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="477"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a0ababb31ddffcc078ed555ba1a0cc5f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CHMM::CHMM</definition>
        <argsstring>(int32_t N, float64_t *p, float64_t *q, int32_t num_trans, float64_t *a_trans)</argsstring>
        <name>CHMM</name>
        <param>
          <type>int32_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_trans</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>a_trans</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="480"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a11d8969316b90e6471a7b8ad42c02b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CHMM::CHMM</definition>
        <argsstring>(FILE *model_file, float64_t PSEUDO)</argsstring>
        <name>CHMM</name>
        <param>
          <type>FILE *</type>
          <declname>model_file</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>PSEUDO</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor - Initialization from model file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Filehandle to a hmm model file (*.mod) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PSEUDO</parametername>
</parameternamelist>
<parameterdescription>
<para>Pseudo Value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="486"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ab03d42392fedd52c31b21d0c55d9f928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CHMM::CHMM</definition>
        <argsstring>(CHMM *h)</argsstring>
        <name>CHMM</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Constructor - Clone model h. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="489"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aa0d54d3eaf0ea5fae90fadfc8a15fb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual shogun::CHMM::~CHMM</definition>
        <argsstring>()</argsstring>
        <name>~CHMM</name>
        <briefdescription>
<para>Destructor - Cleanup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="492"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a3ee09e1ab26aabbef44ba2a13dde60f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CHMM::train</definition>
        <argsstring>(CFeatures *data=NULL)</argsstring>
        <name>train</name>
        <reimplements refid="classshogun_1_1CDistribution_1a597d0b1c5477f7df960ae30bc1bd6153">train</reimplements>
        <param>
          <type>CFeatures *</type>
          <declname>data</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>learn distribution</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>training data (parameter can be avoided if distance or kernel-based classifiers are used and distance/kernels are initialized with train data)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether training was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="502"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a5f24536584a97f8ac6a4af1d2b5a4d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int32_t</type>
        <definition>virtual int32_t shogun::CHMM::get_num_model_parameters</definition>
        <argsstring>()</argsstring>
        <name>get_num_model_parameters</name>
        <reimplements refid="classshogun_1_1CDistribution_1a9c1bdc1a6cf95b63bb197af2744ad43f">get_num_model_parameters</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of parameters in model</para><para>abstract base method</para><para><simplesect kind="return"><para>number of parameters in model </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="503" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="503" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aaa395269dffeed67e08248ba89cd4653" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>float64_t</type>
        <definition>virtual float64_t shogun::CHMM::get_log_model_parameter</definition>
        <argsstring>(int32_t num_param)</argsstring>
        <name>get_log_model_parameter</name>
        <reimplements refid="classshogun_1_1CDistribution_1a1a9f694299e08e7ff45b7d4626d13c17">get_log_model_parameter</reimplements>
        <param>
          <type>int32_t</type>
          <declname>num_param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get model parameter (logarithmic)</para><para>abstrac base method</para><para><simplesect kind="return"><para>model parameter (logarithmic) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="504"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1af0e76300817bfe977c71df286d1fc79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>float64_t</type>
        <definition>virtual float64_t shogun::CHMM::get_log_derivative</definition>
        <argsstring>(int32_t num_param, int32_t num_example)</argsstring>
        <name>get_log_derivative</name>
        <reimplements refid="classshogun_1_1CDistribution_1adf3ca306e936267b3b60aaf56254db25">get_log_derivative</reimplements>
        <param>
          <type>int32_t</type>
          <declname>num_param</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get partial derivative of likelihood function (logarithmic)</para><para>abstract base method</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_param</parametername>
</parameternamelist>
<parameterdescription>
<para>derivative against which param </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_example</parametername>
</parameternamelist>
<parameterdescription>
<para>which example </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>derivative of likelihood (logarithmic) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="505"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1af463388dbbb4d64d10b4133f0da4826a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>float64_t</type>
        <definition>virtual float64_t shogun::CHMM::get_log_likelihood_example</definition>
        <argsstring>(int32_t num_example)</argsstring>
        <name>get_log_likelihood_example</name>
        <reimplements refid="classshogun_1_1CDistribution_1ad3f236813136beae6e79f5bc8c86a859">get_log_likelihood_example</reimplements>
        <param>
          <type>int32_t</type>
          <declname>num_example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute log likelihood for example</para><para>abstract base method</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_example</parametername>
</parameternamelist>
<parameterdescription>
<para>which example </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>log likelihood for example </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="507" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="506" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aaab5fbe124baf9d677480422aa76421a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::initialize</definition>
        <argsstring>(CModel *model, float64_t PSEUDO, FILE *model_file=NULL)</argsstring>
        <name>initialize</name>
        <param>
          <type><ref refid="classshogun_1_1CModel" kindref="compound">CModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>PSEUDO</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>model_file</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialization function - gets called by constructors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>model which holds definitions of states to be learned + consts </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PSEUDO</parametername>
</parameternamelist>
<parameterdescription>
<para>Pseudo Value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Filehandle to a hmm model file (*.mod) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="516"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>probability functions.</header>
      <description><para><anchor id="_1amgrp17bd26ea4a8060b0bb53bc86efd7f0ff"/> forward/backward/viterbi algorithm </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a468af07aea54b92b3b838b89599cd331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::forward_comp</definition>
        <argsstring>(int32_t time, int32_t state, int32_t dimension)</argsstring>
        <name>forward_comp</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>forward algorithm. calculates Pr[O_0,O_1, ..., O_t, q_time=S_i| lambda] for 0&lt;= time &lt;= T-1 Pr[O|lambda] for time &gt; T <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>t </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>i </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of observation (observations are a matrix, where a row stands for one dimension i.e. 0_0,O_1,...,O_{T-1} </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="536"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aaf62d21041f9edaea00d22ae628d95fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::forward_comp_old</definition>
        <argsstring>(int32_t time, int32_t state, int32_t dimension)</argsstring>
        <name>forward_comp_old</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="538"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1acd89279e3157190569768e640707d9a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::backward_comp</definition>
        <argsstring>(int32_t time, int32_t state, int32_t dimension)</argsstring>
        <name>backward_comp</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>backward algorithm. calculates Pr[O_t+1,O_t+2, ..., O_T-1| q_time=S_i, lambda] for 0&lt;= time &lt;= T-1 Pr[O|lambda] for time &gt;= T <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>t </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>i </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of observation (observations are a matrix, where a row stands for one dimension i.e. 0_0,O_1,...,O_{T-1} </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="547"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ae194448fa81077be3869a54e53898085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::backward_comp_old</definition>
        <argsstring>(int32_t time, int32_t state, int32_t dimension)</argsstring>
        <name>backward_comp_old</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="549"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aa1d876bb99b1d5917d67eb8f281a01d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::best_path</definition>
        <argsstring>(int32_t dimension)</argsstring>
        <name>best_path</name>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculates probability of best state sequence s_0,...,s_T-1 AND path itself using viterbi algorithm. The path can be found in the array PATH(dimension)[0..T-1] afterwards <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of observation for which the most probable path is calculated (observations are a matrix, where a row stands for one dimension i.e. 0_0,O_1,...,O_{T-1} </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="555"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a21cec8efd96d8d5aea75bacc397c8b3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t shogun::CHMM::get_best_path_state</definition>
        <argsstring>(int32_t dim, int32_t t)</argsstring>
        <name>get_best_path_state</name>
        <param>
          <type>int32_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="557" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="556" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a6d61fc98eef983a463aa06b3e80d0770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::model_probability_comp</definition>
        <argsstring>()</argsstring>
        <name>model_probability_comp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculates probability that observations were generated by the model using forward algorithm. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="564"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a009769e5bfb7f71b3d1a63ba0a5fda39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::model_probability</definition>
        <argsstring>(int32_t dimension=-1)</argsstring>
        <name>model_probability</name>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>inline proxy for model probability. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="568" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="567" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ad455104aac0d5476bd1dc508bc969ff5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::linear_model_probability</definition>
        <argsstring>(int32_t dimension)</argsstring>
        <name>linear_model_probability</name>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculates likelihood for linear model on observations in MEMORY <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension for which probability is calculated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>model probability </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="587" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="586" bodyend="612"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>convergence criteria</header>
      <description><para><anchor id="_1amgrpcc1a0621e9640105e4b97a7db8ea2928"/> </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a8626f05bd15ea80f3ab0f7c3dcaac814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::set_iterations</definition>
        <argsstring>(int32_t num)</argsstring>
        <name>set_iterations</name>
        <param>
          <type>int32_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="618" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="618" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a63a12154c7fbae58a90da0c8efb321f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::get_iterations</definition>
        <argsstring>()</argsstring>
        <name>get_iterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="619" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="619" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a9ddaea71075cfcd537ee0ebfabcf8a89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::set_epsilon</definition>
        <argsstring>(float64_t eps)</argsstring>
        <name>set_epsilon</name>
        <param>
          <type>float64_t</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="620" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="620" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ac45b393d8f7b2d351b705f320f3c72d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::get_epsilon</definition>
        <argsstring>()</argsstring>
        <name>get_epsilon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="621" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="621" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aeef21fb3ec307d8401f06069ed1a9a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::baum_welch_viterbi_train</definition>
        <argsstring>(BaumWelchViterbiType type)</argsstring>
        <name>baum_welch_viterbi_train</name>
        <param>
          <type>BaumWelchViterbiType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>interface for e.g. GUIHMM to run BaumWelch or Viterbi training <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of BaumWelch/Viterbi training </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="626"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>model training</header>
      <description><para><anchor id="_1amgrp6e7fcdb1f64f1ed27642c434913ecf76"/> </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a8ded52ff69e256b072126cada62416d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::estimate_model_baum_welch</definition>
        <argsstring>(CHMM *train)</argsstring>
        <name>estimate_model_baum_welch</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>train</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>uses baum-welch-algorithm to train a fully connected HMM. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>train</parametername>
</parameternamelist>
<parameterdescription>
<para>model from which the new model is estimated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="634"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a6d7c8173915e0af713bcdb7662be9cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::estimate_model_baum_welch_trans</definition>
        <argsstring>(CHMM *train)</argsstring>
        <name>estimate_model_baum_welch_trans</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>train</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="635"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ad8998593a88e5b986d02ad8f99797b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::estimate_model_baum_welch_old</definition>
        <argsstring>(CHMM *train)</argsstring>
        <name>estimate_model_baum_welch_old</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>train</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="642"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a21588de76304d3b4149f78014a9a108c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::estimate_model_baum_welch_defined</definition>
        <argsstring>(CHMM *train)</argsstring>
        <name>estimate_model_baum_welch_defined</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>train</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>uses baum-welch-algorithm to train the defined transitions etc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>train</parametername>
</parameternamelist>
<parameterdescription>
<para>model from which the new model is estimated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="648"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a4b7b792fe38109132cf971e67710735e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::estimate_model_viterbi</definition>
        <argsstring>(CHMM *train)</argsstring>
        <name>estimate_model_viterbi</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>train</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>uses viterbi training to train a fully connected HMM <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>train</parametername>
</parameternamelist>
<parameterdescription>
<para>model from which the new model is estimated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="653"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a83f5cd52f68ea4eaaf3a4901ee4129ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::estimate_model_viterbi_defined</definition>
        <argsstring>(CHMM *train)</argsstring>
        <name>estimate_model_viterbi_defined</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>train</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>uses viterbi training to train the defined transitions etc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>train</parametername>
</parameternamelist>
<parameterdescription>
<para>model from which the new model is estimated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="658"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>output functions.</header>
      <description><para><anchor id="_1amgrp941fcaaeb98de766320f0ad8aee5de36"/> </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a60b924202826a654e7a4fd03ae419aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::output_model</definition>
        <argsstring>(bool verbose=false)</argsstring>
        <name>output_model</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prints the model parameters on screen. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>when false only the model probability will be printed when true the whole model will be printed additionally </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="674"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a88a9bd6d0881ca6650272699b1a9c891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::output_model_defined</definition>
        <argsstring>(bool verbose=false)</argsstring>
        <name>output_model_defined</name>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>performs output_model only for the defined transitions etc </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="677"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>model helper functions.</header>
      <description><para><anchor id="_1amgrpa3147cf7978c6db1e999889d4753bb6a"/> </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a39e37c9d17c17201e3f73a712a2dd51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::normalize</definition>
        <argsstring>(bool keep_dead_states=false)</argsstring>
        <name>normalize</name>
        <param>
          <type>bool</type>
          <declname>keep_dead_states</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>normalize the model to satisfy stochasticity </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="685"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ae5bc79da6d2204880c02b5d40a89048b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::add_states</definition>
        <argsstring>(int32_t num_states, float64_t default_val=0)</argsstring>
        <name>add_states</name>
        <param>
          <type>int32_t</type>
          <declname>num_states</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>default_val</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>increases the number of states by num_states the new a/b/p/q values are given the value default_val where 0&lt;=default_val&lt;=1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="690"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a0fc0537445e5c65120c3b1a7e0809a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::append_model</definition>
        <argsstring>(CHMM *append_model, float64_t *cur_out, float64_t *app_out)</argsstring>
        <name>append_model</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>append_model</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>cur_out</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>app_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>appends the append_model to the current hmm, i.e. two extra states are created. one is the end state of the current hmm with outputs cur_out (of size M) and the other state is the start state of the append_model. transition probability from state 1 to states 1 is 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="698"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aa883fac2990da37063a890b415b6a18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::append_model</definition>
        <argsstring>(CHMM *append_model)</argsstring>
        <name>append_model</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>append_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>appends the append_model to the current hmm, here no extra states are created. former q_i are multiplied by q_ji to give the a_ij from the current hmm to the append_model </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="703"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a10ff3d81fd376f584b3d9704ef1e67f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::chop</definition>
        <argsstring>(float64_t value)</argsstring>
        <name>chop</name>
        <param>
          <type>float64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set any model parameter with probability smaller than value to ZERO </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="706"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aead25ee96a04770e815ffadc1664f964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::convert_to_log</definition>
        <argsstring>()</argsstring>
        <name>convert_to_log</name>
        <briefdescription>
<para>convert model to log probabilities </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="709"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a4af248fdf2ed5c0c93e0efba2574448c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::init_model_random</definition>
        <argsstring>()</argsstring>
        <name>init_model_random</name>
        <briefdescription>
<para>init model with random values </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="712"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aaa007e2f5a137abd1dab82b1e4a7f33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::init_model_defined</definition>
        <argsstring>()</argsstring>
        <name>init_model_defined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>init model according to const_x, learn_x. first model is initialized with 0 for all parameters then parameters in learn_x are initialized with random values finally const_x parameters are set and model is normalized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="719"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a9727058d7a7460250665ea9c15173e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::clear_model</definition>
        <argsstring>()</argsstring>
        <name>clear_model</name>
        <briefdescription>
<para>initializes model with log(PSEUDO) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="722"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a31be606ff813d82f9789647e9bc2883a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::clear_model_defined</definition>
        <argsstring>()</argsstring>
        <name>clear_model_defined</name>
        <briefdescription>
<para>initializes only parameters in learn_x with log(PSEUDO) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="725"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a10cb44a07aa77a2b2e6ddea753503c9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::copy_model</definition>
        <argsstring>(CHMM *l)</argsstring>
        <name>copy_model</name>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>copies the the modelparameters from l </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="728"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1af730091047c1df1311b58a3b733c4bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::invalidate_model</definition>
        <argsstring>()</argsstring>
        <name>invalidate_model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>invalidates all caches. this function has to be called when direct changes to the model have been made. this is necessary for the forward/backward/viterbi algorithms to not work with old tables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="734"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a304cd08aae4d0fee4617f0b73e85651d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::get_status</definition>
        <argsstring>() const </argsstring>
        <name>get_status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get status <simplesect kind="return"><para>true if everything is ok, else false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="740" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="739" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ab5b82f03467718873238dd5877cc350c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::get_pseudo</definition>
        <argsstring>() const </argsstring>
        <name>get_pseudo</name>
        <briefdescription>
<para>returns current pseudo value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="746" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="745" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aeb011004e9e59f9b898b7ee135c3e44d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_pseudo</definition>
        <argsstring>(float64_t pseudo)</argsstring>
        <name>set_pseudo</name>
        <param>
          <type>float64_t</type>
          <declname>pseudo</declname>
        </param>
        <briefdescription>
<para>sets current pseudo value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="752" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="751" bodyend="754"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para><anchor id="_1amgrpd41d8cd98f00b204e9800998ecf8427e"/> </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a9f24fe522a6b00d5b23d80ed0cb604c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_observations</definition>
        <argsstring>(CStringFeatures&lt; uint16_t &gt; *obs, CHMM *hmm=NULL)</argsstring>
        <name>set_observations</name>
        <param>
          <type>CStringFeatures&lt; uint16_t &gt; *</type>
          <declname>obs</declname>
        </param>
        <param>
          <type><ref refid="classshogun_1_1CHMM" kindref="compound">CHMM</ref> *</type>
          <declname>hmm</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>observation functions set/get observation matrix set new observations sets the observation pointer and initializes observation-dependent caches if hmm is given, then the caches of the model hmm are used </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="784"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ac43eff15b70082ec955ca1826e8f4481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_observation_nocache</definition>
        <argsstring>(CStringFeatures&lt; uint16_t &gt; *obs)</argsstring>
        <name>set_observation_nocache</name>
        <param>
          <type>CStringFeatures&lt; uint16_t &gt; *</type>
          <declname>obs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set new observations only set the observation pointer and drop caches if there were any </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="789"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a5ebf7058caad7d1f34fd4aa7662a4ea1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CStringFeatures&lt; uint16_t &gt; *</type>
        <definition>CStringFeatures&lt;uint16_t&gt;* shogun::CHMM::get_observations</definition>
        <argsstring>()</argsstring>
        <name>get_observations</name>
        <briefdescription>
<para>return observation pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="793" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="792" bodyend="796"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>load/save functions.</header>
      <description><para><anchor id="_1amgrp7e1aee82e815347b14f7af7aede98f9f"/> for observations/model/traindefinitions </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a1a592acb1acd59b117818b7e555ad300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::load_definitions</definition>
        <argsstring>(FILE *file, bool verbose, bool initialize=true)</argsstring>
        <name>load_definitions</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initialize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>read definitions file (learn_x,const_x) used for training. -format specs: definition_file (train.def) % HMM-TRAIN - specification % learn_a - elements in state_transition_matrix to be learned % learn_b - elements in oberservation_per_state_matrix to be learned % note: each line stands for % state, observation(0), observation(1)...observation(NOW) % learn_p - elements in initial distribution to be learned % learn_q - elements in the end-state distribution to be learned % % const_x - specifies initial values of elements % rest is assumed to be 0.0 % % NOTE: IMPLICIT DEFINES: % define A 0 % define C 1 % define G 2 % define T 3</para><para>learn_a=[ [int32_t,int32_t]; [int32_t,int32_t]; [int32_t,int32_t]; ........ [int32_t,int32_t]; [-1,-1]; ];</para><para>learn_b=[ [int32_t,int32_t,int32_t,...,int32_t]; [int32_t,int32_t,int32_t,...,int32_t]; [int32_t,int32_t,int32_t,...,int32_t]; ........ [int32_t,int32_t,int32_t,...,int32_t]; [-1,-1]; ];</para><para>learn_p= [ int32_t, ... , int32_t, -1 ];</para><para>learn_q= [ int32_t, ... , int32_t, -1 ];</para><para>const_a=[ [int32_t,int32_t,float64_t]; [int32_t,int32_t,float64_t]; [int32_t,int32_t,float64_t]; ........ [int32_t,int32_t,float64_t]; [-1,-1,-1]; ];</para><para>const_b=[ [int32_t,int32_t,int32_t,...,int32_t,float64_t]; [int32_t,int32_t,int32_t,...,int32_t,float64_t]; [int32_t,int32_t,int32_t,...,int32_t,&lt;DOUBLE]; ........ [int32_t,int32_t,int32_t,...,int32_t,float64_t]; [-1,-1,-1]; ];</para><para>const_p[]=[ [int32_t, float64_t], ... , [int32_t,float64_t], [-1,-1] ]; const_q[]=[ [int32_t, float64_t], ... , [int32_t,float64_t], [-1,-1] ];</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle to definitions file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>true for verbose messages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialize</parametername>
</parameternamelist>
<parameterdescription>
<para>true to initialize to underlying HMM </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="866"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1abcc8f4d70f358b719ee78860572010b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::load_model</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>load_model</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>read model from file. -format specs: model_file (model.hmm) % HMM - specification % N - number of states % M - number of observation_tokens % a is state_transition_matrix % size(a)= [N,N] % % b is observation_per_state_matrix % size(b)= [N,M] % % p is initial distribution % size(p)= [1, N]</para><para>N=int32_t; M=int32_t;</para><para>p=[float64_t,float64_t...float64_t]; q=[float64_t,float64_t...float64_t];</para><para>a=[ [float64_t,float64_t...float64_t]; [float64_t,float64_t...float64_t]; [float64_t,float64_t...float64_t]; [float64_t,float64_t...float64_t]; [float64_t,float64_t...float64_t]; ];</para><para>b=[ [float64_t,float64_t...float64_t]; [float64_t,float64_t...float64_t]; [float64_t,float64_t...float64_t]; [float64_t,float64_t...float64_t]; [float64_t,float64_t...float64_t]; ]; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle to model file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="903"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a101701e69c1881848443ea90dc037347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_model</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_model</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save model to file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle to model file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="908"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a7312f2707fca79585fda666e56cada7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_model_derivatives</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_model_derivatives</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save model derivatives to file in ascii format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="913"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1acbfdbac19f350804c581e42051f8a924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_model_derivatives_bin</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_model_derivatives_bin</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save model derivatives to file in binary format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="918"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a358b18069d20164a67500461c43f5db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_model_bin</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_model_bin</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save model in binary format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="923"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a23de31a869df80ac46a9e0651749deca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::check_model_derivatives</definition>
        <argsstring>()</argsstring>
        <name>check_model_derivatives</name>
        <briefdescription>
<para>numerically check whether derivates were calculated right </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="926"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a999215daff56782bf96993e908024425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::check_model_derivatives_combined</definition>
        <argsstring>()</argsstring>
        <name>check_model_derivatives_combined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="927"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ab04fb90965696e7a74a65b6e19f10f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T_STATES *</type>
        <definition>T_STATES* shogun::CHMM::get_path</definition>
        <argsstring>(int32_t dim, float64_t &amp;prob)</argsstring>
        <name>get_path</name>
        <param>
          <type>int32_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>float64_t &amp;</type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get viterbi path and path probability <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension for which to obtain best path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob</parametername>
</parameternamelist>
<parameterdescription>
<para>likelihood of path </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>viterbi path </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="934"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aa1edb1d3877c043d9979ace88ec08406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_path</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_path</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save viterbi path in ascii format <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="939"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aaf8658fb50c0f3dcce68357d73c51a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_path_derivatives</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_path_derivatives</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save viterbi path in ascii format <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="944"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a8bc8767b1f6cce2c219a87ff27bd243a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_path_derivatives_bin</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_path_derivatives_bin</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save viterbi path in binary format <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="949"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a8d4675b79f57f8cfaea122582d6a9e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_likelihood_bin</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_likelihood_bin</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save model probability in binary format <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="959"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a02f27487fd947023a53b084cc72688d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::save_likelihood</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>save_likelihood</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save model probability in ascii format <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filehandle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="964"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>access functions for model parameters</header>
      <description><para><anchor id="_1amgrp6fcc21d9aa24c9005de33f85a0965afb"/> for all the arrays a,b,p,q,A,B,psi and scalar model parameters like N,M </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a0999ad2230614c19850a0eb2b347852a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T_STATES</type>
        <definition>T_STATES shogun::CHMM::get_N</definition>
        <argsstring>() const </argsstring>
        <name>get_N</name>
        <briefdescription>
<para>access function for number of states N </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="974" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="974" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aeb6e0b3da8db5806d9ad8a9606c5ad5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::get_M</definition>
        <argsstring>() const </argsstring>
        <name>get_M</name>
        <briefdescription>
<para>access function for number of observations M </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="977" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="977" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aa3cd2f4604388004f03e66dbe3838a63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_q</definition>
        <argsstring>(T_STATES offset, float64_t value)</argsstring>
        <name>set_q</name>
        <param>
          <type>T_STATES</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for probability of end states <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>index 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="984" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="983" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ad4fc527e99c77bcb681fe5a5a7f257bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_p</definition>
        <argsstring>(T_STATES offset, float64_t value)</argsstring>
        <name>set_p</name>
        <param>
          <type>T_STATES</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for probability of first state <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>index 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="997" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="996" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a87a671beb5e1c173504856ce3716356d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_A</definition>
        <argsstring>(T_STATES line_, T_STATES column, float64_t value)</argsstring>
        <name>set_A</name>
        <param>
          <type>T_STATES</type>
          <declname>line_</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>column</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for matrix A <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_</parametername>
</parameternamelist>
<parameterdescription>
<para>row in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>column in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1011" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1010" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1acd48e0068cd2a5e3cf86c8c81a6ca380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_a</definition>
        <argsstring>(T_STATES line_, T_STATES column, float64_t value)</argsstring>
        <name>set_a</name>
        <param>
          <type>T_STATES</type>
          <declname>line_</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>column</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for matrix a <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_</parametername>
</parameternamelist>
<parameterdescription>
<para>row in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>column in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1025" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1024" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a1f097a4fa8c187adb9c14051b60c6740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_B</definition>
        <argsstring>(T_STATES line_, uint16_t column, float64_t value)</argsstring>
        <name>set_B</name>
        <param>
          <type>T_STATES</type>
          <declname>line_</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for matrix B <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_</parametername>
</parameternamelist>
<parameterdescription>
<para>row in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>column in matrix 0...M-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1039" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1038" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a8338d2d3c7900075b72329011d2caa3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_b</definition>
        <argsstring>(T_STATES line_, uint16_t column, float64_t value)</argsstring>
        <name>set_b</name>
        <param>
          <type>T_STATES</type>
          <declname>line_</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for matrix b <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_</parametername>
</parameternamelist>
<parameterdescription>
<para>row in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>column in matrix 0...M-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1053" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1052" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a0eff29e4d6aafda57b58740be9591561" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::set_psi</definition>
        <argsstring>(int32_t time, T_STATES state, T_STATES value, int32_t dimension)</argsstring>
        <name>set_psi</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>state</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for backtracking table psi <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>time 0...T-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>state 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of observations 0...DIMENSION-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1069" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1067" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1af63a73a4ae8d14fb36e42bee04012292" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::get_q</definition>
        <argsstring>(T_STATES offset) const </argsstring>
        <name>get_q</name>
        <param>
          <type>T_STATES</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for probability of end states <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>index 0...N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value at offset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1082" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1081" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a360ada3ce579bb420f6ad56a1e3ca1e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::get_p</definition>
        <argsstring>(T_STATES offset) const </argsstring>
        <name>get_p</name>
        <param>
          <type>T_STATES</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for probability of initial states <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>index 0...N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value at offset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1095" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1094" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aec1bfb2d31ae9b25b158e7204a63e825" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::get_A</definition>
        <argsstring>(T_STATES line_, T_STATES column) const </argsstring>
        <name>get_A</name>
        <param>
          <type>T_STATES</type>
          <declname>line_</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for matrix A <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_</parametername>
</parameternamelist>
<parameterdescription>
<para>row in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>column in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value at position line colum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1109" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1108" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a8d119ed2db471eea08e9ed33b9b5faff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::get_a</definition>
        <argsstring>(T_STATES line_, T_STATES column) const </argsstring>
        <name>get_a</name>
        <param>
          <type>T_STATES</type>
          <declname>line_</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for matrix a <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_</parametername>
</parameternamelist>
<parameterdescription>
<para>row in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>column in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value at position line colum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1123" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1122" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aee19c770a44a4fe3f90efc9029b0b8da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::get_B</definition>
        <argsstring>(T_STATES line_, uint16_t column) const </argsstring>
        <name>get_B</name>
        <param>
          <type>T_STATES</type>
          <declname>line_</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for matrix B <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_</parametername>
</parameternamelist>
<parameterdescription>
<para>row in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>column in matrix 0...M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value at position line colum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1137" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1136" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1acdac1c2087f2a341add42a193c1b8204" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::get_b</definition>
        <argsstring>(T_STATES line_, uint16_t column) const </argsstring>
        <name>get_b</name>
        <param>
          <type>T_STATES</type>
          <declname>line_</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for matrix b <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_</parametername>
</parameternamelist>
<parameterdescription>
<para>row in matrix 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>column in matrix 0...M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value at position line colum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1151" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1150" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a25b875e7bea82791203d2056fffc83d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T_STATES</type>
        <definition>T_STATES shogun::CHMM::get_psi</definition>
        <argsstring>(int32_t time, T_STATES state, int32_t dimension) const </argsstring>
        <name>get_psi</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access function for backtracking table psi <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>time 0...T-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>state 0...N-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of observations 0...DIMENSION-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>state at specified time and position </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1168" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1166" bodyend="1174"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>functions for observations</header>
      <description><para><anchor id="_1amgrp208ac7748ecd2b1b08e103ecc22c3503"/> management and access functions for observation matrix </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ac8db822f39dcf0afc7d64647f973c2e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::state_probability</definition>
        <argsstring>(int32_t time, int32_t state, int32_t dimension)</argsstring>
        <name>state_probability</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>calculates probability of being in state i at time t for dimension </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1363" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1361" bodyend="1365"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1aface39607cb1f106efef5b6a7e1da3fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::transition_probability</definition>
        <argsstring>(int32_t time, int32_t state_i, int32_t state_j, int32_t dimension)</argsstring>
        <name>transition_probability</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state_i</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state_j</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>calculates probability of being in state i at time t and state j at time t+1 for dimension </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1370" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1368" bodyend="1374"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>derivatives of model probabilities.</header>
      <description><para><anchor id="_1amgrp50f288a7e2c316a0f5ec143181f29a58"/> computes log dp(lambda)/d lambda_i <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension for that derivatives are calculated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter specific </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ad1f94bfab333f1ac55563c1159d44acd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::linear_model_derivative</definition>
        <argsstring>(T_STATES i, uint16_t j, int32_t dimension)</argsstring>
        <name>linear_model_derivative</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes log dp(lambda)/d b_ij for linear model </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1387" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1385" bodyend="1397"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ac33d4a1899c253220e18d646842d0dc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::model_derivative_p</definition>
        <argsstring>(T_STATES i, int32_t dimension)</argsstring>
        <name>model_derivative_p</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes log dp(lambda)/d p_i. backward path downto time 0 multiplied by observing first symbol in path at state i </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1403" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1402" bodyend="1405"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a65b7340250f798875f00f22e651bc39b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::model_derivative_q</definition>
        <argsstring>(T_STATES i, int32_t dimension)</argsstring>
        <name>model_derivative_q</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes log dp(lambda)/d q_i. forward path upto time T-1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1411" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1410" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a98a73e4a9237e5942972c384f19e5f38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::model_derivative_a</definition>
        <argsstring>(T_STATES i, T_STATES j, int32_t dimension)</argsstring>
        <name>model_derivative_a</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>computes log dp(lambda)/d a_ij. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1417" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1416" bodyend="1423"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a75d731bbf8273f2db155a54b7a9bc601" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::model_derivative_b</definition>
        <argsstring>(T_STATES i, uint16_t j, int32_t dimension)</argsstring>
        <name>model_derivative_b</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>computes log dp(lambda)/d b_ij. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1428" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1427" bodyend="1438"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>derivatives of path probabilities.</header>
      <description><para><anchor id="_1amgrp84c55c104aa83cf048ed08e790a9b157"/> computes d log p(lambda,best_path)/d lambda_i <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension for that derivatives are calculated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter specific </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ade6b893f9f0f6fedf26ef032c795987e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::path_derivative_p</definition>
        <argsstring>(T_STATES i, int32_t dimension)</argsstring>
        <name>path_derivative_p</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>computes d log p(lambda,best_path)/d p_i </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1450" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1449" bodyend="1453"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a6118a850b10f25de7857f89f38458736" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::path_derivative_q</definition>
        <argsstring>(T_STATES i, int32_t dimension)</argsstring>
        <name>path_derivative_q</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>computes d log p(lambda,best_path)/d q_i </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1457" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1456" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ae90259a94d6368b574f0cf67823a0ed6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::path_derivative_a</definition>
        <argsstring>(T_STATES i, T_STATES j, int32_t dimension)</argsstring>
        <name>path_derivative_a</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>T_STATES</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>computes d log p(lambda,best_path)/d a_ij </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1464" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1463" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a480d7a184d95b738df4595a6a9b99e5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::path_derivative_b</definition>
        <argsstring>(T_STATES i, uint16_t j, int32_t dimension)</argsstring>
        <name>path_derivative_b</name>
        <param>
          <type>T_STATES</type>
          <declname>i</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>computes d log p(lambda,best_path)/d b_ij </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1471" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1470" bodyend="1474"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>input helper functions.</header>
      <description><para><anchor id="_1amgrpb9072f7482539c282bdf0e8b747008a8"/> for reading model/definition/observation files </para></description>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a5be2158d63052590ec55ee4c20830468" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::get_numbuffer</definition>
        <argsstring>(FILE *file, char *buffer, int32_t length)</argsstring>
        <name>get_numbuffer</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>put a sequence of numbers into the buffer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1485"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a63c763cd888b96c066435cd51e476f23" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::open_bracket</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>open_bracket</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>expect open bracket. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1488"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a2e7365c8da964e9d8a7e391ab1afff0f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::close_bracket</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>close_bracket</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>expect closing bracket </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1491"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a89ce736d06f59c5be330116981fc127d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::comma_or_space</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>comma_or_space</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>expect comma or space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1494"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a7873d76386418bb406e284b200b890c4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::error</definition>
        <argsstring>(int32_t p_line, const char *str)</argsstring>
        <name>error</name>
        <param>
          <type>int32_t</type>
          <declname>p_line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>parse error messages </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1498" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1497" bodyend="1503"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a237196e199554c239a99a30519d5efd6" prot="private" static="no" mutable="no">
        <type>T_STATES</type>
        <definition>T_STATES shogun::CHMM::trans_list_len</definition>
        <argsstring></argsstring>
        <name>trans_list_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="369" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a0386ef03d408e5ec90abbe007ae8612c" prot="private" static="no" mutable="no">
        <type>T_STATES **</type>
        <definition>T_STATES** shogun::CHMM::trans_list_forward</definition>
        <argsstring></argsstring>
        <name>trans_list_forward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="370" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1af5f840b0062380b274b0105f0503e33a" prot="private" static="no" mutable="no">
        <type>T_STATES *</type>
        <definition>T_STATES* shogun::CHMM::trans_list_forward_cnt</definition>
        <argsstring></argsstring>
        <name>trans_list_forward_cnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="371" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a8b805c54829c50eb6be002df83b790fa" prot="private" static="no" mutable="no">
        <type>float64_t **</type>
        <definition>float64_t** shogun::CHMM::trans_list_forward_val</definition>
        <argsstring></argsstring>
        <name>trans_list_forward_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="372" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a0ea6fab78bea6306766577e4e71f554e" prot="private" static="no" mutable="no">
        <type>T_STATES **</type>
        <definition>T_STATES** shogun::CHMM::trans_list_backward</definition>
        <argsstring></argsstring>
        <name>trans_list_backward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="373" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a37ef1770d62dcb39d67164f6655552c1" prot="private" static="no" mutable="no">
        <type>T_STATES *</type>
        <definition>T_STATES* shogun::CHMM::trans_list_backward_cnt</definition>
        <argsstring></argsstring>
        <name>trans_list_backward_cnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="374" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a47d0d68a570c903c4c7339bd372dd92b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CHMM::mem_initialized</definition>
        <argsstring></argsstring>
        <name>mem_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="375" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a600b1735c1c173da3f77b70edb9d0846" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::arrayN1</definition>
        <argsstring></argsstring>
        <name>arrayN1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>array of size N for temporary calculations </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1267" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1aea9f898547f594958366ca5f7b244866" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::arrayN2</definition>
        <argsstring></argsstring>
        <name>arrayN2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>array of size N for temporary calculations </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1269" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ad57438d572ccf3f57f2d84e0a6b3e5f3" prot="protected" static="no" mutable="no">
        <type><ref refid="structshogun_1_1T__ALPHA__BETA" kindref="compound">T_ALPHA_BETA</ref></type>
        <definition>T_ALPHA_BETA shogun::CHMM::alpha_cache</definition>
        <argsstring></argsstring>
        <name>alpha_cache</name>
        <briefdescription>
<para>cache for forward variables can be terrible HUGE O(T*N) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1303" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a066f020a6e24c576245c4279d6154143" prot="protected" static="no" mutable="no">
        <type><ref refid="structshogun_1_1T__ALPHA__BETA" kindref="compound">T_ALPHA_BETA</ref></type>
        <definition>T_ALPHA_BETA shogun::CHMM::beta_cache</definition>
        <argsstring></argsstring>
        <name>beta_cache</name>
        <briefdescription>
<para>cache for backward variables can be terrible HUGE O(T*N) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1305" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1af95719b697fce6cea29f7d453fc1c4b4" prot="protected" static="no" mutable="no">
        <type>T_STATES *</type>
        <definition>T_STATES* shogun::CHMM::states_per_observation_psi</definition>
        <argsstring></argsstring>
        <name>states_per_observation_psi</name>
        <briefdescription>
<para>backtracking table for viterbi can be terrible HUGE O(T*N) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1308" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1afb543505941efd4033734a96d3e15ce9" prot="protected" static="no" mutable="no">
        <type>T_STATES *</type>
        <definition>T_STATES* shogun::CHMM::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
<para>best path (=state sequence) through model </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1311" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1aa66382f1f58d6c6c929e5293f7351b38" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CHMM::path_prob_updated</definition>
        <argsstring></argsstring>
        <name>path_prob_updated</name>
        <briefdescription>
<para>true if path probability is up to date </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1314" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ae40bb6de89127a4373cb5c1a25dea215" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CHMM::path_prob_dimension</definition>
        <argsstring></argsstring>
        <name>path_prob_dimension</name>
        <briefdescription>
<para>dimension for which path_prob was calculated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1317" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1317" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classshogun_1_1CHMM_1aece5100d162f22b368569dc7119e87d7" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTN</definition>
        <argsstring></argsstring>
        <name>GOTN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTN </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1323" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1af0ed040447f3c281878bdbdd8c2486d5" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTM</definition>
        <argsstring></argsstring>
        <name>GOTM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTM </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1325" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1aaaa9d00c52d7a669256ab59b2f1dbbde" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTO</definition>
        <argsstring></argsstring>
        <name>GOTO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTO </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1327" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a51d62b9199ed300b9c6930d39ab5c2eb" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTa</definition>
        <argsstring></argsstring>
        <name>GOTa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTa </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1329" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a66e3c8bae92a26f75cf71a873f95cd44" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTb</definition>
        <argsstring></argsstring>
        <name>GOTb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTb </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1331" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ae1111eeeca732daef46fe95829765f93" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTp</definition>
        <argsstring></argsstring>
        <name>GOTp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1333" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a73fa2782dc379167ce73c1edbaa57ba7" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTq</definition>
        <argsstring></argsstring>
        <name>GOTq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTq </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1335" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a441bf5b507410bec0ca4c342ba3d08fc" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTlearn_a</definition>
        <argsstring></argsstring>
        <name>GOTlearn_a</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTlearn_a </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1338" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a50af13a94211bc359049b9fe98a36817" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTlearn_b</definition>
        <argsstring></argsstring>
        <name>GOTlearn_b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTlearn_b </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1340" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1abeada763f1475670dc691e3c7876ac81" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTlearn_p</definition>
        <argsstring></argsstring>
        <name>GOTlearn_p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTlearn_p </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1342" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1aeacbaa25b063003b991216e86d131838" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTlearn_q</definition>
        <argsstring></argsstring>
        <name>GOTlearn_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTlearn_q </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1344" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1af71e66c0fd187259eb8afa05db9192d7" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTconst_a</definition>
        <argsstring></argsstring>
        <name>GOTconst_a</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTconst_a </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1346" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1a4677e06f708a017b7760063b337f1379" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTconst_b</definition>
        <argsstring></argsstring>
        <name>GOTconst_b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTconst_b </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1348" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ab0b1efd54ef7d0cf33c258f79572ccb7" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTconst_p</definition>
        <argsstring></argsstring>
        <name>GOTconst_p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTconst_p </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1350" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CHMM_1ab2d45d29e0f091771a2ca16a2f72b7dd" prot="protected" static="yes" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t shogun::CHMM::GOTconst_q</definition>
        <argsstring></argsstring>
        <name>GOTconst_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GOTconst_q </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1352" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1352" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classshogun_1_1CHMM_1a57d3db7faf04c785ab1f74335eefafc7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structshogun_1_1T__ALPHA__BETA" kindref="compound">T_ALPHA_BETA</ref> &amp;</type>
        <definition>T_ALPHA_BETA&amp; shogun::CHMM::ALPHA_CACHE</definition>
        <argsstring>(int32_t)</argsstring>
        <name>ALPHA_CACHE</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="425" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="425" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a41b47c943b0ac00f13e350d8b2393a3d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structshogun_1_1T__ALPHA__BETA" kindref="compound">T_ALPHA_BETA</ref> &amp;</type>
        <definition>T_ALPHA_BETA&amp; shogun::CHMM::BETA_CACHE</definition>
        <argsstring>(int32_t)</argsstring>
        <name>BETA_CACHE</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="427" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="427" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1adb4e6a2358b09dbfcfae1115248777ad" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::ARRAYN1</definition>
        <argsstring>(int32_t)</argsstring>
        <name>ARRAYN1</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="433" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="433" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a1d0ee5a6f826a24261096196f09f97d8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CHMM::ARRAYN2</definition>
        <argsstring>(int32_t)</argsstring>
        <name>ARRAYN2</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="435" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="435" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a563f6ced3c7d52e4a03f5fbbcc9f3e9e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T_STATES *</type>
        <definition>T_STATES* shogun::CHMM::STATES_PER_OBSERVATION_PSI</definition>
        <argsstring>(int32_t)</argsstring>
        <name>STATES_PER_OBSERVATION_PSI</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="437" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="437" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a7f2f0a3246a5d158ae14dd17aa22b9e3" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T_STATES *</type>
        <definition>const T_STATES* shogun::CHMM::STATES_PER_OBSERVATION_PSI</definition>
        <argsstring>(int32_t) const </argsstring>
        <name>STATES_PER_OBSERVATION_PSI</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="439" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="439" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1af6beaa083df5c47f1645d9c4fee211ef" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T_STATES *</type>
        <definition>T_STATES* shogun::CHMM::PATH</definition>
        <argsstring>(int32_t)</argsstring>
        <name>PATH</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="441" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="441" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a50715940a773ba4cf0aadd9a91c30456" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; shogun::CHMM::PATH_PROB_UPDATED</definition>
        <argsstring>(int32_t)</argsstring>
        <name>PATH_PROB_UPDATED</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="443" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="443" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a8896a5353827834e1c65c9bec3f5bd4d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t &amp;</type>
        <definition>int32_t&amp; shogun::CHMM::PATH_PROB_DIMENSION</definition>
        <argsstring>(int32_t)</argsstring>
        <name>PATH_PROB_DIMENSION</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="445" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="445" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a62782313c245f0cf365ba8b2467bda94" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::converged</definition>
        <argsstring>(float64_t x, float64_t y)</argsstring>
        <name>converged</name>
        <param>
          <type>float64_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determines if algorithm has converged <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value to check against y </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>value to check against x </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="453"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshogun_1_1CHMM_1a87044d65fc1e603d3e4da0d7aa477014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::alloc_state_dependend_arrays</definition>
        <argsstring>()</argsstring>
        <name>alloc_state_dependend_arrays</name>
        <briefdescription>
<para>allocates memory that depends on N </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="520"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ac968dac2a92c0903ec3ac59d3557bd1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::free_state_dependend_arrays</definition>
        <argsstring>()</argsstring>
        <name>free_state_dependend_arrays</name>
        <briefdescription>
<para>free memory that depends on N </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="523"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ad6b233417301e1697cb894eca9feefc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::linear_train</definition>
        <argsstring>(bool right_align=false)</argsstring>
        <name>linear_train</name>
        <param>
          <type>bool</type>
          <declname>right_align</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>estimates linear model from observations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="663"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ac0fefe3cc28977ec76506fbae5733d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CHMM::permutation_entropy</definition>
        <argsstring>(int32_t window_width, int32_t sequence_number)</argsstring>
        <name>permutation_entropy</name>
        <param>
          <type>int32_t</type>
          <declname>window_width</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>sequence_number</declname>
        </param>
        <briefdescription>
<para>compute permutation entropy </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="666"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ad1fd22e9e0b265f33b52bd032b4d68f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* shogun::CHMM::get_name</definition>
        <argsstring>() const </argsstring>
        <name>get_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>object name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1179" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1179" bodyend="1179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classshogun_1_1CHMM_1aa35dc714909f45ba08ec1e54bf7d84ba" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CHMM::prepare_path_derivative</definition>
        <argsstring>(int32_t dim)</argsstring>
        <name>prepare_path_derivative</name>
        <param>
          <type>int32_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>initialization function that is called before path_derivatives are calculated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1508" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1507" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1a8eb958da0d2fc875bcad7473e39995c2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::forward</definition>
        <argsstring>(int32_t time, int32_t state, int32_t dimension)</argsstring>
        <name>forward</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>inline proxies for forward pass </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1536" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1535" bodyend="1549"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CHMM_1ad39319e615ce4d65bb0af1b905c9d60f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CHMM::backward</definition>
        <argsstring>(int32_t time, int32_t state, int32_t dimension)</argsstring>
        <name>backward</name>
        <param>
          <type>int32_t</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>inline proxies for backward pass </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="1553" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="1552" bodyend="1565"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hidden Markov Model. </para>    </briefdescription>
    <detaileddescription>
<para>Structure and Function collection. This Class implements a Hidden Markov Model. For a tutorial on HMMs see Rabiner et.al A Tutorial on Hidden Markov Models and Selected Applications in Speech Recognition, 1989</para><para>Several functions for tasks such as training,reading/writing models, reading observations, calculation of derivatives are supplied. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="14">
        <label>shogun::CHMM</label>
        <link refid="classshogun_1_1CHMM"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>shogun::CDistribution</label>
        <link refid="classshogun_1_1CDistribution"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="16">
        <label>shogun::CHMM</label>
        <link refid="classshogun_1_1CHMM"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>alpha_cache</edgelabel>
          <edgelabel>beta_cache</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>model</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>shogun::CModel</label>
        <link refid="classshogun_1_1CModel"/>
      </node>
      <node id="17">
        <label>shogun::CDistribution</label>
        <link refid="classshogun_1_1CDistribution"/>
      </node>
      <node id="18">
        <label>shogun::T_ALPHA_BETA</label>
        <link refid="structshogun_1_1T__ALPHA__BETA"/>
      </node>
    </collaborationgraph>
    <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" line="366" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/distributions/HMM.h" bodystart="365" bodyend="1567"/>
    <listofallmembers>
      <member refid="classshogun_1_1CHMM_1ae5bc79da6d2204880c02b5d40a89048b" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>add_states</name></member>
      <member refid="classshogun_1_1CHMM_1a40cacc736c0e4b978760693decd3b2d5" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>all_pat_prob</name></member>
      <member refid="classshogun_1_1CHMM_1ab9b359a18731134dfcb58d5c1d74ff46" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>all_path_prob_updated</name></member>
      <member refid="classshogun_1_1CHMM_1a87044d65fc1e603d3e4da0d7aa477014" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>alloc_state_dependend_arrays</name></member>
      <member refid="classshogun_1_1CHMM_1ad57438d572ccf3f57f2d84e0a6b3e5f3" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>alpha_cache</name></member>
      <member refid="classshogun_1_1CHMM_1a57d3db7faf04c785ab1f74335eefafc7" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>ALPHA_CACHE</name></member>
      <member refid="classshogun_1_1CHMM_1a0fc0537445e5c65120c3b1a7e0809a3f" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>append_model</name></member>
      <member refid="classshogun_1_1CHMM_1aa883fac2990da37063a890b415b6a18c" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>append_model</name></member>
      <member refid="classshogun_1_1CHMM_1a600b1735c1c173da3f77b70edb9d0846" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>arrayN1</name></member>
      <member refid="classshogun_1_1CHMM_1adb4e6a2358b09dbfcfae1115248777ad" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>ARRAYN1</name></member>
      <member refid="classshogun_1_1CHMM_1aea9f898547f594958366ca5f7b244866" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>arrayN2</name></member>
      <member refid="classshogun_1_1CHMM_1a1d0ee5a6f826a24261096196f09f97d8" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>ARRAYN2</name></member>
      <member refid="classshogun_1_1CHMM_1ad39319e615ce4d65bb0af1b905c9d60f" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>backward</name></member>
      <member refid="classshogun_1_1CHMM_1acd89279e3157190569768e640707d9a7" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>backward_comp</name></member>
      <member refid="classshogun_1_1CHMM_1ae194448fa81077be3869a54e53898085" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>backward_comp_old</name></member>
      <member refid="classshogun_1_1CHMM_1aeef21fb3ec307d8401f06069ed1a9a4a" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>baum_welch_viterbi_train</name></member>
      <member refid="classshogun_1_1CHMM_1aa1d876bb99b1d5917d67eb8f281a01d9" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>best_path</name></member>
      <member refid="classshogun_1_1CHMM_1a066f020a6e24c576245c4279d6154143" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>beta_cache</name></member>
      <member refid="classshogun_1_1CHMM_1a41b47c943b0ac00f13e350d8b2393a3d" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>BETA_CACHE</name></member>
      <member refid="classshogun_1_1CDistribution_1a6e20cc37e338851fab4ab27790dbf2f5" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>CDistribution</name></member>
      <member refid="classshogun_1_1CHMM_1a23de31a869df80ac46a9e0651749deca" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>check_model_derivatives</name></member>
      <member refid="classshogun_1_1CHMM_1a999215daff56782bf96993e908024425" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>check_model_derivatives_combined</name></member>
      <member refid="classshogun_1_1CHMM_1ab0063b20407ffb82a6eef50816bec0c3" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>CHMM</name></member>
      <member refid="classshogun_1_1CHMM_1a960df96e92b6a619ea9bd7f23a13264d" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>CHMM</name></member>
      <member refid="classshogun_1_1CHMM_1a1a96eeeae99511f2a734dde51c8de890" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>CHMM</name></member>
      <member refid="classshogun_1_1CHMM_1a0ababb31ddffcc078ed555ba1a0cc5f1" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>CHMM</name></member>
      <member refid="classshogun_1_1CHMM_1a11d8969316b90e6471a7b8ad42c02b32" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>CHMM</name></member>
      <member refid="classshogun_1_1CHMM_1ab03d42392fedd52c31b21d0c55d9f928" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>CHMM</name></member>
      <member refid="classshogun_1_1CHMM_1a10ff3d81fd376f584b3d9704ef1e67f5" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>chop</name></member>
      <member refid="classshogun_1_1CHMM_1a9727058d7a7460250665ea9c15173e57" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>clear_model</name></member>
      <member refid="classshogun_1_1CHMM_1a31be606ff813d82f9789647e9bc2883a" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>clear_model_defined</name></member>
      <member refid="classshogun_1_1CHMM_1a2e7365c8da964e9d8a7e391ab1afff0f" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>close_bracket</name></member>
      <member refid="classshogun_1_1CHMM_1a89ce736d06f59c5be330116981fc127d" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>comma_or_space</name></member>
      <member refid="classshogun_1_1CHMM_1ac6b9c4bcec8f1d24ece26e41b06696d7" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>conv_it</name></member>
      <member refid="classshogun_1_1CHMM_1a62782313c245f0cf365ba8b2467bda94" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>converged</name></member>
      <member refid="classshogun_1_1CHMM_1aead25ee96a04770e815ffadc1664f964" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>convert_to_log</name></member>
      <member refid="classshogun_1_1CHMM_1a10cb44a07aa77a2b2e6ddea753503c9e" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>copy_model</name></member>
      <member refid="classshogun_1_1CHMM_1a59e78eb474071af3096c45fd3d04050e" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>end_state_distribution_q</name></member>
      <member refid="classshogun_1_1CHMM_1a1a9690b7f51482396aa6cf0f046e100b" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>epsilon</name></member>
      <member refid="classshogun_1_1CHMM_1a7873d76386418bb406e284b200b890c4" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>error</name></member>
      <member refid="classshogun_1_1CHMM_1a8ded52ff69e256b072126cada62416d5" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>estimate_model_baum_welch</name></member>
      <member refid="classshogun_1_1CHMM_1a21588de76304d3b4149f78014a9a108c" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>estimate_model_baum_welch_defined</name></member>
      <member refid="classshogun_1_1CHMM_1ad8998593a88e5b986d02ad8f99797b6c" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>estimate_model_baum_welch_old</name></member>
      <member refid="classshogun_1_1CHMM_1a6d7c8173915e0af713bcdb7662be9cbc" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>estimate_model_baum_welch_trans</name></member>
      <member refid="classshogun_1_1CHMM_1a4b7b792fe38109132cf971e67710735e" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>estimate_model_viterbi</name></member>
      <member refid="classshogun_1_1CHMM_1a83f5cd52f68ea4eaaf3a4901ee4129ed" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>estimate_model_viterbi_defined</name></member>
      <member refid="classshogun_1_1CDistribution_1aa16fadbf5702b9afb2be003b040a4d03" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>features</name></member>
      <member refid="classshogun_1_1CHMM_1a8eb958da0d2fc875bcad7473e39995c2" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>forward</name></member>
      <member refid="classshogun_1_1CHMM_1a468af07aea54b92b3b838b89599cd331" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>forward_comp</name></member>
      <member refid="classshogun_1_1CHMM_1aaf62d21041f9edaea00d22ae628d95fb" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>forward_comp_old</name></member>
      <member refid="classshogun_1_1CHMM_1ac968dac2a92c0903ec3ac59d3557bd1a" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>free_state_dependend_arrays</name></member>
      <member refid="classshogun_1_1CHMM_1aec1bfb2d31ae9b25b158e7204a63e825" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_A</name></member>
      <member refid="classshogun_1_1CHMM_1a8d119ed2db471eea08e9ed33b9b5faff" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_a</name></member>
      <member refid="classshogun_1_1CHMM_1aee19c770a44a4fe3f90efc9029b0b8da" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_B</name></member>
      <member refid="classshogun_1_1CHMM_1acdac1c2087f2a341add42a193c1b8204" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_b</name></member>
      <member refid="classshogun_1_1CHMM_1a21cec8efd96d8d5aea75bacc397c8b3d" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_best_path_state</name></member>
      <member refid="classshogun_1_1CDistribution_1abc111da5e0301c31bce0358c2422812a" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_derivative</name></member>
      <member refid="classshogun_1_1CHMM_1ac45b393d8f7b2d351b705f320f3c72d7" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_epsilon</name></member>
      <member refid="classshogun_1_1CDistribution_1a86fdfaf1ff09ee2b74aa75ce5b5faeab" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_features</name></member>
      <member refid="classshogun_1_1CHMM_1a63a12154c7fbae58a90da0c8efb321f1" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_iterations</name></member>
      <member refid="classshogun_1_1CDistribution_1ae473ea3939f5fe4143ba702cc66cf6ae" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_likelihood_example</name></member>
      <member refid="classshogun_1_1CHMM_1af0e76300817bfe977c71df286d1fc79b" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_log_derivative</name></member>
      <member refid="classshogun_1_1CDistribution_1af4853a6dfc897960a9a8ad0840cb9454" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_log_likelihood</name></member>
      <member refid="classshogun_1_1CHMM_1af463388dbbb4d64d10b4133f0da4826a" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_log_likelihood_example</name></member>
      <member refid="classshogun_1_1CDistribution_1a36cfa0a92291fafb06104ab26d18f6d5" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_log_likelihood_sample</name></member>
      <member refid="classshogun_1_1CHMM_1aaa395269dffeed67e08248ba89cd4653" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_log_model_parameter</name></member>
      <member refid="classshogun_1_1CHMM_1aeb6e0b3da8db5806d9ad8a9606c5ad5e" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_M</name></member>
      <member refid="classshogun_1_1CDistribution_1acd1de9ba85de99b69b6b5bb65d89560f" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_model_parameter</name></member>
      <member refid="classshogun_1_1CHMM_1a0999ad2230614c19850a0eb2b347852a" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_N</name></member>
      <member refid="classshogun_1_1CHMM_1ad1fd22e9e0b265f33b52bd032b4d68f3" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_name</name></member>
      <member refid="classshogun_1_1CHMM_1a5f24536584a97f8ac6a4af1d2b5a4d8e" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_num_model_parameters</name></member>
      <member refid="classshogun_1_1CDistribution_1ab7b1cd7fb4857be73cff243a4ff089d2" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_num_relevant_model_parameters</name></member>
      <member refid="classshogun_1_1CHMM_1a5be2158d63052590ec55ee4c20830468" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_numbuffer</name></member>
      <member refid="classshogun_1_1CHMM_1a5ebf7058caad7d1f34fd4aa7662a4ea1" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_observations</name></member>
      <member refid="classshogun_1_1CHMM_1a360ada3ce579bb420f6ad56a1e3ca1e5" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_p</name></member>
      <member refid="classshogun_1_1CHMM_1ab04fb90965696e7a74a65b6e19f10f08" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_path</name></member>
      <member refid="classshogun_1_1CHMM_1ab5b82f03467718873238dd5877cc350c" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_pseudo</name></member>
      <member refid="classshogun_1_1CDistribution_1a1e850dcb3692d4f507039dd86368dce6" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>get_pseudo_count</name></member>
      <member refid="classshogun_1_1CHMM_1a25b875e7bea82791203d2056fffc83d8" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_psi</name></member>
      <member refid="classshogun_1_1CHMM_1af63a73a4ae8d14fb36e42bee04012292" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_q</name></member>
      <member refid="classshogun_1_1CHMM_1a304cd08aae4d0fee4617f0b73e85651d" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>get_status</name></member>
      <member refid="classshogun_1_1CHMM_1a51d62b9199ed300b9c6930d39ab5c2eb" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTa</name></member>
      <member refid="classshogun_1_1CHMM_1a66e3c8bae92a26f75cf71a873f95cd44" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTb</name></member>
      <member refid="classshogun_1_1CHMM_1af71e66c0fd187259eb8afa05db9192d7" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTconst_a</name></member>
      <member refid="classshogun_1_1CHMM_1a4677e06f708a017b7760063b337f1379" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTconst_b</name></member>
      <member refid="classshogun_1_1CHMM_1ab0b1efd54ef7d0cf33c258f79572ccb7" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTconst_p</name></member>
      <member refid="classshogun_1_1CHMM_1ab2d45d29e0f091771a2ca16a2f72b7dd" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTconst_q</name></member>
      <member refid="classshogun_1_1CHMM_1a441bf5b507410bec0ca4c342ba3d08fc" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTlearn_a</name></member>
      <member refid="classshogun_1_1CHMM_1a50af13a94211bc359049b9fe98a36817" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTlearn_b</name></member>
      <member refid="classshogun_1_1CHMM_1abeada763f1475670dc691e3c7876ac81" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTlearn_p</name></member>
      <member refid="classshogun_1_1CHMM_1aeacbaa25b063003b991216e86d131838" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTlearn_q</name></member>
      <member refid="classshogun_1_1CHMM_1af0ed040447f3c281878bdbdd8c2486d5" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTM</name></member>
      <member refid="classshogun_1_1CHMM_1aece5100d162f22b368569dc7119e87d7" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTN</name></member>
      <member refid="classshogun_1_1CHMM_1aaaa9d00c52d7a669256ab59b2f1dbbde" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTO</name></member>
      <member refid="classshogun_1_1CHMM_1ae1111eeeca732daef46fe95829765f93" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTp</name></member>
      <member refid="classshogun_1_1CHMM_1a73fa2782dc379167ce73c1edbaa57ba7" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>GOTq</name></member>
      <member refid="classshogun_1_1CHMM_1aaa007e2f5a137abd1dab82b1e4a7f33f" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>init_model_defined</name></member>
      <member refid="classshogun_1_1CHMM_1a4af248fdf2ed5c0c93e0efba2574448c" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>init_model_random</name></member>
      <member refid="classshogun_1_1CHMM_1a2f7f0559a4869be8ec3a2d45bd9a9126" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>initial_state_distribution_p</name></member>
      <member refid="classshogun_1_1CHMM_1aaab5fbe124baf9d677480422aa76421a" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>initialize</name></member>
      <member refid="classshogun_1_1CHMM_1af730091047c1df1311b58a3b733c4bef" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>invalidate_model</name></member>
      <member refid="classshogun_1_1CHMM_1afb5453f56b7745f559ec520b48c1c5f8" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>iteration_count</name></member>
      <member refid="classshogun_1_1CHMM_1a141533c5e0c2f13f503f35198bcb7e2a" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>iterations</name></member>
      <member refid="classshogun_1_1CHMM_1afe2231061598330afaf6a287805e32ec" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>line</name></member>
      <member refid="classshogun_1_1CHMM_1ad1f94bfab333f1ac55563c1159d44acd" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>linear_model_derivative</name></member>
      <member refid="classshogun_1_1CHMM_1ad455104aac0d5476bd1dc508bc969ff5" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>linear_model_probability</name></member>
      <member refid="classshogun_1_1CHMM_1ad6b233417301e1697cb894eca9feefc7" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>linear_train</name></member>
      <member refid="classshogun_1_1CHMM_1a1a592acb1acd59b117818b7e555ad300" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>load_definitions</name></member>
      <member refid="classshogun_1_1CHMM_1abcc8f4d70f358b719ee78860572010b8" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>load_model</name></member>
      <member refid="classshogun_1_1CHMM_1a04ee88ece57f80b897323233955e8bb3" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>loglikelihood</name></member>
      <member refid="classshogun_1_1CHMM_1ae86544e4a94912c1b2a7855275b63fa9" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>M</name></member>
      <member refid="classshogun_1_1CHMM_1a47d0d68a570c903c4c7339bd372dd92b" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>mem_initialized</name></member>
      <member refid="classshogun_1_1CHMM_1a45c0ae569712ef94206a263ec78e9283" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>mod_prob</name></member>
      <member refid="classshogun_1_1CHMM_1a1c19f0370d0b71f7965b35e3fe9ae0dd" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>mod_prob_updated</name></member>
      <member refid="classshogun_1_1CHMM_1a8cfefef6d409bd6799d6467627d0c695" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>model</name></member>
      <member refid="classshogun_1_1CHMM_1a98a73e4a9237e5942972c384f19e5f38" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>model_derivative_a</name></member>
      <member refid="classshogun_1_1CHMM_1a75d731bbf8273f2db155a54b7a9bc601" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>model_derivative_b</name></member>
      <member refid="classshogun_1_1CHMM_1ac33d4a1899c253220e18d646842d0dc2" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>model_derivative_p</name></member>
      <member refid="classshogun_1_1CHMM_1a65b7340250f798875f00f22e651bc39b" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>model_derivative_q</name></member>
      <member refid="classshogun_1_1CHMM_1a009769e5bfb7f71b3d1a63ba0a5fda39" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>model_probability</name></member>
      <member refid="classshogun_1_1CHMM_1a6d61fc98eef983a463aa06b3e80d0770" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>model_probability_comp</name></member>
      <member refid="classshogun_1_1CHMM_1a5f189fdf991ad258753f9194baced69c" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>N</name></member>
      <member refid="classshogun_1_1CHMM_1a39e37c9d17c17201e3f73a712a2dd51d" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>normalize</name></member>
      <member refid="classshogun_1_1CHMM_1a774f9275d018be9d3a3ea564af6c4a1a" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>observation_matrix_b</name></member>
      <member refid="classshogun_1_1CHMM_1a71194f89c5ff5965a04a0fecb0938581" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>observation_matrix_B</name></member>
      <member refid="classshogun_1_1CHMM_1a63c763cd888b96c066435cd51e476f23" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>open_bracket</name></member>
      <member refid="classshogun_1_1CHMM_1a60b924202826a654e7a4fd03ae419aca" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>output_model</name></member>
      <member refid="classshogun_1_1CHMM_1a88a9bd6d0881ca6650272699b1a9c891" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>output_model_defined</name></member>
      <member refid="classshogun_1_1CHMM_1aa668b9972769169424e9e7780d4d20e9" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>p_observations</name></member>
      <member refid="classshogun_1_1CHMM_1ae683a6e3dc2e3b7550fffc13d7da2341" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>pat_prob</name></member>
      <member refid="classshogun_1_1CHMM_1afb543505941efd4033734a96d3e15ce9" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>path</name></member>
      <member refid="classshogun_1_1CHMM_1af6beaa083df5c47f1645d9c4fee211ef" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>PATH</name></member>
      <member refid="classshogun_1_1CHMM_1ab9ce2372bfbd2a2c374c41803f6a2545" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>path_deriv_dimension</name></member>
      <member refid="classshogun_1_1CHMM_1a634f2667e9a771ed1ec64020fbdd0f0d" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>path_deriv_updated</name></member>
      <member refid="classshogun_1_1CHMM_1ae90259a94d6368b574f0cf67823a0ed6" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>path_derivative_a</name></member>
      <member refid="classshogun_1_1CHMM_1a480d7a184d95b738df4595a6a9b99e5a" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>path_derivative_b</name></member>
      <member refid="classshogun_1_1CHMM_1ade6b893f9f0f6fedf26ef032c795987e" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>path_derivative_p</name></member>
      <member refid="classshogun_1_1CHMM_1a6118a850b10f25de7857f89f38458736" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>path_derivative_q</name></member>
      <member refid="classshogun_1_1CHMM_1a8896a5353827834e1c65c9bec3f5bd4d" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>PATH_PROB_DIMENSION</name></member>
      <member refid="classshogun_1_1CHMM_1ae40bb6de89127a4373cb5c1a25dea215" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>path_prob_dimension</name></member>
      <member refid="classshogun_1_1CHMM_1aa66382f1f58d6c6c929e5293f7351b38" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>path_prob_updated</name></member>
      <member refid="classshogun_1_1CHMM_1a50715940a773ba4cf0aadd9a91c30456" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>PATH_PROB_UPDATED</name></member>
      <member refid="classshogun_1_1CHMM_1ac0fefe3cc28977ec76506fbae5733d0b" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>permutation_entropy</name></member>
      <member refid="classshogun_1_1CHMM_1aa35dc714909f45ba08ec1e54bf7d84ba" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>prepare_path_derivative</name></member>
      <member refid="classshogun_1_1CHMM_1a1341da6a3b84580d12b6e93a8eec5d2d" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>PSEUDO</name></member>
      <member refid="classshogun_1_1CDistribution_1aa3ab2ac558050ec4fddda8b4af1701bd" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>pseudo_count</name></member>
      <member refid="classshogun_1_1CHMM_1a6eccb1e55662101bbf349145dc90ad9c" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>reused_caches</name></member>
      <member refid="classshogun_1_1CHMM_1a02f27487fd947023a53b084cc72688d1" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_likelihood</name></member>
      <member refid="classshogun_1_1CHMM_1a8d4675b79f57f8cfaea122582d6a9e31" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_likelihood_bin</name></member>
      <member refid="classshogun_1_1CHMM_1a101701e69c1881848443ea90dc037347" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_model</name></member>
      <member refid="classshogun_1_1CHMM_1a358b18069d20164a67500461c43f5db7" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_model_bin</name></member>
      <member refid="classshogun_1_1CHMM_1a7312f2707fca79585fda666e56cada7b" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_model_derivatives</name></member>
      <member refid="classshogun_1_1CHMM_1acbfdbac19f350804c581e42051f8a924" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_model_derivatives_bin</name></member>
      <member refid="classshogun_1_1CHMM_1aa1edb1d3877c043d9979ace88ec08406" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_path</name></member>
      <member refid="classshogun_1_1CHMM_1aaf8658fb50c0f3dcce68357d73c51a5d" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_path_derivatives</name></member>
      <member refid="classshogun_1_1CHMM_1a8bc8767b1f6cce2c219a87ff27bd243a" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>save_path_derivatives_bin</name></member>
      <member refid="classshogun_1_1CHMM_1acd48e0068cd2a5e3cf86c8c81a6ca380" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_a</name></member>
      <member refid="classshogun_1_1CHMM_1a87a671beb5e1c173504856ce3716356d" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_A</name></member>
      <member refid="classshogun_1_1CHMM_1a8338d2d3c7900075b72329011d2caa3e" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_b</name></member>
      <member refid="classshogun_1_1CHMM_1a1f097a4fa8c187adb9c14051b60c6740" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_B</name></member>
      <member refid="classshogun_1_1CHMM_1a9ddaea71075cfcd537ee0ebfabcf8a89" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_epsilon</name></member>
      <member refid="classshogun_1_1CDistribution_1a79b46db2697086c233e7768bf50d529c" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>set_features</name></member>
      <member refid="classshogun_1_1CHMM_1a8626f05bd15ea80f3ab0f7c3dcaac814" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_iterations</name></member>
      <member refid="classshogun_1_1CHMM_1ac43eff15b70082ec955ca1826e8f4481" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_observation_nocache</name></member>
      <member refid="classshogun_1_1CHMM_1a9f24fe522a6b00d5b23d80ed0cb604c8" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_observations</name></member>
      <member refid="classshogun_1_1CHMM_1ad4fc527e99c77bcb681fe5a5a7f257bd" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_p</name></member>
      <member refid="classshogun_1_1CHMM_1aeb011004e9e59f9b898b7ee135c3e44d" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_pseudo</name></member>
      <member refid="classshogun_1_1CDistribution_1a3ca440f678c2f556e287dd007f2d6e2a" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>set_pseudo_count</name></member>
      <member refid="classshogun_1_1CHMM_1a0eff29e4d6aafda57b58740be9591561" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_psi</name></member>
      <member refid="classshogun_1_1CHMM_1aa3cd2f4604388004f03e66dbe3838a63" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>set_q</name></member>
      <member refid="classshogun_1_1CHMM_1ac8db822f39dcf0afc7d64647f973c2e1" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>state_probability</name></member>
      <member refid="classshogun_1_1CHMM_1a563f6ced3c7d52e4a03f5fbbcc9f3e9e" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>STATES_PER_OBSERVATION_PSI</name></member>
      <member refid="classshogun_1_1CHMM_1a7f2f0a3246a5d158ae14dd17aa22b9e3" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>STATES_PER_OBSERVATION_PSI</name></member>
      <member refid="classshogun_1_1CHMM_1af95719b697fce6cea29f7d453fc1c4b4" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>states_per_observation_psi</name></member>
      <member refid="classshogun_1_1CHMM_1a1c632bd2b9e210d0189881448c2b42ba" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>status</name></member>
      <member refid="classshogun_1_1CHMM_1a3ee09e1ab26aabbef44ba2a13dde60f4" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>train</name></member>
      <member refid="classshogun_1_1CHMM_1a0ea6fab78bea6306766577e4e71f554e" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>trans_list_backward</name></member>
      <member refid="classshogun_1_1CHMM_1a37ef1770d62dcb39d67164f6655552c1" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>trans_list_backward_cnt</name></member>
      <member refid="classshogun_1_1CHMM_1a0386ef03d408e5ec90abbe007ae8612c" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>trans_list_forward</name></member>
      <member refid="classshogun_1_1CHMM_1af5f840b0062380b274b0105f0503e33a" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>trans_list_forward_cnt</name></member>
      <member refid="classshogun_1_1CHMM_1a8b805c54829c50eb6be002df83b790fa" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>trans_list_forward_val</name></member>
      <member refid="classshogun_1_1CHMM_1a237196e199554c239a99a30519d5efd6" prot="private" virt="non-virtual"><scope>shogun::CHMM</scope><name>trans_list_len</name></member>
      <member refid="classshogun_1_1CHMM_1a54f49a5aa36e403f572ae8bb25c4bc2e" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>transition_matrix_A</name></member>
      <member refid="classshogun_1_1CHMM_1aa4feb6a080e4579fea401756a57821e6" prot="protected" virt="non-virtual"><scope>shogun::CHMM</scope><name>transition_matrix_a</name></member>
      <member refid="classshogun_1_1CHMM_1aface39607cb1f106efef5b6a7e1da3fa" prot="public" virt="non-virtual"><scope>shogun::CHMM</scope><name>transition_probability</name></member>
      <member refid="classshogun_1_1CDistribution_1ab38fcafc652e448eeb7e4d11ed971ed1" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>~CDistribution</name></member>
      <member refid="classshogun_1_1CHMM_1aa0d54d3eaf0ea5fae90fadfc8a15fb9f" prot="public" virt="virtual"><scope>shogun::CHMM</scope><name>~CHMM</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
