<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="namespaceshogun" kind="namespace">
    <compoundname>shogun</compoundname>
    <innerclass refid="classshogun_1_1CClassifier" prot="public">shogun::CClassifier</innerclass>
    <innerclass refid="classshogun_1_1CDistanceMachine" prot="public">shogun::CDistanceMachine</innerclass>
    <innerclass refid="classshogun_1_1CKernelMachine" prot="public">shogun::CKernelMachine</innerclass>
    <innerclass refid="classshogun_1_1CKernelPerceptron" prot="public">shogun::CKernelPerceptron</innerclass>
    <innerclass refid="classshogun_1_1CKNN" prot="public">shogun::CKNN</innerclass>
    <innerclass refid="classshogun_1_1CLinearClassifier" prot="public">shogun::CLinearClassifier</innerclass>
    <innerclass refid="classshogun_1_1CMKL" prot="public">shogun::CMKL</innerclass>
    <innerclass refid="classshogun_1_1CMKLClassification" prot="public">shogun::CMKLClassification</innerclass>
    <innerclass refid="classshogun_1_1CMKLMultiClass" prot="public">shogun::CMKLMultiClass</innerclass>
    <innerclass refid="classshogun_1_1MKLMultiClassGLPK" prot="public">shogun::MKLMultiClassGLPK</innerclass>
    <innerclass refid="classshogun_1_1CMKLOneClass" prot="public">shogun::CMKLOneClass</innerclass>
    <innerclass refid="classshogun_1_1CPerceptron" prot="public">shogun::CPerceptron</innerclass>
    <innerclass refid="classshogun_1_1CPluginEstimate" prot="public">shogun::CPluginEstimate</innerclass>
    <innerclass refid="classshogun_1_1CDomainAdaptationSVM" prot="public">shogun::CDomainAdaptationSVM</innerclass>
    <innerclass refid="classshogun_1_1CGMNPLib" prot="public">shogun::CGMNPLib</innerclass>
    <innerclass refid="classshogun_1_1CGMNPSVM" prot="public">shogun::CGMNPSVM</innerclass>
    <innerclass refid="classshogun_1_1CGNPPLib" prot="public">shogun::CGNPPLib</innerclass>
    <innerclass refid="classshogun_1_1CGNPPSVM" prot="public">shogun::CGNPPSVM</innerclass>
    <innerclass refid="classshogun_1_1CGPBTSVM" prot="public">shogun::CGPBTSVM</innerclass>
    <innerclass refid="classshogun_1_1sKernel" prot="public">shogun::sKernel</innerclass>
    <innerclass refid="classshogun_1_1QPproblem" prot="public">shogun::QPproblem</innerclass>
    <innerclass refid="structshogun_1_1larank__kcache__s" prot="public">shogun::larank_kcache_s</innerclass>
    <innerclass refid="classshogun_1_1LaRankOutput" prot="public">shogun::LaRankOutput</innerclass>
    <innerclass refid="classshogun_1_1LaRankPattern" prot="public">shogun::LaRankPattern</innerclass>
    <innerclass refid="classshogun_1_1LaRankPatterns" prot="public">shogun::LaRankPatterns</innerclass>
    <innerclass refid="classshogun_1_1CLaRank" prot="public">shogun::CLaRank</innerclass>
    <innerclass refid="structshogun_1_1ocas__return__value__T" prot="public">shogun::ocas_return_value_T</innerclass>
    <innerclass refid="classshogun_1_1CLibSVM" prot="public">shogun::CLibSVM</innerclass>
    <innerclass refid="classshogun_1_1CLibSVMMultiClass" prot="public">shogun::CLibSVMMultiClass</innerclass>
    <innerclass refid="classshogun_1_1CLibSVMOneClass" prot="public">shogun::CLibSVMOneClass</innerclass>
    <innerclass refid="classshogun_1_1CMPDSVM" prot="public">shogun::CMPDSVM</innerclass>
    <innerclass refid="classshogun_1_1CMultiClassSVM" prot="public">shogun::CMultiClassSVM</innerclass>
    <innerclass refid="classshogun_1_1CQPBSVMLib" prot="public">shogun::CQPBSVMLib</innerclass>
    <innerclass refid="classshogun_1_1CScatterSVM" prot="public">shogun::CScatterSVM</innerclass>
    <innerclass refid="structshogun_1_1data" prot="public">shogun::data</innerclass>
    <innerclass refid="structshogun_1_1vector__double" prot="public">shogun::vector_double</innerclass>
    <innerclass refid="structshogun_1_1vector__int" prot="public">shogun::vector_int</innerclass>
    <innerclass refid="structshogun_1_1options" prot="public">shogun::options</innerclass>
    <innerclass refid="classshogun_1_1Delta" prot="public">shogun::Delta</innerclass>
    <innerclass refid="classshogun_1_1CSubGradientSVM" prot="public">shogun::CSubGradientSVM</innerclass>
    <innerclass refid="classshogun_1_1CSVM" prot="public">shogun::CSVM</innerclass>
    <innerclass refid="structshogun_1_1svm__node" prot="public">shogun::svm_node</innerclass>
    <innerclass refid="structshogun_1_1svm__problem" prot="public">shogun::svm_problem</innerclass>
    <innerclass refid="structshogun_1_1svm__parameter" prot="public">shogun::svm_parameter</innerclass>
    <innerclass refid="structshogun_1_1svm__model" prot="public">shogun::svm_model</innerclass>
    <innerclass refid="classshogun_1_1CSVMLin" prot="public">shogun::CSVMLin</innerclass>
    <innerclass refid="classshogun_1_1CSVMOcas" prot="public">shogun::CSVMOcas</innerclass>
    <innerclass refid="classshogun_1_1CSVMSGD" prot="public">shogun::CSVMSGD</innerclass>
    <innerclass refid="classshogun_1_1CWDSVMOcas" prot="public">shogun::CWDSVMOcas</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9a" prot="public" static="no">
        <name>EClassifierType</name>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aab19c54648e40277b068eebea8348501b" prot="public">
          <name>CT_NONE</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa5bb2140312d5ef751357b32e15f221d0" prot="public">
          <name>CT_LIGHT</name>
          <initializer> 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aafbf783f40967e05062a46f16e5c15d60" prot="public">
          <name>CT_LIBSVM</name>
          <initializer> 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa6c64a4b99c23c5988cbd646f5d47efde" prot="public">
          <name>CT_LIBSVMONECLASS</name>
          <initializer>30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa49f0fe9b1c2c01d91262a2dc4a93cda7" prot="public">
          <name>CT_LIBSVMMULTICLASS</name>
          <initializer>40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa05599df36b3387f4f6e3f8fb5b398910" prot="public">
          <name>CT_MPD</name>
          <initializer> 50</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aaba46b9f7b982c30ca2b3be53d5ae6f8e" prot="public">
          <name>CT_GPBT</name>
          <initializer> 60</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aab699f569bce37f83911fdd59b18ba20a" prot="public">
          <name>CT_CPLEXSVM</name>
          <initializer> 70</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aaaca721a3bf701d52fff854c2bf343518" prot="public">
          <name>CT_PERCEPTRON</name>
          <initializer> 80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aaee000ac2a9049d11f9bb86c9b18bba20" prot="public">
          <name>CT_KERNELPERCEPTRON</name>
          <initializer> 90</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa15912e2e095df6cad9404afb00721c0d" prot="public">
          <name>CT_LDA</name>
          <initializer> 100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aad074e565a74dcd742fabbc8e8eba5331" prot="public">
          <name>CT_LPM</name>
          <initializer> 110</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aae97a6acba3ff14b6585836e582941823" prot="public">
          <name>CT_LPBOOST</name>
          <initializer> 120</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aaf4b9639e0a751503c6c67187da1f1081" prot="public">
          <name>CT_KNN</name>
          <initializer> 130</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aac4df9e4dc5438c9bc0fd7ead43558dd8" prot="public">
          <name>CT_SVMLIN</name>
          <initializer>140</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aacc61be9f6f6c8b7829f783190789b31e" prot="public">
          <name>CT_KRR</name>
          <initializer> 150</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa15b236b0491635977148713bef2ed0ef" prot="public">
          <name>CT_GNPPSVM</name>
          <initializer> 160</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa298480feb5936c1cf9a13d92233f5dcf" prot="public">
          <name>CT_GMNPSVM</name>
          <initializer> 170</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa59c63162c10050f1784575e47686bcde" prot="public">
          <name>CT_SUBGRADIENTSVM</name>
          <initializer> 180</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aac419101059fff694718439178667390d" prot="public">
          <name>CT_SUBGRADIENTLPM</name>
          <initializer> 190</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aac9ded3231959b27eebb8aaf9859af9e2" prot="public">
          <name>CT_SVMPERF</name>
          <initializer> 200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aaf28981b5fe14b3dd915d3870401fe9f8" prot="public">
          <name>CT_LIBSVR</name>
          <initializer> 210</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aaeb754d3742bd877e1ba0302ee90d54e5" prot="public">
          <name>CT_SVRLIGHT</name>
          <initializer> 220</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa3387d13b1ef396a1902cee3950953075" prot="public">
          <name>CT_LIBLINEAR</name>
          <initializer> 230</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa7318022d93025da298889b8b7ebc283e" prot="public">
          <name>CT_KMEANS</name>
          <initializer> 240</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa335b052265e0154c181376469392c9e4" prot="public">
          <name>CT_HIERARCHICAL</name>
          <initializer> 250</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa5bc5097b2a1285fd21df70d12bee4a31" prot="public">
          <name>CT_SVMOCAS</name>
          <initializer> 260</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa4a2d11b7a1c5a9603eb9e07544f0e304" prot="public">
          <name>CT_WDSVMOCAS</name>
          <initializer> 270</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aae70c050c51b5c321a79c1b76bc8b7220" prot="public">
          <name>CT_SVMSGD</name>
          <initializer> 280</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa0595097a1d24dc4d2a20ca5caa284ffb" prot="public">
          <name>CT_MKLMULTICLASS</name>
          <initializer> 290</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa0c1aa99249bc37a8e6330b3f4a508d43" prot="public">
          <name>CT_MKLCLASSIFICATION</name>
          <initializer> 300</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa1454470f5a7209c7c3a71a243d38be57" prot="public">
          <name>CT_MKLONECLASS</name>
          <initializer> 310</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aaedb0eb37a4b72c8d13f187c89307f6af" prot="public">
          <name>CT_MKLREGRESSION</name>
          <initializer> 320</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa80f7efde66ca29a094810e1dda365967" prot="public">
          <name>CT_SCATTERSVM</name>
          <initializer> 330</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa30b4c1532fe734d1f9d4abc431750a34" prot="public">
          <name>CT_DASVM</name>
          <initializer> 340</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a8b7aa31b83bcc67d0cff8c84a4378a9aa986e4cca91f2f16cd2da8a6d103ceb8c" prot="public">
          <name>CT_LARANK</name>
          <initializer> 350</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/Classifier.h" line="28" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/Classifier.h" bodystart="27" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1a82b6b3057e977050e6462641a561b908" prot="public" static="no">
        <name>ESolverType</name>
        <enumvalue id="namespaceshogun_1a82b6b3057e977050e6462641a561b908a603426afd31b601428ef9c0ace15a951" prot="public">
          <name>ST_AUTO</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a82b6b3057e977050e6462641a561b908a32ff51bd173f0ad7b3f779e0d442db8c" prot="public">
          <name>ST_CPLEX</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a82b6b3057e977050e6462641a561b908adabb1c047dac894c2c0336b55b573546" prot="public">
          <name>ST_GLPK</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a82b6b3057e977050e6462641a561b908af14bfec1b4091737b2d536ce04636a20" prot="public">
          <name>ST_NEWTON</name>
          <initializer>3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a82b6b3057e977050e6462641a561b908a3a6702dd5dd530a1f17b1960b5bef6c2" prot="public">
          <name>ST_DIRECT</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/Classifier.h" line="68" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/Classifier.h" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1ab749a085fd2ca0eb38f7c5527c392aed" prot="public" static="no">
        <name>@0</name>
        <enumvalue id="namespaceshogun_1ab749a085fd2ca0eb38f7c5527c392aedaf05688abb3905792779447dfa7896058" prot="public">
          <name>SOLVER_VPM</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ab749a085fd2ca0eb38f7c5527c392aeda1cc69fa5ed7ce147dbb4bd7cd7329e3a" prot="public">
          <name>SOLVER_FLETCHER</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/gpdt.h" line="80" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/gpdt.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1aec43fe78820ebd958721c1e480a12255" prot="public" static="no">
        <name>LIBSVM_SOLVER_TYPE</name>
        <enumvalue id="namespaceshogun_1aec43fe78820ebd958721c1e480a12255ab2efb11737691b9b3df66f00d1cc5bf9" prot="public">
          <name>LIBSVM_C_SVC</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1aec43fe78820ebd958721c1e480a12255ab342ad34430d86ff677e132f0760e855" prot="public">
          <name>LIBSVM_NU_SVC</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/LibSVM.h" line="21" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/LibSVM.h" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1a671da9a835ae32aa086037a04e4a914f" prot="public" static="no">
        <name>EMultiClassSVM</name>
        <enumvalue id="namespaceshogun_1a671da9a835ae32aa086037a04e4a914fa08b0e820aebe37a91c90efd9ef63a365" prot="public">
          <name>ONE_VS_REST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a671da9a835ae32aa086037a04e4a914fa84f66bf6ac497e4542131b5cca29f790" prot="public">
          <name>ONE_VS_ONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/MultiClassSVM.h" line="22" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/MultiClassSVM.h" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1ac965aaeec92d75926107ac8cca3bf877" prot="public" static="no">
        <name>E_QPB_SOLVER</name>
        <enumvalue id="namespaceshogun_1ac965aaeec92d75926107ac8cca3bf877a9d0ea27b68b368fee8a11c3b4c808f61" prot="public">
          <name>QPB_SOLVER_SCA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ac965aaeec92d75926107ac8cca3bf877a4c38fc4105cb2fc4e934416196b8fd78" prot="public">
          <name>QPB_SOLVER_SCAS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ac965aaeec92d75926107ac8cca3bf877ab683148fa3c6cc7b388591c4033b348e" prot="public">
          <name>QPB_SOLVER_SCAMV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ac965aaeec92d75926107ac8cca3bf877ab03a1c93a237f2934b66916702732e81" prot="public">
          <name>QPB_SOLVER_PRLOQO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ac965aaeec92d75926107ac8cca3bf877a1a5d9e9e6ffd43c1130e5ceda7faca8c" prot="public">
          <name>QPB_SOLVER_CPLEX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ac965aaeec92d75926107ac8cca3bf877a844cb2d96d2a2e60598a2fed8880db04" prot="public">
          <name>QPB_SOLVER_GS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ac965aaeec92d75926107ac8cca3bf877aaa6fe893a0d46837fcef9db56b82a232" prot="public">
          <name>QPB_SOLVER_GRADDESC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/qpbsvmlib.h" line="31" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/qpbsvmlib.h" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1ace5f880e498c3103bebb6f032ee20bcc" prot="public" static="no">
        <name>@1</name>
        <enumvalue id="namespaceshogun_1ace5f880e498c3103bebb6f032ee20bcca1250843373e5ec2001cddfa234c2adad" prot="public">
          <name>RLS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ace5f880e498c3103bebb6f032ee20bcca1da96988318d98f54b32cf4182bee0b2" prot="public">
          <name>SVM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ace5f880e498c3103bebb6f032ee20bcca5c9b7434f47de4e84c800c3618fce4e9" prot="public">
          <name>TSVM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ace5f880e498c3103bebb6f032ee20bcca46f3762787e8aa0bcf3cbb8ce7df1d7a" prot="public">
          <name>DA_SVM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="84" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1ad1cc51f2efbd56364c4e0b55d765a3ab" prot="public" static="no">
        <name>@2</name>
        <enumvalue id="namespaceshogun_1ad1cc51f2efbd56364c4e0b55d765a3aba4489e382be004d256584c9ce53d0db46" prot="public">
          <name>C_SVC</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ad1cc51f2efbd56364c4e0b55d765a3aba9ac15568d626f5e8806265501e74ea43" prot="public">
          <name>NU_SVC</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ad1cc51f2efbd56364c4e0b55d765a3aba8d0ce50838cbee3c48c22c0bb69f414f" prot="public">
          <name>NU_MULTICLASS_SVC</name>
          <initializer>3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ad1cc51f2efbd56364c4e0b55d765a3abac3e491c082947aa07014ea52c2177444" prot="public">
          <name>ONE_CLASS</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ad1cc51f2efbd56364c4e0b55d765a3abaf1ecc752c923be3698c546c39b697672" prot="public">
          <name>EPSILON_SVR</name>
          <initializer>5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1ad1cc51f2efbd56364c4e0b55d765a3aba7dbb405ec5220c0fe29a2b424ac51d36" prot="public">
          <name>NU_SVR</name>
          <initializer>6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVM_libsvm.h" line="81" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVM_libsvm.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1aaa2fe41b3f2e9f4ab446bcddafac4ee9" prot="public" static="no">
        <name>@3</name>
        <enumvalue id="namespaceshogun_1aaa2fe41b3f2e9f4ab446bcddafac4ee9a7a34c029219be06412a8c33702d36eaa" prot="public">
          <name>LINEAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1aaa2fe41b3f2e9f4ab446bcddafac4ee9a585c41d806bd154030c874f087de3105" prot="public">
          <name>POLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1aaa2fe41b3f2e9f4ab446bcddafac4ee9aa3d799a0f122dd167b5ad624df86b28f" prot="public">
          <name>RBF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1aaa2fe41b3f2e9f4ab446bcddafac4ee9a2a1949d105b9074b667b0f846e52e7e3" prot="public">
          <name>SIGMOID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1aaa2fe41b3f2e9f4ab446bcddafac4ee9a04110e7dea6f939a4fbfcc2cb45e2b70" prot="public">
          <name>PRECOMPUTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVM_libsvm.h" line="82" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVM_libsvm.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshogun_1a14cd259512eabb27f334742c3d356998" prot="public" static="no">
        <name>E_SVM_TYPE</name>
        <enumvalue id="namespaceshogun_1a14cd259512eabb27f334742c3d356998aea47edec5dcf8f60ed779a606b026bc4" prot="public">
          <name>SVM_OCAS</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshogun_1a14cd259512eabb27f334742c3d356998a22a23c44c13f049f61ca491c699610de" prot="public">
          <name>SVM_BMRM</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVMOcas.h" line="23" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVMOcas.h" bodystart="22" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceshogun_1aacfae7a2f708cc7b617b97a4c4934815" prot="public" static="no">
        <type>struct <ref refid="structshogun_1_1larank__kcache__s" kindref="compound">larank_kcache_s</ref></type>
        <definition>typedef struct larank_kcache_s shogun::larank_kcache_t</definition>
        <argsstring></argsstring>
        <name>larank_kcache_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/LaRank.h" line="70" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/LaRank.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceshogun_1a5b2748fef6d0bf7300bd3abec0593757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::SplitParts</definition>
        <argsstring>(int32_t n, int32_t part, int32_t parts, int32_t *dim, int32_t *off)</argsstring>
        <name>SplitParts</name>
        <param>
          <type>int32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>part</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>parts</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/gpdt.h" line="193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1ab544b889f5a9b91a606fe2d2f44bc414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::SplitNum</definition>
        <argsstring>(int32_t n, int32_t *nloc, int32_t *noff)</argsstring>
        <name>SplitNum</name>
        <param>
          <type>int32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>nloc</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>noff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/gpdt.h" line="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a00bcaac71544b285882a84217d06772d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::gpm_solver</definition>
        <argsstring>(int32_t Solver, int32_t Projector, int32_t n, float32_t *A, float64_t *b, float64_t c, float64_t e, int32_t *iy, float64_t *x, float64_t tol, int32_t *ls=0, int32_t *proj=0)</argsstring>
        <name>gpm_solver</name>
        <param>
          <type>int32_t</type>
          <declname>Solver</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>Projector</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>e</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>iy</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>ls</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>proj</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/gpm.h" line="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a2b04dada737a52aaf4a9d3e92ba47ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structshogun_1_1ocas__return__value__T" kindref="compound">ocas_return_value_T</ref></type>
        <definition>ocas_return_value_T shogun::svm_ocas_solver</definition>
        <argsstring>(float64_t C, uint32_t nData, float64_t TolRel, float64_t TolAbs, float64_t QPBound, uint32_t BufSize, uint8_t Method, void(*compute_W)(float64_t *, float64_t *, float64_t *, uint32_t, void *), float64_t(*update_W)(float64_t, void *), void(*add_new_cut)(float64_t *, uint32_t *, uint32_t, uint32_t, void *), void(*compute_output)(float64_t *, void *), void(*sort)(float64_t *, uint32_t *, uint32_t), void *user_data)</argsstring>
        <name>svm_ocas_solver</name>
        <param>
          <type>float64_t</type>
          <declname>C</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nData</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>TolRel</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>TolAbs</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>QPBound</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>BufSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Method</declname>
        </param>
        <param>
          <type>void(*)(float64_t *, float64_t *, float64_t *, uint32_t, void *)</type>
          <declname>compute_W</declname>
        </param>
        <param>
          <type>float64_t(*)(float64_t, void *)</type>
          <declname>update_W</declname>
        </param>
        <param>
          <type>void(*)(float64_t *, uint32_t *, uint32_t, uint32_t, void *)</type>
          <declname>add_new_cut</declname>
        </param>
        <param>
          <type>void(*)(float64_t *, void *)</type>
          <declname>compute_output</declname>
        </param>
        <param>
          <type>void(*)(float64_t *, uint32_t *, uint32_t)</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/libocas.h" line="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a072bf48ebfd466d8fb85c6a1a895498f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::pr_loqo</definition>
        <argsstring>(int32_t n, int32_t m, float64_t c[], float64_t h_x[], float64_t a[], float64_t b[], float64_t l[], float64_t u[], float64_t primal[], float64_t dual[], int32_t verb, float64_t sigfig_max, int32_t counter_max, float64_t margin, float64_t bound, int32_t restart)</argsstring>
        <name>pr_loqo</name>
        <param>
          <type>int32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>c</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float64_t</type>
          <declname>h_x</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float64_t</type>
          <declname>a</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float64_t</type>
          <declname>b</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float64_t</type>
          <declname>l</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float64_t</type>
          <declname>u</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float64_t</type>
          <declname>primal</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float64_t</type>
          <declname>dual</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int32_t</type>
          <declname>verb</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>sigfig_max</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>counter_max</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>margin</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>bound</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>restart</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/pr_loqo.h" line="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1aee3a343d7de04497b77a44dbca9056ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t shogun::qpssvm_solver</definition>
        <argsstring>(const void *(*get_col)(uint32_t), float64_t *diag_H, float64_t *f, float64_t b, uint16_t *I, float64_t *x, uint32_t n, uint32_t tmax, float64_t tolabs, float64_t tolrel, float64_t *QP, float64_t *QD, uint32_t verb)</argsstring>
        <name>qpssvm_solver</name>
        <param>
          <type>const void *(*)(uint32_t)</type>
          <declname>get_col</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>diag_H</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>I</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>tmax</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>tolabs</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>tolrel</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>QP</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>QD</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>verb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/qpssvmlib.h" line="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1aa066df57e35e3cc7e9cfcc55f2a95614" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::operator&lt;</definition>
        <argsstring>(const Delta &amp;a, const Delta &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classshogun_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classshogun_1_1Delta" kindref="compound">Delta</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="132" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1adf411f8e2872297ed905349d6e903018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::initialize</definition>
        <argsstring>(struct vector_double *A, int32_t k, float64_t a)</argsstring>
        <name>initialize</name>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a5dbcb87c4042a4cf076a74bead0c30ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::initialize</definition>
        <argsstring>(struct vector_int *A, int32_t k)</argsstring>
        <name>initialize</name>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__int" kindref="compound">vector_int</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a383608788e4b77f97a591285a278717a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::GetLabeledData</definition>
        <argsstring>(struct data *Data_Labeled, const struct data *Data)</argsstring>
        <name>GetLabeledData</name>
        <param>
          <type>struct <ref refid="structshogun_1_1data" kindref="compound">data</ref> *</type>
          <declname>Data_Labeled</declname>
        </param>
        <param>
          <type>const struct <ref refid="structshogun_1_1data" kindref="compound">data</ref> *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1ab83cc498e20deba3763dc2e2111c6ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::norm_square</definition>
        <argsstring>(const vector_double *A)</argsstring>
        <name>norm_square</name>
        <param>
          <type>const <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a696a1f4f55bbf7a6d8fe93cee884e739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::ssl_train</definition>
        <argsstring>(struct data *Data, struct options *Options, struct vector_double *W, struct vector_double *O)</argsstring>
        <name>ssl_train</name>
        <param>
          <type>struct <ref refid="structshogun_1_1data" kindref="compound">data</ref> *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1options" kindref="compound">options</ref> *</type>
          <declname>Options</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>O</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a423bab5e5bc64ee260b658b0a6a68a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::CGLS</definition>
        <argsstring>(const struct data *Data, const struct options *Options, const struct vector_int *Subset, struct vector_double *Weights, struct vector_double *Outputs)</argsstring>
        <name>CGLS</name>
        <param>
          <type>const struct <ref refid="structshogun_1_1data" kindref="compound">data</ref> *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>const struct <ref refid="structshogun_1_1options" kindref="compound">options</ref> *</type>
          <declname>Options</declname>
        </param>
        <param>
          <type>const struct <ref refid="structshogun_1_1vector__int" kindref="compound">vector_int</ref> *</type>
          <declname>Subset</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Weights</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Outputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a7e2901c37dc8850e003383a174c5bf83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::L2_SVM_MFN</definition>
        <argsstring>(const struct data *Data, struct options *Options, struct vector_double *Weights, struct vector_double *Outputs, int32_t ini)</argsstring>
        <name>L2_SVM_MFN</name>
        <param>
          <type>const struct <ref refid="structshogun_1_1data" kindref="compound">data</ref> *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1options" kindref="compound">options</ref> *</type>
          <declname>Options</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Weights</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Outputs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>ini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a8d1808344df29aaa5d8e59e8d49c920e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::line_search</definition>
        <argsstring>(float64_t *w, float64_t *w_bar, float64_t lambda, float64_t *o, float64_t *o_bar, float64_t *Y, float64_t *C, int32_t d, int32_t l)</argsstring>
        <name>line_search</name>
        <param>
          <type>float64_t *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>w_bar</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>o</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>o_bar</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="183"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1adbce8fab5d0111420bea2ae82f577dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::TSVM_MFN</definition>
        <argsstring>(const struct data *Data, struct options *Options, struct vector_double *Weights, struct vector_double *Outputs)</argsstring>
        <name>TSVM_MFN</name>
        <param>
          <type>const struct <ref refid="structshogun_1_1data" kindref="compound">data</ref> *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1options" kindref="compound">options</ref> *</type>
          <declname>Options</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Weights</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Outputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="192"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a6219232abd610746992222cd9d151b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::switch_labels</definition>
        <argsstring>(float64_t *Y, float64_t *o, int32_t *JU, int32_t u, int32_t S)</argsstring>
        <name>switch_labels</name>
        <param>
          <type>float64_t *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>o</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>JU</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>S</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="199"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a0f92086462a3d73ae1dcd4ded003160d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::DA_S3VM</definition>
        <argsstring>(struct data *Data, struct options *Options, struct vector_double *Weights, struct vector_double *Outputs)</argsstring>
        <name>DA_S3VM</name>
        <param>
          <type>struct <ref refid="structshogun_1_1data" kindref="compound">data</ref> *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1options" kindref="compound">options</ref> *</type>
          <declname>Options</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Weights</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Outputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="206"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1aeeb38e111fb2964d020b221500ff20e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::optimize_p</definition>
        <argsstring>(const float64_t *g, int32_t u, float64_t T, float64_t r, float64_t *p)</argsstring>
        <name>optimize_p</name>
        <param>
          <type>const float64_t *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>T</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1ad0de007d4bbcdb9731e7eaf95f75f66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::optimize_w</definition>
        <argsstring>(const struct data *Data, const float64_t *p, struct options *Options, struct vector_double *Weights, struct vector_double *Outputs, int32_t ini)</argsstring>
        <name>optimize_w</name>
        <param>
          <type>const struct <ref refid="structshogun_1_1data" kindref="compound">data</ref> *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>const float64_t *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1options" kindref="compound">options</ref> *</type>
          <declname>Options</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Weights</declname>
        </param>
        <param>
          <type>struct <ref refid="structshogun_1_1vector__double" kindref="compound">vector_double</ref> *</type>
          <declname>Outputs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>ini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1aa575a8c291640cd0923f9b4fc2089faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::transductive_cost</definition>
        <argsstring>(float64_t normWeights, float64_t *Y, float64_t *Outputs, int32_t m, float64_t lambda, float64_t lambda_u)</argsstring>
        <name>transductive_cost</name>
        <param>
          <type>float64_t</type>
          <declname>normWeights</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>Outputs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>lambda_u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="225"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1ae67571f7030f4ad5d9c43af516171cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::entropy</definition>
        <argsstring>(const float64_t *p, int32_t u)</argsstring>
        <name>entropy</name>
        <param>
          <type>const float64_t *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a4fbeb22f65a0c86cc58a5f5872a2fbe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::KL</definition>
        <argsstring>(const float64_t *p, const float64_t *q, int32_t u)</argsstring>
        <name>KL</name>
        <param>
          <type>const float64_t *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const float64_t *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/ssl.h" line="230"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a3682febcf94536b90d5c5efa57a278b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structshogun_1_1svm__model" kindref="compound">svm_model</ref> *</type>
        <definition>struct svm_model* shogun::svm_train</definition>
        <argsstring>(const struct svm_problem *prob, const struct svm_parameter *param)</argsstring>
        <name>svm_train</name>
        <param>
          <type>const struct <ref refid="structshogun_1_1svm__problem" kindref="compound">svm_problem</ref> *</type>
          <declname>prob</declname>
        </param>
        <param>
          <type>const struct <ref refid="structshogun_1_1svm__parameter" kindref="compound">svm_parameter</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVM_libsvm.h" line="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1aba8019baf209fb0915ac5370bad544d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::svm_predict</definition>
        <argsstring>(const struct svm_model *model, const struct svm_node *x)</argsstring>
        <name>svm_predict</name>
        <param>
          <type>const struct <ref refid="structshogun_1_1svm__model" kindref="compound">svm_model</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const struct <ref refid="structshogun_1_1svm__node" kindref="compound">svm_node</ref> *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVM_libsvm.h" line="165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a5889816ed705e8a3be2047478076d93e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::svm_destroy_model</definition>
        <argsstring>(struct svm_model *model)</argsstring>
        <name>svm_destroy_model</name>
        <param>
          <type>struct <ref refid="structshogun_1_1svm__model" kindref="compound">svm_model</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVM_libsvm.h" line="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshogun_1a61dd1f04c9a693721b9b3b18ddbdeab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* shogun::svm_check_parameter</definition>
        <argsstring>(const struct svm_problem *prob, const struct svm_parameter *param)</argsstring>
        <name>svm_check_parameter</name>
        <param>
          <type>const struct <ref refid="structshogun_1_1svm__problem" kindref="compound">svm_problem</ref> *</type>
          <declname>prob</declname>
        </param>
        <param>
          <type>const struct <ref refid="structshogun_1_1svm__parameter" kindref="compound">svm_parameter</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/svm/SVM_libsvm.h" line="169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/classifier/Classifier.h" line="21"/>
  </compounddef>
</doxygen>
