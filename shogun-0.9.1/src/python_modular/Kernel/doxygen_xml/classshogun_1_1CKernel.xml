<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classshogun_1_1CKernel" kind="class" prot="public">
    <compoundname>shogun::CKernel</compoundname>
    <derivedcompoundref refid="classshogun_1_1CSimpleKernel" prot="public" virt="non-virtual">shogun::CSimpleKernel&lt; float32_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CSimpleKernel" prot="public" virt="non-virtual">shogun::CSimpleKernel&lt; float64_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CSimpleKernel" prot="public" virt="non-virtual">shogun::CSimpleKernel&lt; int32_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CSimpleKernel" prot="public" virt="non-virtual">shogun::CSimpleKernel&lt; uint16_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CSimpleKernel" prot="public" virt="non-virtual">shogun::CSimpleKernel&lt; uint8_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CSparseKernel" prot="public" virt="non-virtual">shogun::CSparseKernel&lt; float64_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CStringKernel" prot="public" virt="non-virtual">shogun::CStringKernel&lt; char &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CStringKernel" prot="public" virt="non-virtual">shogun::CStringKernel&lt; uint16_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CStringKernel" prot="public" virt="non-virtual">shogun::CStringKernel&lt; uint64_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CCombinedKernel" prot="public" virt="non-virtual">shogun::CCombinedKernel</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CConstKernel" prot="public" virt="non-virtual">shogun::CConstKernel</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CCustomKernel" prot="public" virt="non-virtual">shogun::CCustomKernel</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CDiagKernel" prot="public" virt="non-virtual">shogun::CDiagKernel</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CDistanceKernel" prot="public" virt="non-virtual">shogun::CDistanceKernel</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CSimpleKernel" prot="public" virt="non-virtual">shogun::CSimpleKernel&lt; ST &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CSparseKernel" prot="public" virt="non-virtual">shogun::CSparseKernel&lt; ST &gt;</derivedcompoundref>
    <derivedcompoundref refid="classshogun_1_1CStringKernel" prot="public" virt="non-virtual">shogun::CStringKernel&lt; ST &gt;</derivedcompoundref>
    <includes local="no">Kernel.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classshogun_1_1CKernel_1a1a4040a662dad08c6697f21e62693837" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CVarianceKernelNormalizer</definition>
        <argsstring></argsstring>
        <name>CVarianceKernelNormalizer</name>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1a1a4040a662dad08c6697f21e62693837">CVarianceKernelNormalizer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="146" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classshogun_1_1CKernel_1aa5aeba20e2ab84cda65c02197024923f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CSqrtDiagKernelNormalizer</definition>
        <argsstring></argsstring>
        <name>CSqrtDiagKernelNormalizer</name>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1aa5aeba20e2ab84cda65c02197024923f">CSqrtDiagKernelNormalizer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="147" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classshogun_1_1CKernel_1aaa5c880392db119ef5bf4518b1117fda" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CAvgDiagKernelNormalizer</definition>
        <argsstring></argsstring>
        <name>CAvgDiagKernelNormalizer</name>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1aaa5c880392db119ef5bf4518b1117fda">CAvgDiagKernelNormalizer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="148" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classshogun_1_1CKernel_1a047ac6f2f2c0bac760e51048d40a4ac9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CRidgeKernelNormalizer</definition>
        <argsstring></argsstring>
        <name>CRidgeKernelNormalizer</name>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1a047ac6f2f2c0bac760e51048d40a4ac9">CRidgeKernelNormalizer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="149" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classshogun_1_1CKernel_1a6c778aee34bdcd2779880c95fe49a946" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CFirstElementKernelNormalizer</definition>
        <argsstring></argsstring>
        <name>CFirstElementKernelNormalizer</name>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1a6c778aee34bdcd2779880c95fe49a946">CFirstElementKernelNormalizer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="150" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classshogun_1_1CKernel_1a016adb4d6eda97d16d59c7bed552d60a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CTanimotoKernelNormalizer</definition>
        <argsstring></argsstring>
        <name>CTanimotoKernelNormalizer</name>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1a016adb4d6eda97d16d59c7bed552d60a">CTanimotoKernelNormalizer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="151" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classshogun_1_1CKernel_1adffb9d7044cf61b8ba443614925ecf59" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CDiceKernelNormalizer</definition>
        <argsstring></argsstring>
        <name>CDiceKernelNormalizer</name>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1adffb9d7044cf61b8ba443614925ecf59">CDiceKernelNormalizer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="152" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classshogun_1_1CKernel_1ae1dc0bbc6ea973b18dcba2e4fac486b8" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CKernel::cache_size</definition>
        <argsstring></argsstring>
        <name>cache_size</name>
        <briefdescription>
<para>cache_size in MB </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="922" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1a01f88ea73f221b5a768e1c67c731a763" prot="protected" static="no" mutable="no">
        <type>KERNELCACHE_ELEM *</type>
        <definition>KERNELCACHE_ELEM* shogun::CKernel::kernel_matrix</definition>
        <argsstring></argsstring>
        <name>kernel_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this *COULD* store the whole kernel matrix usually not applicable / necessary to compute the whole matrix </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="931" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1ae7bc6b54431a07498f0b6ef4ab087297" prot="protected" static="no" mutable="no">
        <type>CFeatures *</type>
        <definition>CFeatures* shogun::CKernel::lhs</definition>
        <argsstring></argsstring>
        <name>lhs</name>
        <briefdescription>
<para>feature vectors to occur on left hand side </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="934" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1a5dab35da7f429dd860f59d9a98960a3f" prot="protected" static="no" mutable="no">
        <type>CFeatures *</type>
        <definition>CFeatures* shogun::CKernel::rhs</definition>
        <argsstring></argsstring>
        <name>rhs</name>
        <briefdescription>
<para>feature vectors to occur on right hand side </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="936" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1a0d5cfafbf2afd0260857089504262dd6" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CKernel::num_lhs</definition>
        <argsstring></argsstring>
        <name>num_lhs</name>
        <briefdescription>
<para>number of feature vectors on left hand side </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="939" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="939" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1a6e741d3d75546bdc15bfb5be41aa9b96" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CKernel::num_rhs</definition>
        <argsstring></argsstring>
        <name>num_rhs</name>
        <briefdescription>
<para>number of feature vectors on right hand side </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="941" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1a105026c07a74e493c1711dad83b335f1" prot="protected" static="no" mutable="no">
        <type>float64_t</type>
        <definition>float64_t shogun::CKernel::combined_kernel_weight</definition>
        <argsstring></argsstring>
        <name>combined_kernel_weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>combined kernel weight </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="944" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1a5b4d22f0cd136296f6e9aee3364607d6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CKernel::optimization_initialized</definition>
        <argsstring></argsstring>
        <name>optimization_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if optimization is initialized </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="947" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1ad96fd157602292f3d88ebfef3077be00" prot="protected" static="no" mutable="no">
        <type>EOptimizationType</type>
        <definition>EOptimizationType shogun::CKernel::opt_type</definition>
        <argsstring></argsstring>
        <name>opt_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>optimization type (currently FASTBUTMEMHUNGRY and SLOWBUTMEMEFFICIENT) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="951" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1a16638a9afae47d4c2e36e20b2dff92f5" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t shogun::CKernel::properties</definition>
        <argsstring></argsstring>
        <name>properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>kernel properties </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="954" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CKernel_1acbe5200168cf7ade8c30f1a1eb40469b" prot="protected" static="no" mutable="no">
        <type><ref refid="classshogun_1_1CKernelNormalizer" kindref="compound">CKernelNormalizer</ref> *</type>
        <definition>CKernelNormalizer* shogun::CKernel::normalizer</definition>
        <argsstring></argsstring>
        <name>normalizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>normalize the kernel(i,j) function based on this normalization function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="958" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="958" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshogun_1_1CKernel_1a77872c37fccc650cd7f918b253bbeb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CKernel::CKernel</definition>
        <argsstring>()</argsstring>
        <name>CKernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>default constructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="159"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1aa2b1f73c8585adee444bb99a98e63a5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CKernel::CKernel</definition>
        <argsstring>(int32_t size)</argsstring>
        <name>CKernel</name>
        <param>
          <type>int32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>cache size </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="166"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a70cfe05692f9ee159aeb0dfcb8d2f5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CKernel::CKernel</definition>
        <argsstring>(CFeatures *l, CFeatures *r, int32_t size)</argsstring>
        <name>CKernel</name>
        <param>
          <type>CFeatures *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>CFeatures *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>features for left-hand side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>features for right-hand side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>cache size </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="174"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ac0b3e1e0d02e446954712d8245cd68c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual shogun::CKernel::~CKernel</definition>
        <argsstring>()</argsstring>
        <name>~CKernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="176"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ab4cbfe2c04238e33322647e22960c246" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CKernel::kernel</definition>
        <argsstring>(int32_t idx_a, int32_t idx_b)</argsstring>
        <name>kernel</name>
        <param>
          <type>int32_t</type>
          <declname>idx_a</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>idx_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get kernel function for lhs feature vector a and rhs feature vector b</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx_a</parametername>
</parameternamelist>
<parameterdescription>
<para>index of feature vector a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx_b</parametername>
</parameternamelist>
<parameterdescription>
<para>index of feature vector b </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>computed kernel function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="186" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="185" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a1f4f83d3d7bc7e34336c4c262ca95570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CKernel::get_kernel_matrix</definition>
        <argsstring>(float64_t **dst, int32_t *m, int32_t *n)</argsstring>
        <name>get_kernel_matrix</name>
        <param>
          <type>float64_t **</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get kernel matrix</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination where matrix will be stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension m of matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension n of matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="202"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a19c9666c242a0b019f645593e2c63e9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* shogun::CKernel::get_kernel_matrix</definition>
        <argsstring>(int32_t &amp;m, int32_t &amp;n, T *target)</argsstring>
        <name>get_kernel_matrix</name>
        <param>
          <type>int32_t &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int32_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get kernel matrix real</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension m of matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension n of matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the kernel matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="213" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="212" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a527940658a4f7a2012cb40f2c39e23ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CKernel::init</definition>
        <argsstring>(CFeatures *lhs, CFeatures *rhs)</argsstring>
        <name>init</name>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a42b3447b58bb35080b980a7fde823376">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a42b3447b58bb35080b980a7fde823376">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a42b3447b58bb35080b980a7fde823376">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a946f32ab3b4e97382211f239754e0de3">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1aa5c335d54b736c5cd365b279640b4eb4">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1aa5c335d54b736c5cd365b279640b4eb4">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1aa5c335d54b736c5cd365b279640b4eb4">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1aa5c335d54b736c5cd365b279640b4eb4">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1aa5c335d54b736c5cd365b279640b4eb4">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a6d68d9a3d81da7ed17f77d344e96b804">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a79d457bd64dd7375a8b11bf9012d6c53">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedCommWordStringKernel_1a06bd8d09127ae58433bb928837258859">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CTensorProductPairKernel_1aa20ec3730af04b55d7fad5dae0c92971">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a42b3447b58bb35080b980a7fde823376">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparsePolyKernel_1a24ecd046188acd23de11db77a89d58d6">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1a50a41bcb1f8c7b685208c79b8193a521">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a946f32ab3b4e97382211f239754e0de3">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseGaussianKernel_1a66839e90818b96868bf1ea2efcc7bc1a">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleLocalityImprovedStringKernel_1a597943449443250b700d877bd4ee6835">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1aa5c335d54b736c5cd365b279640b4eb4">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSigmoidKernel_1aabcaef9547945ad2c8e7f46274ad79bd">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSalzbergWordStringKernel_1aeb7a188aaab899d95abb89ec0eeba180">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CRegulatoryModulesStringKernel_1aa72e28a7be95f079f154a40d6f81b94e">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPyramidChi2_1adc788444d26d9f43a19e441089eac374">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyMatchWordStringKernel_1a9e882567dc39881aa6924647577fc43c">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyMatchStringKernel_1ab66faa0eda50479b9d9099dea47d11d6">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyKernel_1a2a39fd2534eb8a13b3c4d04c490e1f57">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1COligoStringKernel_1a04411e8e90214058c8ad10fa462250f4">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CMatchWordStringKernel_1a139aa907eb9c8d1bfda8807bd2d7b689">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLocalityImprovedStringKernel_1add98fbd202ad45bb889a1f8fba8d8731">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLocalAlignmentStringKernel_1a51d5d943d7691a79737e8e91947606f8">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1a75a69003dd289253ec0cd346ecd97b95">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1a272362c08123e6746f99fd4821f8b4d0">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1ab5592a74e3c2e0bafd0964e43d0a1a39">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1ad4e63b460bdb4f9f912572abe548ce9e">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CHistogramWordStringKernel_1a81f749ce890e220f79aa8e4ac3403544">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CGaussianShortRealKernel_1a7f590a3bbce60db3b7cb63931bc0007b">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CGaussianKernel_1a05cb97dfcac6bfced15fca0aa6d96f53">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CFixedDegreeStringKernel_1a31babaec7c9a4b2177e6fd1bb9fed7c3">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDistanceKernel_1abdc59ad1ed7e2fd1fc15d5df345d42bf">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1a4c4d7702321ffb1dc07d1da8ff79c1b3">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CConstKernel_1a243de90e0366597ba8c3ead297985085">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1af7dce8d2fa5e54e1117f819ee1dbccd8">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1a522a199a0920ff53da66013a8e7be17e">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a526c0f277971aea22aaf2f7f599f949d">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CChi2Kernel_1aab5a7a896898ff376cfad09fe71b0ae3">init</reimplementedby>
        <reimplementedby refid="classshogun_1_1CAUCKernel_1ac6252bd3198e665abaf0ca9840a0284b">init</reimplementedby>
        <param>
          <type>CFeatures *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>CFeatures *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize kernel e.g. setup lhs/rhs of kernel, precompute normalization constants etc. make sure to check that your kernel can deal with the supplied features (!)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>features for left-hand side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>features for right-hand side </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if init was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="315"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a0a3fc1096d6e00f56ca0f11cadd12ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CKernel::set_normalizer</definition>
        <argsstring>(CKernelNormalizer *normalizer)</argsstring>
        <name>set_normalizer</name>
        <param>
          <type><ref refid="classshogun_1_1CKernelNormalizer" kindref="compound">CKernelNormalizer</ref> *</type>
          <declname>normalizer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the current kernel normalizer</para><para><simplesect kind="return"><para>if successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="321"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a7aacb7938ed0f98f1fd14253bc1e9b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classshogun_1_1CKernelNormalizer" kindref="compound">CKernelNormalizer</ref> *</type>
        <definition>virtual CKernelNormalizer* shogun::CKernel::get_normalizer</definition>
        <argsstring>()</argsstring>
        <name>get_normalizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>obtain the current kernel normalizer</para><para><simplesect kind="return"><para>the kernel normalizer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="327"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1aeb0378209b4c63b7ae60596540ebed80" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CKernel::init_normalizer</definition>
        <argsstring>()</argsstring>
        <name>init_normalizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize the current kernel normalizer <simplesect kind="return"><para>if init was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="332"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ae593c118eda68888ad76a88af0367c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a1deef69f7578af43459fb61e60bbcfc8">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a697b76b67bb22519220ffe9f2ba7ea72">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedCommWordStringKernel_1ae19580aae52cf4bc5a8cc130570304f0">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparsePolyKernel_1a45f3b6db75b24c0152aaa58d301ec923">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1a81a932c45b7a9f8f078e973c8a50a4d3">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseGaussianKernel_1ab4f23eab94f52901fc9fe2be5e0cd9d9">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleLocalityImprovedStringKernel_1aec7b871ee2563e2c843517276c155a30">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSigmoidKernel_1a4852f20c621532b51a3846a9ba3109b2">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSalzbergWordStringKernel_1a7c06c51b176c8aa57aa1658dfa829ddd">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPyramidChi2_1af6e112f6fd89128951851657f1f2c773">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyMatchWordStringKernel_1a7873898d10ed3edf488096ef9d502015">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyMatchStringKernel_1a10b4a473b2b82f6e0db6496f0a2ba8c8">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyKernel_1a380847eb4c4455416c89a87b0f0d55fb">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1COligoStringKernel_1aeaabc649c1fd901a9496fb1632c2344f">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLocalAlignmentStringKernel_1ab347b81f60ca750f2cfd0a5413544197">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1a18592ce6d6663aa6045317e8c5393f79">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1abbd9e4f7f348577688056d9c5e70870a">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1ad453dcbde85c5afd8dfe4d563a076324">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1a0411d0d8f55e74aad957d02af2bed02e">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CHistogramWordStringKernel_1a6ee00af07c2871dcc3311dc37e8ed079">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CFixedDegreeStringKernel_1a9a1068a1f814db830c5516007a65df16">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1a5385d1e18ab6ec445b45c5fb4209d366">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1aa6d65b68d7fd2f1df295c80c88ff87ee">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1a56458fa891e814772e4c7f5b982c9b96">cleanup</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a7f557aee80655ab05bb5a2843c3ca0bf">cleanup</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clean up your kernel</para><para>base method only removes lhs and rhs overload to add further cleanup but make sure <ref refid="classshogun_1_1CKernel_1ae593c118eda68888ad76a88af0367c6e" kindref="member">CKernel::cleanup()</ref> is called </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="340"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a93221d864190e13c4749793d4ae7f0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CKernel::load</definition>
        <argsstring>(char *fname)</argsstring>
        <name>load</name>
        <param>
          <type>char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>load the kernel matrix</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>filename to load from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if loading was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="347"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ab1241d4ce37e5352cee96f6b456439c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CKernel::save</definition>
        <argsstring>(char *fname)</argsstring>
        <name>save</name>
        <param>
          <type>char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>save kernel matrix</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>filename to save to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if saving was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="354"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a0c71c8eb3ac024069c6bd9ff61ec0c39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CFeatures *</type>
        <definition>CFeatures* shogun::CKernel::get_lhs</definition>
        <argsstring>()</argsstring>
        <name>get_lhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get left-hand side of features used in kernel</para><para><simplesect kind="return"><para>features of left-hand side </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="360" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="360" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1abfd608e83f9839f8ca626ad793e452b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CFeatures *</type>
        <definition>CFeatures* shogun::CKernel::get_rhs</definition>
        <argsstring>()</argsstring>
        <name>get_rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get right-hand side of features used in kernel</para><para><simplesect kind="return"><para>features of right-hand side </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="366" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="366" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1af350caa123740b96ecaa69fd28454a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int32_t</type>
        <definition>virtual int32_t shogun::CKernel::get_num_vec_lhs</definition>
        <argsstring>()</argsstring>
        <name>get_num_vec_lhs</name>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1a24b9323893a0e92dc7ea770c01670680">get_num_vec_lhs</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of vectors of lhs features</para><para><simplesect kind="return"><para>number of vectors of left-hand side </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="373" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a7e45a8f4fc00c39b7d54dd37e001bed9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int32_t</type>
        <definition>virtual int32_t shogun::CKernel::get_num_vec_rhs</definition>
        <argsstring>()</argsstring>
        <name>get_num_vec_rhs</name>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1ae75e8bd6316dfcc5681db8782bbbfd1c">get_num_vec_rhs</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of vectors of rhs features</para><para><simplesect kind="return"><para>number of vectors of right-hand side </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="382" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a6db0206d0b4fe30bf64b93d8eed3b8b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CKernel::has_features</definition>
        <argsstring>()</argsstring>
        <name>has_features</name>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1a0e8d83692382e919c78b7f5fa4406219">has_features</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1ac24fcf8f886eb9175a5401e4d655fe7f">has_features</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>test whether features have been assigned to lhs and rhs</para><para><simplesect kind="return"><para>true if features are assigned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="391" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a28ef59e6dd9055579b2f95fb3a19b2cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CKernel::lhs_equals_rhs</definition>
        <argsstring>()</argsstring>
        <name>lhs_equals_rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>test whether features on lhs and rhs are the same</para><para><simplesect kind="return"><para>true if features are the same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="400" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ad56df090f52a020e34162abd0b0cd0e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::remove_lhs_and_rhs</definition>
        <argsstring>()</argsstring>
        <name>remove_lhs_and_rhs</name>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a3a7bbb2e083d4e94b48fe29674bb4440">remove_lhs_and_rhs</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove lhs and rhs from kernel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="405"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a83df3f7334ac9876caaec761ac55314e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::remove_lhs</definition>
        <argsstring>()</argsstring>
        <name>remove_lhs</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1aeac2a9c172cd47da8ca1bfbfbf2f2ebb">remove_lhs</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a1dc51c02e15cfc74d4242132042aaa9c">remove_lhs</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1a9db4c643c3693aac2f4b74fd3929d1fa">remove_lhs</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a1f4276259986680b40514769edc3e838">remove_lhs</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove lhs from kernel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="408"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ade2b456ef65c988c59847e6a1d682956" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::remove_rhs</definition>
        <argsstring>()</argsstring>
        <name>remove_rhs</name>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1ab8942bd284e5788f92457453c199ca5c">remove_rhs</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a495bec46847655d7f83a8df13c658a54">remove_rhs</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove rhs from kernel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="411"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a13022c6fd98d925b6088b8c81fa65db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>EKernelType</type>
        <definition>virtual EKernelType shogun::CKernel::get_kernel_type</definition>
        <argsstring>()=0</argsstring>
        <name>get_kernel_type</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1ab721553bf67bcb57d3ddc6484ed96a90">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1acc0a9f43de1e6b5af79ba0f50ddc3612">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedCommWordStringKernel_1a01424361e5a6aa6a5d93b6683c5be650">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CTensorProductPairKernel_1a39c11f1613ce9d04f17a9baf46653f19">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparsePolyKernel_1af5c924d7aefac99a3b663307212f2db8">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1a4ec0a4345722f0edd4a868893833fea1">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseGaussianKernel_1aa45c1ab2001a41e2491f5847dabdc985">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleLocalityImprovedStringKernel_1a5e69409ae2711067b32ee05af495fc58">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSigmoidKernel_1a00347503a36aab6027411d50d77e326e">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSalzbergWordStringKernel_1a8439287dbc95674b3232f8b46827908b">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CRegulatoryModulesStringKernel_1aeb04b320c6045878688fbe4ef7860875">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPyramidChi2_1a388003decd1e7e47a76013a5d3faa854">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyMatchWordStringKernel_1a98365e0e79b8f434b0a1c2aec1668f0c">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyMatchStringKernel_1a24e29e89110beba88c9815b2c3e53425">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyKernel_1a1554c76bc3414b5f16c122d0d599212e">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1COligoStringKernel_1a793a64e4299f7d74d2f81cd589c30555">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CMatchWordStringKernel_1aa06408c7bfe6c0c0c6748fc73c434f3f">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLocalityImprovedStringKernel_1a6157b980a14796db0b4cf421c058934e">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLocalAlignmentStringKernel_1af694758426ae9156ff56c586ffffcc5e">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1aa4a4143049af74e68282992af23686c5">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1ae41bc03c58d612fd8459cb93c9ab6fb8">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1a85f5bb6b3f9ba7636d654c48a4e166db">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1abf24d781d2e88eed94ba2a9c3114e404">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CHistogramWordStringKernel_1ab2b223c55c5c3323e9da3da5369d7a9f">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CGaussianShortRealKernel_1aaadec285ba7eac7514b3665596d15ca4">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CGaussianShiftKernel_1a9a7dc0ad29bbb2722b3dbd8c3981b666">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CGaussianKernel_1a8dd96eca2825942e9b5d7d06a39e29f0">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CFixedDegreeStringKernel_1accde84abecc256084d79c20419c50d55">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDistanceKernel_1ac2aa722e93e2cc74ce6122de303eabf7">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDiagKernel_1a894ccf5e3b1178bb9bda48f9eb69714c">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1a24dbeca4e53e07568e299ed7848d3dfa">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CConstKernel_1a496edb6b0eee44b915a22d2302e39f5b">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1a94161bedee641601a04b8eb7fe10d55d">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1aa046cf201bf1367ac0228f182871eb8c">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a02d6ebe495a982fcb498b57bf1ba9154">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CChi2Kernel_1a69713ec2931eaa8ec8dbbeba2dbed460">get_kernel_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CAUCKernel_1ab6c664c9fdb0d68e70ccb26ea6bf0dc8">get_kernel_type</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return what type of kernel we are, e.g. Linear,Polynomial, Gaussian,...</para><para>abstract base method</para><para><simplesect kind="return"><para>kernel type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="420"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ac34f6a2c0b4f0506333b1a50f9304344" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>EFeatureType</type>
        <definition>virtual EFeatureType shogun::CKernel::get_feature_type</definition>
        <argsstring>()=0</argsstring>
        <name>get_feature_type</name>
        <reimplementedby refid="classshogun_1_1CStringKernel_1adc0968c6401fdb158aaff295bd5eaa14">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a73fbe421a95f0b0057784d081930a219">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a49ed4fdc2cab37242f550f63d6b53553">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a84b2f6afcdf5cc0ba44b98d26a124d1b">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a08b2a2b8073f5422356dc022029750b4">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a718d21de3b1e50f90535eb6096c8b67d">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a405910a323b694dd0dfd015536df3501">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a55a4e7a9bc5744c0d7fdc9ee640ddcdf">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1ad4722a519ef5bf6af019c12663bcba8a">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1ae8417c546c8f6f40528700489781867b">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a5592fe5677d713b0fef9f7b9c93477de">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a9fa42c10c1fba88b3a59f33cb6a28bac">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1aa9a453485cda355a7421b253000a8979">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a987b6f3a6901c79f1cab2931e2d829b6">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1adf1e3db134909ecd1a20335b9ce640f3">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1ab3817796beb41d779ab7a53ba1eb3d11">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1af61de803e87cd823ec8b1df6df5ef11c">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a93fa1033f8bafa7eeab42cb7b59904ae">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1af0ccb5a9f9dff68bf3f7c9419c094806">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1ac78201d183854668c4d2b4979eccc3c8">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1aa41acdaa5d8f2d894bcc80a79df20ba0">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a3ed1f6831ac7f8adef82fc8cc0142251">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1af95571fddbc562ccf38623511a8a629c">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1af95571fddbc562ccf38623511a8a629c">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1af95571fddbc562ccf38623511a8a629c">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a5fcc576685a1cf484223424b1c466f07">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a5e3109e755e2455dc50048249ab0d1f6">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a5e3109e755e2455dc50048249ab0d1f6">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a5e3109e755e2455dc50048249ab0d1f6">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a5e3109e755e2455dc50048249ab0d1f6">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a5e3109e755e2455dc50048249ab0d1f6">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedCommWordStringKernel_1a01137763a1eb83f910a18f2356b26535">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1af95571fddbc562ccf38623511a8a629c">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparsePolyKernel_1a89558fb119daa5546cc220909a45ad08">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a5fcc576685a1cf484223424b1c466f07">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseGaussianKernel_1a99cd25bd56e892ee743da84fbeb86a91">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a5e3109e755e2455dc50048249ab0d1f6">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDistanceKernel_1a56216f232e8ad3cd50b9f73fd4145f78">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDiagKernel_1aff8e63d57adfeb6b9946cb6af630ebd5">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1ad9e38034b351e77f0d44ec359079ddf3">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CConstKernel_1a2925b5ae52d661c24ab02caa1702d320">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1aa5486008faa93394d74fe805e70e6d33">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1a6996ac816d3574e573ad1e672299063c">get_feature_type</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a9930e2789fa7f62f87c4827c34475041">get_feature_type</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return feature type the kernel can deal with</para><para>abstract base method</para><para><simplesect kind="return"><para>feature type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="428"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1aa367af5a93ba94084ef5f71330b75a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>EFeatureClass</type>
        <definition>virtual EFeatureClass shogun::CKernel::get_feature_class</definition>
        <argsstring>()=0</argsstring>
        <name>get_feature_class</name>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a36d05c13b46e70f5d9bc8d02945b1750">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a36d05c13b46e70f5d9bc8d02945b1750">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a36d05c13b46e70f5d9bc8d02945b1750">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a4d04c0d9b250155bbcc41cdd8aa31ae3">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a74991d79eaf19b6fe8582e8257a96636">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a74991d79eaf19b6fe8582e8257a96636">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a74991d79eaf19b6fe8582e8257a96636">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a74991d79eaf19b6fe8582e8257a96636">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a74991d79eaf19b6fe8582e8257a96636">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CStringKernel_1a36d05c13b46e70f5d9bc8d02945b1750">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseKernel_1a4d04c0d9b250155bbcc41cdd8aa31ae3">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleKernel_1a74991d79eaf19b6fe8582e8257a96636">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDistanceKernel_1a31092f15d7e067551bcd9a5f0a086a4b">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDiagKernel_1a19fae94e6524cc288a4afcb75646b648">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1a3fa2db8507552b795edc79c5494aee49">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CConstKernel_1ae23ec7117a73c2d118d5ebc96e3d2204">get_feature_class</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a9714b7077fdfbf5db8b59a4e654cef4e">get_feature_class</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return feature class the kernel can deal with</para><para>abstract base method</para><para><simplesect kind="return"><para>feature class </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="436"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1aa552d8e2591297a3fd5aae46bebaf645" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CKernel::set_cache_size</definition>
        <argsstring>(int32_t size)</argsstring>
        <name>set_cache_size</name>
        <param>
          <type>int32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the size of the kernel cache</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>of kernel cache </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="443" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="442" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ac53fab2767fa28a2141294219ddc5ea5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::CKernel::get_cache_size</definition>
        <argsstring>()</argsstring>
        <name>get_cache_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the size of the kernel cache</para><para><simplesect kind="return"><para>size of kernel cache </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="454" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="454" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a29e2f0ad2694cc53a800f3ad8be56077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CKernel::list_kernel</definition>
        <argsstring>()</argsstring>
        <name>list_kernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>list kernel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="572"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1afd958e85909aec22c830e9137fcd7d4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CKernel::has_property</definition>
        <argsstring>(EKernelProperty p)</argsstring>
        <name>has_property</name>
        <param>
          <type>EKernelProperty</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check if kernel has given property</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel property </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if kernel has given property </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="579" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="579" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a46a94bb5789a5edbf1d776610ae3fa04" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::clear_normal</definition>
        <argsstring>()</argsstring>
        <name>clear_normal</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a235ddfbd82304b189fa1825f71b15db2">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a0b5854144a82edfe12864c28d7423d99">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1a9a72dc72196b5bc449f53e6818286d41">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1a102d000f5588f0f081ddd828bdc539bd">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1a33fbfc5e5a7afec0d3148a8792ceb830">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1aba5876ef5381c5b5a2920a96c8eade75">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1aaaa34fe8e12963641c9aa64234f5851a">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1aed2e3d18f4c9d209949500ad13e36757">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1a65971f5de3a9235cc93c55443bedcd29">clear_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a8854708db0659c50c40a0dbaf6e7bb17">clear_normal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>for optimizable kernels, i.e. kernels where the weight vector can be computed explicitly (if it fits into memory) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="584"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1aabe2fe8e2cc8e2846a6aa60c364855ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::add_to_normal</definition>
        <argsstring>(int32_t vector_idx, float64_t weight)</argsstring>
        <name>add_to_normal</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a2593dbf55012ead8c4687d797295ea27">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1ab69a4be934f648af8630b773e51aae8c">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedCommWordStringKernel_1a90a8a575913bd7ce944263f459d4753e">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1a1c39e68d3e91a5135086dac5162f3bf8">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1a9ff8fb6ee76ac97cada0666f01260ce8">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1a1d099f8412e201a32073ae6ed936cc2b">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1aad121badab5bbced9e46fe590b9375db">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1aeff99e198a4d483e7f39ed51ad8c0ce7">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1a714f915c7ade3e9dc169650f93d59490">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1a9cf650c487a3ed78e4e0feb31190651b">add_to_normal</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a16968417bd173dc2dbc40181a9002dc5">add_to_normal</reimplementedby>
        <param>
          <type>int32_t</type>
          <declname>vector_idx</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add vector*factor to &apos;virtual&apos; normal vector</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="591"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1aff5f02561b6963a3c2a2e63b4ac8e43c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>EOptimizationType</type>
        <definition>EOptimizationType shogun::CKernel::get_optimization_type</definition>
        <argsstring>()</argsstring>
        <name>get_optimization_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get optimization type</para><para><simplesect kind="return"><para>optimization type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="597" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="597" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a11ab2c3a02fc458f510f36c2fe503a2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::set_optimization_type</definition>
        <argsstring>(EOptimizationType t)</argsstring>
        <name>set_optimization_type</name>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a5ed88d7063fa74b80db373c11c83ca16">set_optimization_type</reimplementedby>
        <param>
          <type>EOptimizationType</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set optimization type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>optimization type to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="603" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="603" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a4e06bfb908463f9bc28b0c3ae7bdeef3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CKernel::get_is_initialized</definition>
        <argsstring>()</argsstring>
        <name>get_is_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check if optimization is initialized</para><para><simplesect kind="return"><para>if optimization is initialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="609" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="609" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a913db590a96e58fadba2b1e9e34a10d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CKernel::init_optimization</definition>
        <argsstring>(int32_t count, int32_t *IDX, float64_t *weights)</argsstring>
        <name>init_optimization</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a4774c210163f3d56f8c8f523de54cb95">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a19635dc1db533172f973d41851629970">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1a8043d1dc588387f5d75c4185b189a3e2">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1ab5b1ab127021dadca4725398b8ca94d7">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1a5eba69ae9fa2cfb19e02f0ab2929ed13">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1a448cb93bc0b2a72e15d16693268a7e0d">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1a5b61bc964e0b83656e652cde5887d3e2">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1a89ac0ef7edcf2986fab288fca9acec96">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1aed506ac8780b5963a610dddf1a89f70c">init_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1ab5fb9c3c6619dd651b7694bd25ec3d85">init_optimization</reimplementedby>
        <param>
          <type>int32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>IDX</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize optimization</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>count </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IDX</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>weights </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if initializing was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="619"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a1e5b580f5214d5fac1f07c81c2fcb0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CKernel::delete_optimization</definition>
        <argsstring>()</argsstring>
        <name>delete_optimization</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a7d391fbd0f8f16657810d1cbf9a67baa">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1aba6c3a152992376c12ca37d517fd71e0">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1a889fe33b9bc6822eee2a8905e566cdc3">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1ad7a3637e531ace2c8a983c7dc2866990">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1ad280cab0b392664adfe8864dd15988b3">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1ae7d0cc14c872234bd88496c4950887cf">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1abc2db0ec4f33ae9ca5507a44c447060c">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1ab6bad96fb98b9e22926807b45b561342">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1abd8e6c8433ac22482b306a00de2de715">delete_optimization</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a868dd02700f487ca536ecef5c132bc41">delete_optimization</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete optimization</para><para><simplesect kind="return"><para>if deleting was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="625"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a8363fd727262daf47cad9fb4842daa6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CKernel::init_optimization_svm</definition>
        <argsstring>(CSVM *svm)</argsstring>
        <name>init_optimization_svm</name>
        <param>
          <type>CSVM *</type>
          <declname>svm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize optimization</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>svm</parametername>
</parameternamelist>
<parameterdescription>
<para>svm model </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if initializing was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="632"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a614b39452046d4336f09c881360b4af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>float64_t</type>
        <definition>virtual float64_t shogun::CKernel::compute_optimized</definition>
        <argsstring>(int32_t vector_idx)</argsstring>
        <name>compute_optimized</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1acf0e7d7653b61d8de8a39e2558e96feb">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a8a227173d5c38cb4b700cecc5c9c2653">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedCommWordStringKernel_1a1d9f9822580941db454e4c6e44875dc1">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1a9cb045cf0419917bade4994954ce1e88">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1a78ae5eb978b608339a74011f62d57fff">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1a06ee5efa0b742666884c44e43c20d0d3">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1a867310c8dfe2dbdd73aff5812ee97395">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1a13e54ce9c1dfef484793d5cb2ef240a4">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1aa8113914bd6309ded59a9e0a8a375d10">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1aeb6786ceef5d250001f88690f22738b0">compute_optimized</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a48d642a91a56c38852ae3a0ae0927fa4">compute_optimized</reimplementedby>
        <param>
          <type>int32_t</type>
          <declname>vector_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute optimized</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to compute </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>optimized value at given index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="639"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a5fc6a483d63fd0a3460a457cee60f993" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::compute_batch</definition>
        <argsstring>(int32_t num_vec, int32_t *vec_idx, float64_t *target, int32_t num_suppvec, int32_t *IDX, float64_t *alphas, float64_t factor=1.0)</argsstring>
        <name>compute_batch</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a619a810f4889c612357b8ab0227b6c8e">compute_batch</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1abc7cefef2e3a8f4c685d7c8f812b71c0">compute_batch</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1aaee239f30347a014defedb746f6d1833">compute_batch</reimplementedby>
        <param>
          <type>int32_t</type>
          <declname>num_vec</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vec_idx</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_suppvec</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>IDX</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>alphas</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>factor</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes output for a batch of examples in an optimized fashion (favorable if kernel supports it, i.e. has KP_BATCHEVALUATION. to the outputvector target (of length num_vec elements) the output for the examples enumerated in vec_idx are added. therefore make sure that it is initialized with ZERO. the following num_suppvec, IDX, alphas arguments are the number of support vectors, their indices and weights </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="652"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a70a87d5839c56ce67efad04119b16758" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float64_t</type>
        <definition>float64_t shogun::CKernel::get_combined_kernel_weight</definition>
        <argsstring>()</argsstring>
        <name>get_combined_kernel_weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get combined kernel weight</para><para><simplesect kind="return"><para>combined kernel weight </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="658" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="658" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a23ec2b5c3d824b3f148c905bfbafdebf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CKernel::set_combined_kernel_weight</definition>
        <argsstring>(float64_t nw)</argsstring>
        <name>set_combined_kernel_weight</name>
        <param>
          <type>float64_t</type>
          <declname>nw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set combined kernel weight</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nw</parametername>
</parameternamelist>
<parameterdescription>
<para>new combined kernel weight </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="664" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="664" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a0c2a6eb4ed24590be0cc72a5871f848d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int32_t</type>
        <definition>virtual int32_t shogun::CKernel::get_num_subkernels</definition>
        <argsstring>()</argsstring>
        <name>get_num_subkernels</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a3d5644a319abf64a7e9cf5909802e124">get_num_subkernels</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1ab1756d3ab457f229612c93179b54fe4f">get_num_subkernels</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a7c23fc647382e2262139211ad4c4d27f">get_num_subkernels</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of subkernels</para><para><simplesect kind="return"><para>number of subkernels </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="670"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a9a0bbc983ee6c2050ee4d5c814496924" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::compute_by_subkernel</definition>
        <argsstring>(int32_t vector_idx, float64_t *subkernel_contrib)</argsstring>
        <name>compute_by_subkernel</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1ac744f94f465aac0a279b3f0f22c644c5">compute_by_subkernel</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a3e2f4641a240fe0e59bbf60508c14650">compute_by_subkernel</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a58f878769d71edfb90e2152c219da76a">compute_by_subkernel</reimplementedby>
        <param>
          <type>int32_t</type>
          <declname>vector_idx</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>subkernel_contrib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute by subkernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subkernel_contrib</parametername>
</parameternamelist>
<parameterdescription>
<para>subkernel contribution </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="678"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1aed423e68a226ad9f717d05f54cf9c854" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const float64_t *</type>
        <definition>virtual const float64_t* shogun::CKernel::get_subkernel_weights</definition>
        <argsstring>(int32_t &amp;num_weights)</argsstring>
        <name>get_subkernel_weights</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a5ca7a5a07cd62c69b04a57d2479392c3">get_subkernel_weights</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a2596d29d0fd0de1118c6cdd29d1c7dbb">get_subkernel_weights</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1a4a29899d6a5383eb5a6c087b67b236ba">get_subkernel_weights</reimplementedby>
        <param>
          <type>int32_t &amp;</type>
          <declname>num_weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get subkernel weights</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>number of weights will be stored here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>subkernel weights </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="685"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1af1e586162ba4aadc7c0143c1c8819f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CKernel::set_subkernel_weights</definition>
        <argsstring>(float64_t *weights, int32_t num_weights)</argsstring>
        <name>set_subkernel_weights</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1af9a3e90182e2e55362261d09280eb1f7">set_subkernel_weights</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a6dac0da76b26594d9b4a4a6eda8b51bd">set_subkernel_weights</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1abf3fdd4fc2310e86030580c6eaee27f1">set_subkernel_weights</reimplementedby>
        <param>
          <type>float64_t *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set subkernel weights</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>subkernel weights </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>number of weights </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="693"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classshogun_1_1CKernel_1abd52ab8944c2fd9efd45e46dee4f27ee" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CKernel::set_property</definition>
        <argsstring>(EKernelProperty p)</argsstring>
        <name>set_property</name>
        <param>
          <type>EKernelProperty</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set property</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel property to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="701" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="700" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a83025690228a1d47e4d43a8ed4304749" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CKernel::unset_property</definition>
        <argsstring>(EKernelProperty p)</argsstring>
        <name>unset_property</name>
        <param>
          <type>EKernelProperty</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unset property</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel property to unset </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="710" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="709" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ad2d2934daf162bfb010536c1eefd162c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CKernel::set_is_initialized</definition>
        <argsstring>(bool p_init)</argsstring>
        <name>set_is_initialized</name>
        <param>
          <type>bool</type>
          <declname>p_init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set is initialized</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_init</parametername>
</parameternamelist>
<parameterdescription>
<para>if optimization shall be set to initialized </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="718" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="718" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1ab1765c43943a668fea15971d08ff1229" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>float64_t</type>
        <definition>virtual float64_t shogun::CKernel::compute</definition>
        <argsstring>(int32_t x, int32_t y)=0</argsstring>
        <name>compute</name>
        <reimplementedby refid="classshogun_1_1CWeightedDegreeStringKernel_1a76d12963d24be097cd0e1beac527725f">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CWeightedDegreePositionStringKernel_1a274b20241a1501c4639daf2d633ee7d0">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CTensorProductPairKernel_1ab31299c35c2b200726d44916113767e8">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparsePolyKernel_1a3c708e3ae072b609f3c14271d07df639">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseLinearKernel_1ad82035a6d4e0be272511ce11a06ce583">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSparseGaussianKernel_1a2cb3e07ce3eff849ac1d90cd360409e4">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSimpleLocalityImprovedStringKernel_1ae4913d7b50987c87548bd1f537b3f215">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSigmoidKernel_1ad3b48aba99ad432ad9f5ffba05679238">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CSalzbergWordStringKernel_1af01ad9e3356756f975ddc982efa6ca17">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CRegulatoryModulesStringKernel_1ad5de0ae40641bc40e800d6d6b5da5009">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPyramidChi2_1a8f678f90c03cf5e8cc1613d02b866342">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyMatchWordStringKernel_1ad965b4f3fa51c35d0731354ed469d69d">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyMatchStringKernel_1aca200ea3d2a392a827ddb40bbd93619c">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CPolyKernel_1a0e25083379f8ab3f88f4bf8fca3674a8">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1COligoStringKernel_1a5f14fe960d170b2c87595e0a5391c651">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CMatchWordStringKernel_1a803ef8baf61fcd0391daddd155e91fc1">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLocalityImprovedStringKernel_1a4e52168aab50a707ae6ad7df41957331">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLocalAlignmentStringKernel_1aba2197a7e903e3122e8d0cc852fc2053">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearWordKernel_1a38e408a5f207941c9efd8ecd18c082fd">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearStringKernel_1a6014fc95b1e1091ec65660c3f17a1e8b">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearKernel_1a686821c2d68005195ef5216ad39c11dc">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CLinearByteKernel_1a17369289878f35bd5dcf64e7018df7aa">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CHistogramWordStringKernel_1a586cf732241aeb485bf738c29be23537">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CGaussianShortRealKernel_1a1228c1168a1cae05bdb429232db1896b">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CGaussianShiftKernel_1a41441cd531bf38c016ae5dbd302599d1">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CGaussianKernel_1a8f64007dd75011542b99dd97e2fe53b1">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CFixedDegreeStringKernel_1a5440bd8bd624250b13574f62d79d4ca6">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDistanceKernel_1a4944e287cb4e41fe1d516d47d3eabe50">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CDiagKernel_1a72770bf3e9494a717285a70b14f97c83">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCustomKernel_1aa404af77703fc111b833ea612244b89d">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CConstKernel_1a75f7806e661ec86897f8ecc56f882859">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommWordStringKernel_1af8a28fb17db8858fc6912bc6dfc68581">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCommUlongStringKernel_1a29e889645846b9ca8024cd33425bf025">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CCombinedKernel_1acd0b4ccc487fcb6dc2dd1a7843dd9d16">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CChi2Kernel_1a2bcabaf05a872ecd79fa221c39f193ba">compute</reimplementedby>
        <reimplementedby refid="classshogun_1_1CAUCKernel_1a657ba7cf37fafa6fd789e029341d7c78">compute</reimplementedby>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute kernel function for features a and b idx_{a,b} denote the index of the feature vectors in the corresponding feature object</para><para>abstract base method</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>index a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>index b </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>computed kernel function at indices a,b </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="730"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CKernel_1a813bcdc6778b8c0b4c662a5209a68776" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::CKernel::compute_row_start</definition>
        <argsstring>(int64_t offs, int32_t n, bool symmetric)</argsstring>
        <name>compute_row_start</name>
        <param>
          <type>int64_t</type>
          <declname>offs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>symmetric</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute row start offset for parallel kernel matrix computation</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offs</parametername>
</parameternamelist>
<parameterdescription>
<para>offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symmetric</parametername>
</parameternamelist>
<parameterdescription>
<para>whether matrix is symmetric </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="740" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="739" bodyend="749"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classshogun_1_1CKernel_1a52f510cf6ece0052527f31ad2274e855" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void *</type>
        <definition>static void* shogun::CKernel::get_kernel_matrix_helper</definition>
        <argsstring>(void *p)</argsstring>
        <name>get_kernel_matrix_helper</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>helper for computing the kernel matrix in a parallel way</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>thread parameters </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="758" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="757" bodyend="805"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The Kernel base class. </para>    </briefdescription>
    <detaileddescription>
<para>Non-mathematically spoken, a kernel is a function that given two input objects <formula id="8">${\bf x}$</formula> and <formula id="24">${\bf x&apos;}$</formula> returns a score describing the similarity of the vectors. The score should be larger when the objects are more similar.</para><para>It can be defined as</para><para><formula id="25">\[ k({\bf x},{\bf x&apos;})= \Phi_k({\bf x})\cdot \Phi_k({\bf x&apos;}) \]</formula></para><para>where <formula id="26">$\Phi$</formula> maps the objects into some potentially high dimensional feature space.</para><para>Apart from the input features, the base kernel takes only one argument (the size of the kernel cache) that is used to efficiently train kernel-machines like e.g. SVMs.</para><para>In case you would like to define your own kernel, you only have to define a new <ref refid="classshogun_1_1CKernel_1ab1765c43943a668fea15971d08ff1229" kindref="member">compute()</ref> function (and the kernel name via get_name() and the kernel type <ref refid="classshogun_1_1CKernel_1a13022c6fd98d925b6088b8c81fa65db9" kindref="member">get_kernel_type()</ref>). A good example to look at is the GaussianKernel. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="153">
        <label>shogun::CDiagKernel</label>
        <link refid="classshogun_1_1CDiagKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="114">
        <label>shogun::CGaussianShiftKernel</label>
        <link refid="classshogun_1_1CGaussianShiftKernel"/>
        <childnode refid="113" relation="public-inheritance">
        </childnode>
      </node>
      <node id="142">
        <label>shogun::CCommWordStringKernel</label>
        <link refid="classshogun_1_1CCommWordStringKernel"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="136">
        <label>shogun::CPolyMatchStringKernel</label>
        <link refid="classshogun_1_1CPolyMatchStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="108">
        <label>shogun::CKernel</label>
        <link refid="classshogun_1_1CKernel"/>
      </node>
      <node id="149">
        <label>shogun::CCommUlongStringKernel</label>
        <link refid="classshogun_1_1CCommUlongStringKernel"/>
        <childnode refid="148" relation="public-inheritance">
        </childnode>
      </node>
      <node id="152">
        <label>shogun::CCustomKernel</label>
        <link refid="classshogun_1_1CCustomKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="123">
        <label>shogun::CLinearWordKernel</label>
        <link refid="classshogun_1_1CLinearWordKernel"/>
        <childnode refid="121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="134">
        <label>shogun::CLocalityImprovedStringKernel</label>
        <link refid="classshogun_1_1CLocalityImprovedStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="126">
        <label>shogun::CSparseKernel&lt; float64_t &gt;</label>
        <link refid="classshogun_1_1CSparseKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="127">
        <label>shogun::CSparseGaussianKernel</label>
        <link refid="classshogun_1_1CSparseGaussianKernel"/>
        <childnode refid="126" relation="public-inheritance">
        </childnode>
      </node>
      <node id="151">
        <label>shogun::CConstKernel</label>
        <link refid="classshogun_1_1CConstKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="121">
        <label>shogun::CSimpleKernel&lt; uint16_t &gt;</label>
        <link refid="classshogun_1_1CSimpleKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="128">
        <label>shogun::CSparseLinearKernel</label>
        <link refid="classshogun_1_1CSparseLinearKernel"/>
        <childnode refid="126" relation="public-inheritance">
        </childnode>
      </node>
      <node id="124">
        <label>shogun::CSimpleKernel&lt; uint8_t &gt;</label>
        <link refid="classshogun_1_1CSimpleKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="139">
        <label>shogun::CWeightedDegreePositionStringKernel</label>
        <link refid="classshogun_1_1CWeightedDegreePositionStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="125">
        <label>shogun::CLinearByteKernel</label>
        <link refid="classshogun_1_1CLinearByteKernel"/>
        <childnode refid="124" relation="public-inheritance">
        </childnode>
      </node>
      <node id="143">
        <label>shogun::CWeightedCommWordStringKernel</label>
        <link refid="classshogun_1_1CWeightedCommWordStringKernel"/>
        <childnode refid="142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="109">
        <label>shogun::CSimpleKernel&lt; float32_t &gt;</label>
        <link refid="classshogun_1_1CSimpleKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="110">
        <label>shogun::CGaussianShortRealKernel</label>
        <link refid="classshogun_1_1CGaussianShortRealKernel"/>
        <childnode refid="109" relation="public-inheritance">
        </childnode>
      </node>
      <node id="147">
        <label>shogun::CSalzbergWordStringKernel</label>
        <link refid="classshogun_1_1CSalzbergWordStringKernel"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>shogun::CLinearKernel</label>
        <link refid="classshogun_1_1CLinearKernel"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="155">
        <label>shogun::CSimpleKernel&lt; ST &gt;</label>
        <link refid="classshogun_1_1CSimpleKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="131">
        <label>shogun::CFixedDegreeStringKernel</label>
        <link refid="classshogun_1_1CFixedDegreeStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="135">
        <label>shogun::COligoStringKernel</label>
        <link refid="classshogun_1_1COligoStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="112">
        <label>shogun::CChi2Kernel</label>
        <link refid="classshogun_1_1CChi2Kernel"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="116">
        <label>shogun::CPolyKernel</label>
        <link refid="classshogun_1_1CPolyKernel"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="122">
        <label>shogun::CAUCKernel</label>
        <link refid="classshogun_1_1CAUCKernel"/>
        <childnode refid="121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="137">
        <label>shogun::CRegulatoryModulesStringKernel</label>
        <link refid="classshogun_1_1CRegulatoryModulesStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="145">
        <label>shogun::CMatchWordStringKernel</label>
        <link refid="classshogun_1_1CMatchWordStringKernel"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="140">
        <label>shogun::CWeightedDegreeStringKernel</label>
        <link refid="classshogun_1_1CWeightedDegreeStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="118">
        <label>shogun::CSigmoidKernel</label>
        <link refid="classshogun_1_1CSigmoidKernel"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="119">
        <label>shogun::CSimpleKernel&lt; int32_t &gt;</label>
        <link refid="classshogun_1_1CSimpleKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="156">
        <label>shogun::CSparseKernel&lt; ST &gt;</label>
        <link refid="classshogun_1_1CSparseKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="150">
        <label>shogun::CCombinedKernel</label>
        <link refid="classshogun_1_1CCombinedKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="130">
        <label>shogun::CStringKernel&lt; char &gt;</label>
        <link refid="classshogun_1_1CStringKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="141">
        <label>shogun::CStringKernel&lt; uint16_t &gt;</label>
        <link refid="classshogun_1_1CStringKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="138">
        <label>shogun::CSimpleLocalityImprovedStringKernel</label>
        <link refid="classshogun_1_1CSimpleLocalityImprovedStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="154">
        <label>shogun::CDistanceKernel</label>
        <link refid="classshogun_1_1CDistanceKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="146">
        <label>shogun::CPolyMatchWordStringKernel</label>
        <link refid="classshogun_1_1CPolyMatchWordStringKernel"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="111">
        <label>shogun::CSimpleKernel&lt; float64_t &gt;</label>
        <link refid="classshogun_1_1CSimpleKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="133">
        <label>shogun::CLocalAlignmentStringKernel</label>
        <link refid="classshogun_1_1CLocalAlignmentStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="120">
        <label>shogun::CTensorProductPairKernel</label>
        <link refid="classshogun_1_1CTensorProductPairKernel"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="144">
        <label>shogun::CHistogramWordStringKernel</label>
        <link refid="classshogun_1_1CHistogramWordStringKernel"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="113">
        <label>shogun::CGaussianKernel</label>
        <link refid="classshogun_1_1CGaussianKernel"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="117">
        <label>shogun::CPyramidChi2</label>
        <link refid="classshogun_1_1CPyramidChi2"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="129">
        <label>shogun::CSparsePolyKernel</label>
        <link refid="classshogun_1_1CSparsePolyKernel"/>
        <childnode refid="126" relation="public-inheritance">
        </childnode>
      </node>
      <node id="132">
        <label>shogun::CLinearStringKernel</label>
        <link refid="classshogun_1_1CLinearStringKernel"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="148">
        <label>shogun::CStringKernel&lt; uint64_t &gt;</label>
        <link refid="classshogun_1_1CStringKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="157">
        <label>shogun::CStringKernel&lt; ST &gt;</label>
        <link refid="classshogun_1_1CStringKernel"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="158">
        <label>shogun::CKernel</label>
        <link refid="classshogun_1_1CKernel"/>
        <childnode refid="159" relation="usage">
          <edgelabel>normalizer</edgelabel>
        </childnode>
      </node>
      <node id="159">
        <label>shogun::CKernelNormalizer</label>
        <link refid="classshogun_1_1CKernelNormalizer"/>
      </node>
    </collaborationgraph>
    <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" line="145" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/Kernel.h" bodystart="144" bodyend="959"/>
    <listofallmembers>
      <member refid="classshogun_1_1CKernel_1aabe2fe8e2cc8e2846a6aa60c364855ba" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>add_to_normal</name></member>
      <member refid="classshogun_1_1CKernel_1ae1dc0bbc6ea973b18dcba2e4fac486b8" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>cache_size</name></member>
      <member refid="classshogun_1_1CKernel_1aaa5c880392db119ef5bf4518b1117fda" prot="private" virt="non-virtual"><scope>shogun::CKernel</scope><name>CAvgDiagKernelNormalizer</name></member>
      <member refid="classshogun_1_1CKernel_1adffb9d7044cf61b8ba443614925ecf59" prot="private" virt="non-virtual"><scope>shogun::CKernel</scope><name>CDiceKernelNormalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a6c778aee34bdcd2779880c95fe49a946" prot="private" virt="non-virtual"><scope>shogun::CKernel</scope><name>CFirstElementKernelNormalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a77872c37fccc650cd7f918b253bbeb68" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>CKernel</name></member>
      <member refid="classshogun_1_1CKernel_1aa2b1f73c8585adee444bb99a98e63a5a" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>CKernel</name></member>
      <member refid="classshogun_1_1CKernel_1a70cfe05692f9ee159aeb0dfcb8d2f5c3" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>CKernel</name></member>
      <member refid="classshogun_1_1CKernel_1ae593c118eda68888ad76a88af0367c6e" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>cleanup</name></member>
      <member refid="classshogun_1_1CKernel_1a46a94bb5789a5edbf1d776610ae3fa04" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>clear_normal</name></member>
      <member refid="classshogun_1_1CKernel_1a105026c07a74e493c1711dad83b335f1" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>combined_kernel_weight</name></member>
      <member refid="classshogun_1_1CKernel_1ab1765c43943a668fea15971d08ff1229" prot="protected" virt="pure-virtual"><scope>shogun::CKernel</scope><name>compute</name></member>
      <member refid="classshogun_1_1CKernel_1a5fc6a483d63fd0a3460a457cee60f993" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>compute_batch</name></member>
      <member refid="classshogun_1_1CKernel_1a9a0bbc983ee6c2050ee4d5c814496924" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>compute_by_subkernel</name></member>
      <member refid="classshogun_1_1CKernel_1a614b39452046d4336f09c881360b4af7" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>compute_optimized</name></member>
      <member refid="classshogun_1_1CKernel_1a813bcdc6778b8c0b4c662a5209a68776" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>compute_row_start</name></member>
      <member refid="classshogun_1_1CKernel_1a047ac6f2f2c0bac760e51048d40a4ac9" prot="private" virt="non-virtual"><scope>shogun::CKernel</scope><name>CRidgeKernelNormalizer</name></member>
      <member refid="classshogun_1_1CKernel_1aa5aeba20e2ab84cda65c02197024923f" prot="private" virt="non-virtual"><scope>shogun::CKernel</scope><name>CSqrtDiagKernelNormalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a016adb4d6eda97d16d59c7bed552d60a" prot="private" virt="non-virtual"><scope>shogun::CKernel</scope><name>CTanimotoKernelNormalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a1a4040a662dad08c6697f21e62693837" prot="private" virt="non-virtual"><scope>shogun::CKernel</scope><name>CVarianceKernelNormalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a1e5b580f5214d5fac1f07c81c2fcb0ad" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>delete_optimization</name></member>
      <member refid="classshogun_1_1CKernel_1ac53fab2767fa28a2141294219ddc5ea5" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_cache_size</name></member>
      <member refid="classshogun_1_1CKernel_1a70a87d5839c56ce67efad04119b16758" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_combined_kernel_weight</name></member>
      <member refid="classshogun_1_1CKernel_1aa367af5a93ba94084ef5f71330b75a24" prot="public" virt="pure-virtual"><scope>shogun::CKernel</scope><name>get_feature_class</name></member>
      <member refid="classshogun_1_1CKernel_1ac34f6a2c0b4f0506333b1a50f9304344" prot="public" virt="pure-virtual"><scope>shogun::CKernel</scope><name>get_feature_type</name></member>
      <member refid="classshogun_1_1CKernel_1a4e06bfb908463f9bc28b0c3ae7bdeef3" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_is_initialized</name></member>
      <member refid="classshogun_1_1CKernel_1a1f4f83d3d7bc7e34336c4c262ca95570" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_kernel_matrix</name></member>
      <member refid="classshogun_1_1CKernel_1a19c9666c242a0b019f645593e2c63e9f" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_kernel_matrix</name></member>
      <member refid="classshogun_1_1CKernel_1a52f510cf6ece0052527f31ad2274e855" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_kernel_matrix_helper</name></member>
      <member refid="classshogun_1_1CKernel_1a13022c6fd98d925b6088b8c81fa65db9" prot="public" virt="pure-virtual"><scope>shogun::CKernel</scope><name>get_kernel_type</name></member>
      <member refid="classshogun_1_1CKernel_1a0c71c8eb3ac024069c6bd9ff61ec0c39" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_lhs</name></member>
      <member refid="classshogun_1_1CKernel_1a7aacb7938ed0f98f1fd14253bc1e9b31" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>get_normalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a0c2a6eb4ed24590be0cc72a5871f848d" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>get_num_subkernels</name></member>
      <member refid="classshogun_1_1CKernel_1af350caa123740b96ecaa69fd28454a65" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>get_num_vec_lhs</name></member>
      <member refid="classshogun_1_1CKernel_1a7e45a8f4fc00c39b7d54dd37e001bed9" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>get_num_vec_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1aff5f02561b6963a3c2a2e63b4ac8e43c" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_optimization_type</name></member>
      <member refid="classshogun_1_1CKernel_1abfd608e83f9839f8ca626ad793e452b0" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>get_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1aed423e68a226ad9f717d05f54cf9c854" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>get_subkernel_weights</name></member>
      <member refid="classshogun_1_1CKernel_1a6db0206d0b4fe30bf64b93d8eed3b8b7" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>has_features</name></member>
      <member refid="classshogun_1_1CKernel_1afd958e85909aec22c830e9137fcd7d4c" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>has_property</name></member>
      <member refid="classshogun_1_1CKernel_1a527940658a4f7a2012cb40f2c39e23ce" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>init</name></member>
      <member refid="classshogun_1_1CKernel_1aeb0378209b4c63b7ae60596540ebed80" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>init_normalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a913db590a96e58fadba2b1e9e34a10d6" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>init_optimization</name></member>
      <member refid="classshogun_1_1CKernel_1a8363fd727262daf47cad9fb4842daa6c" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>init_optimization_svm</name></member>
      <member refid="classshogun_1_1CKernel_1ab4cbfe2c04238e33322647e22960c246" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>kernel</name></member>
      <member refid="classshogun_1_1CKernel_1a01f88ea73f221b5a768e1c67c731a763" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>kernel_matrix</name></member>
      <member refid="classshogun_1_1CKernel_1ae7bc6b54431a07498f0b6ef4ab087297" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>lhs</name></member>
      <member refid="classshogun_1_1CKernel_1a28ef59e6dd9055579b2f95fb3a19b2cc" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>lhs_equals_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1a29e2f0ad2694cc53a800f3ad8be56077" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>list_kernel</name></member>
      <member refid="classshogun_1_1CKernel_1a93221d864190e13c4749793d4ae7f0b0" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>load</name></member>
      <member refid="classshogun_1_1CKernel_1acbe5200168cf7ade8c30f1a1eb40469b" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>normalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a0d5cfafbf2afd0260857089504262dd6" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>num_lhs</name></member>
      <member refid="classshogun_1_1CKernel_1a6e741d3d75546bdc15bfb5be41aa9b96" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>num_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1ad96fd157602292f3d88ebfef3077be00" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>opt_type</name></member>
      <member refid="classshogun_1_1CKernel_1a5b4d22f0cd136296f6e9aee3364607d6" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>optimization_initialized</name></member>
      <member refid="classshogun_1_1CKernel_1a16638a9afae47d4c2e36e20b2dff92f5" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>properties</name></member>
      <member refid="classshogun_1_1CKernel_1a83df3f7334ac9876caaec761ac55314e" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>remove_lhs</name></member>
      <member refid="classshogun_1_1CKernel_1ad56df090f52a020e34162abd0b0cd0e5" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>remove_lhs_and_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1ade2b456ef65c988c59847e6a1d682956" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>remove_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1a5dab35da7f429dd860f59d9a98960a3f" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>rhs</name></member>
      <member refid="classshogun_1_1CKernel_1ab1241d4ce37e5352cee96f6b456439c4" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>save</name></member>
      <member refid="classshogun_1_1CKernel_1aa552d8e2591297a3fd5aae46bebaf645" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>set_cache_size</name></member>
      <member refid="classshogun_1_1CKernel_1a23ec2b5c3d824b3f148c905bfbafdebf" prot="public" virt="non-virtual"><scope>shogun::CKernel</scope><name>set_combined_kernel_weight</name></member>
      <member refid="classshogun_1_1CKernel_1ad2d2934daf162bfb010536c1eefd162c" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>set_is_initialized</name></member>
      <member refid="classshogun_1_1CKernel_1a0a3fc1096d6e00f56ca0f11cadd12ab7" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>set_normalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a11ab2c3a02fc458f510f36c2fe503a2c" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>set_optimization_type</name></member>
      <member refid="classshogun_1_1CKernel_1abd52ab8944c2fd9efd45e46dee4f27ee" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>set_property</name></member>
      <member refid="classshogun_1_1CKernel_1af1e586162ba4aadc7c0143c1c8819f1a" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>set_subkernel_weights</name></member>
      <member refid="classshogun_1_1CKernel_1a83025690228a1d47e4d43a8ed4304749" prot="protected" virt="non-virtual"><scope>shogun::CKernel</scope><name>unset_property</name></member>
      <member refid="classshogun_1_1CKernel_1ac0b3e1e0d02e446954712d8245cd68c3" prot="public" virt="virtual"><scope>shogun::CKernel</scope><name>~CKernel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
