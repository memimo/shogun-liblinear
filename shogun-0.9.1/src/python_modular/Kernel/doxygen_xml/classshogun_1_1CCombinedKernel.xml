<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classshogun_1_1CCombinedKernel" kind="class" prot="public">
    <compoundname>shogun::CCombinedKernel</compoundname>
    <basecompoundref refid="classshogun_1_1CKernel" prot="public" virt="non-virtual">shogun::CKernel</basecompoundref>
    <includes local="no">CombinedKernel.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classshogun_1_1CCombinedKernel_1a3bf3e1b0a750d65ce1ef385891465ddf" prot="protected" static="no" mutable="no">
        <type>CList&lt; <ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> * &gt; *</type>
        <definition>CList&lt;CKernel*&gt;* shogun::CCombinedKernel::kernel_list</definition>
        <argsstring></argsstring>
        <name>kernel_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>list of kernels </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="435" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CCombinedKernel_1a01e496f9d2a2d1abed2a73af65e5be86" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t shogun::CCombinedKernel::sv_count</definition>
        <argsstring></argsstring>
        <name>sv_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>support vector count </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="437" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CCombinedKernel_1a84bd18107be976ce2c2c31f628070d4a" prot="protected" static="no" mutable="no">
        <type>int32_t *</type>
        <definition>int32_t* shogun::CCombinedKernel::sv_idx</definition>
        <argsstring></argsstring>
        <name>sv_idx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>support vector index </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="439" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CCombinedKernel_1a674843075d46417d8da8e9af4f09c9d4" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CCombinedKernel::sv_weight</definition>
        <argsstring></argsstring>
        <name>sv_weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>support vector weights </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="441" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CCombinedKernel_1a92c72e80dd2c916887ec5cf3f7181abe" prot="protected" static="no" mutable="no">
        <type>float64_t *</type>
        <definition>float64_t* shogun::CCombinedKernel::subkernel_weights_buffer</definition>
        <argsstring></argsstring>
        <name>subkernel_weights_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>subkernel weights buffers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="443" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CCombinedKernel_1a5a9c162880fb9f924f98ef649e962dd7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CCombinedKernel::append_subkernel_weights</definition>
        <argsstring></argsstring>
        <name>append_subkernel_weights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if subkernel weights are appended </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="445" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshogun_1_1CCombinedKernel_1ac4a3fcf7f15c9712bdb823219c7264fa" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool shogun::CCombinedKernel::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether kernel is ready to be used </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="447" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a07d61f04ab036cccb0be04f5ab18a37b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>shogun::CCombinedKernel::CCombinedKernel</definition>
        <argsstring>(int32_t size=10, bool append_subkernel_weights=false)</argsstring>
        <name>CCombinedKernel</name>
        <param>
          <type>int32_t</type>
          <declname>size</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>append_subkernel_weights</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>cache size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append_subkernel_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>if subkernel weights shall be appended </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="55"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1ad96402145de478eb240b0cd79df8b75c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual shogun::CCombinedKernel::~CCombinedKernel</definition>
        <argsstring>()</argsstring>
        <name>~CCombinedKernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="57"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a526c0f277971aea22aaf2f7f599f949d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CCombinedKernel::init</definition>
        <argsstring>(CFeatures *lhs, CFeatures *rhs)</argsstring>
        <name>init</name>
        <reimplements refid="classshogun_1_1CKernel_1a527940658a4f7a2012cb40f2c39e23ce">init</reimplements>
        <param>
          <type>CFeatures *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>CFeatures *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize kernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>features of left-hand side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>features of right-hand side </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if initializing was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="65"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a7f557aee80655ab05bb5a2843c3ca0bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <reimplements refid="classshogun_1_1CKernel_1ae593c118eda68888ad76a88af0367c6e">cleanup</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clean up kernel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="68"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a02d6ebe495a982fcb498b57bf1ba9154" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>EKernelType</type>
        <definition>virtual EKernelType shogun::CCombinedKernel::get_kernel_type</definition>
        <argsstring>()</argsstring>
        <name>get_kernel_type</name>
        <reimplements refid="classshogun_1_1CKernel_1a13022c6fd98d925b6088b8c81fa65db9">get_kernel_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return what type of kernel we are</para><para><simplesect kind="return"><para>kernel type COMBINED </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="75" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a9930e2789fa7f62f87c4827c34475041" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>EFeatureType</type>
        <definition>virtual EFeatureType shogun::CCombinedKernel::get_feature_type</definition>
        <argsstring>()</argsstring>
        <name>get_feature_type</name>
        <reimplements refid="classshogun_1_1CKernel_1ac34f6a2c0b4f0506333b1a50f9304344">get_feature_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return feature type the kernel can deal with</para><para><simplesect kind="return"><para>feature type UNKNOWN </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="84" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a9714b7077fdfbf5db8b59a4e654cef4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>EFeatureClass</type>
        <definition>virtual EFeatureClass shogun::CCombinedKernel::get_feature_class</definition>
        <argsstring>()</argsstring>
        <name>get_feature_class</name>
        <reimplements refid="classshogun_1_1CKernel_1aa367af5a93ba94084ef5f71330b75a24">get_feature_class</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return feature class the kernel can deal with</para><para><simplesect kind="return"><para>feature class COMBINED </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="93" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1aa4b0383ba7dab832bb1fbaf57ea168ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* shogun::CCombinedKernel::get_name</definition>
        <argsstring>() const </argsstring>
        <name>get_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the kernel&apos;s name</para><para><simplesect kind="return"><para>name Combined </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="101" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a3f6cf3b9f898aecfc3bd53ce02ce228a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CCombinedKernel::list_kernels</definition>
        <argsstring>()</argsstring>
        <name>list_kernels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>list kernels </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="104"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a43bd54078ce4a8c2ebb6090825087c15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
        <definition>CKernel* shogun::CCombinedKernel::get_first_kernel</definition>
        <argsstring>()</argsstring>
        <name>get_first_kernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get first kernel</para><para><simplesect kind="return"><para>first kernel </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="111" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a642517b55f9a1c98530239ce45b70c95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
        <definition>CKernel* shogun::CCombinedKernel::get_first_kernel</definition>
        <argsstring>(CListElement&lt; CKernel * &gt; *&amp;current)</argsstring>
        <name>get_first_kernel</name>
        <param>
          <type>CListElement&lt; <ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> * &gt; *&amp;</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get first kernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>first kernel </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="121" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a8344cfaba6df2e72e55ec1c06de06bb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
        <definition>CKernel* shogun::CCombinedKernel::get_kernel</definition>
        <argsstring>(int32_t idx)</argsstring>
        <name>get_kernel</name>
        <param>
          <type>int32_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get kernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>kernel at index idx </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="131" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="130" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a3c92322907aa8eb9ea9fbb2909225e96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
        <definition>CKernel* shogun::CCombinedKernel::get_last_kernel</definition>
        <argsstring>()</argsstring>
        <name>get_last_kernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get last kernel</para><para><simplesect kind="return"><para>last kernel </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="146" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1ac1e0678f02cb5373c89c761bdbfdd746" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
        <definition>CKernel* shogun::CCombinedKernel::get_next_kernel</definition>
        <argsstring>()</argsstring>
        <name>get_next_kernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get next kernel</para><para><simplesect kind="return"><para>next kernel </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="155" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a03af5a5cc8540288c694ed1a8dbbf400" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
        <definition>CKernel* shogun::CCombinedKernel::get_next_kernel</definition>
        <argsstring>(CListElement&lt; CKernel * &gt; *&amp;current)</argsstring>
        <name>get_next_kernel</name>
        <param>
          <type>CListElement&lt; <ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> * &gt; *&amp;</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get next kernel multi-thread safe</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next kernel </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="165" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a355c58ff466cf84f4420478335e62b11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CCombinedKernel::insert_kernel</definition>
        <argsstring>(CKernel *k)</argsstring>
        <name>insert_kernel</name>
        <param>
          <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>insert kernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if inserting was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="175" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="174" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a2d39411343af9eac0c544051f0ffc8e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CCombinedKernel::append_kernel</definition>
        <argsstring>(CKernel *k)</argsstring>
        <name>append_kernel</name>
        <param>
          <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>append kernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if appending was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="191" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1af3649b5c66de8063fee6e85f426980e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CCombinedKernel::delete_kernel</definition>
        <argsstring>()</argsstring>
        <name>delete_kernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete kernel</para><para><simplesect kind="return"><para>if deleting was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="207" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="206" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1ab5ecd4ab329cf29d7f4993b85e0b583f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CCombinedKernel::get_append_subkernel_weights</definition>
        <argsstring>()</argsstring>
        <name>get_append_subkernel_weights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check if subkernel weights are appended</para><para><simplesect kind="return"><para>if subkernel weigths are appended </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="225" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a7c23fc647382e2262139211ad4c4d27f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int32_t</type>
        <definition>int32_t shogun::CCombinedKernel::get_num_subkernels</definition>
        <argsstring>()</argsstring>
        <name>get_num_subkernels</name>
        <reimplements refid="classshogun_1_1CKernel_1a0c2a6eb4ed24590be0cc72a5871f848d">get_num_subkernels</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of subkernels</para><para><simplesect kind="return"><para>number of subkernels </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="234" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="233" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1ac24fcf8f886eb9175a5401e4d655fe7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CCombinedKernel::has_features</definition>
        <argsstring>()</argsstring>
        <name>has_features</name>
        <reimplements refid="classshogun_1_1CKernel_1a6db0206d0b4fe30bf64b93d8eed3b8b7">has_features</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>test whether features have been assigned to lhs and rhs</para><para><simplesect kind="return"><para>true if features are assigned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="258" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a1f4276259986680b40514769edc3e838" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::remove_lhs</definition>
        <argsstring>()</argsstring>
        <name>remove_lhs</name>
        <reimplements refid="classshogun_1_1CKernel_1a83df3f7334ac9876caaec761ac55314e">remove_lhs</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove lhs from kernel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="263"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a495bec46847655d7f83a8df13c658a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::remove_rhs</definition>
        <argsstring>()</argsstring>
        <name>remove_rhs</name>
        <reimplements refid="classshogun_1_1CKernel_1ade2b456ef65c988c59847e6a1d682956">remove_rhs</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove rhs from kernel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="266"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a3a7bbb2e083d4e94b48fe29674bb4440" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::remove_lhs_and_rhs</definition>
        <argsstring>()</argsstring>
        <name>remove_lhs_and_rhs</name>
        <reimplements refid="classshogun_1_1CKernel_1ad56df090f52a020e34162abd0b0cd0e5">remove_lhs_and_rhs</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove lhs and rhs from kernel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="269"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1ab5fb9c3c6619dd651b7694bd25ec3d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CCombinedKernel::init_optimization</definition>
        <argsstring>(int32_t count, int32_t *IDX, float64_t *weights)</argsstring>
        <name>init_optimization</name>
        <reimplements refid="classshogun_1_1CKernel_1a913db590a96e58fadba2b1e9e34a10d6">init_optimization</reimplements>
        <param>
          <type>int32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>IDX</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize optimization</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>count </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IDX</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>weights </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if initializing was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="279"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a868dd02700f487ca536ecef5c132bc41" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool shogun::CCombinedKernel::delete_optimization</definition>
        <argsstring>()</argsstring>
        <name>delete_optimization</name>
        <reimplements refid="classshogun_1_1CKernel_1a1e5b580f5214d5fac1f07c81c2fcb0ad">delete_optimization</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete optimization</para><para><simplesect kind="return"><para>if deleting was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="285"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a48d642a91a56c38852ae3a0ae0927fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>float64_t</type>
        <definition>virtual float64_t shogun::CCombinedKernel::compute_optimized</definition>
        <argsstring>(int32_t idx)</argsstring>
        <name>compute_optimized</name>
        <reimplements refid="classshogun_1_1CKernel_1a614b39452046d4336f09c881360b4af7">compute_optimized</reimplements>
        <param>
          <type>int32_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute optimized</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to compute </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>optimized value at given index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="292"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1aaee239f30347a014defedb746f6d1833" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::compute_batch</definition>
        <argsstring>(int32_t num_vec, int32_t *vec_idx, float64_t *target, int32_t num_suppvec, int32_t *IDX, float64_t *alphas, float64_t factor=1.0)</argsstring>
        <name>compute_batch</name>
        <reimplements refid="classshogun_1_1CKernel_1a5fc6a483d63fd0a3460a457cee60f993">compute_batch</reimplements>
        <param>
          <type>int32_t</type>
          <declname>num_vec</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vec_idx</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_suppvec</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>IDX</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>alphas</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>factor</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes output for a batch of examples in an optimized fashion (favorable if kernel supports it, i.e. has KP_BATCHEVALUATION. to the outputvector target (of length num_vec elements) the output for the examples enumerated in vec_idx are added. therefore make sure that it is initialized with ZERO. the following num_suppvec, IDX, alphas arguments are the number of support vectors, their indices and weights </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="303"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a971604391a76faf94f5582b8ef025fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CCombinedKernel::emulate_compute_batch</definition>
        <argsstring>(CKernel *k, int32_t num_vec, int32_t *vec_idx, float64_t *target, int32_t num_suppvec, int32_t *IDX, float64_t *weights)</argsstring>
        <name>emulate_compute_batch</name>
        <param>
          <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_vec</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vec_idx</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_suppvec</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>IDX</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>emulates batch computation, via linadd optimization w^t x or even down to sum_i alpha_i K(x_i,x)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_vec</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>vector index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_suppvec</parametername>
</parameternamelist>
<parameterdescription>
<para>number of support vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IDX</parametername>
</parameternamelist>
<parameterdescription>
<para>IDX </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>weights </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="329"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a16968417bd173dc2dbc40181a9002dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::add_to_normal</definition>
        <argsstring>(int32_t idx, float64_t weight)</argsstring>
        <name>add_to_normal</name>
        <reimplements refid="classshogun_1_1CKernel_1aabe2fe8e2cc8e2846a6aa60c364855ba">add_to_normal</reimplements>
        <param>
          <type>int32_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>float64_t</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add to normal vector</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>where to add </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>what to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="336"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a8854708db0659c50c40a0dbaf6e7bb17" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::clear_normal</definition>
        <argsstring>()</argsstring>
        <name>clear_normal</name>
        <reimplements refid="classshogun_1_1CKernel_1a46a94bb5789a5edbf1d776610ae3fa04">clear_normal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clear normal vector </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="339"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a58f878769d71edfb90e2152c219da76a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::compute_by_subkernel</definition>
        <argsstring>(int32_t idx, float64_t *subkernel_contrib)</argsstring>
        <name>compute_by_subkernel</name>
        <reimplements refid="classshogun_1_1CKernel_1a9a0bbc983ee6c2050ee4d5c814496924">compute_by_subkernel</reimplements>
        <param>
          <type>int32_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>subkernel_contrib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute by subkernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subkernel_contrib</parametername>
</parameternamelist>
<parameterdescription>
<para>subkernel contribution </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="347"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a4a29899d6a5383eb5a6c087b67b236ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const float64_t *</type>
        <definition>virtual const float64_t* shogun::CCombinedKernel::get_subkernel_weights</definition>
        <argsstring>(int32_t &amp;num_weights)</argsstring>
        <name>get_subkernel_weights</name>
        <reimplements refid="classshogun_1_1CKernel_1aed423e68a226ad9f717d05f54cf9c854">get_subkernel_weights</reimplements>
        <param>
          <type>int32_t &amp;</type>
          <declname>num_weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get subkernel weights</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>where number of weights is stored </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>subkernel weights </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="354"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1acc8751dd81f013609a439df313600b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::get_subkernel_weights</definition>
        <argsstring>(float64_t **weights, int32_t *num_weights)</argsstring>
        <name>get_subkernel_weights</name>
        <param>
          <type>float64_t **</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>num_weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get subkernel weights (swig compatible)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>subkernel weights </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>number of weights </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="361"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1abf3fdd4fc2310e86030580c6eaee27f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::set_subkernel_weights</definition>
        <argsstring>(float64_t *weights, int32_t num_weights)</argsstring>
        <name>set_subkernel_weights</name>
        <reimplements refid="classshogun_1_1CKernel_1af1e586162ba4aadc7c0143c1c8819f1a">set_subkernel_weights</reimplements>
        <param>
          <type>float64_t *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set subkernel weights</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>new subkernel weights </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_weights</parametername>
</parameternamelist>
<parameterdescription>
<para>number of subkernel weights </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="369"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a5ed88d7063fa74b80db373c11c83ca16" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void shogun::CCombinedKernel::set_optimization_type</definition>
        <argsstring>(EOptimizationType t)</argsstring>
        <name>set_optimization_type</name>
        <reimplements refid="classshogun_1_1CKernel_1a11ab2c3a02fc458f510f36c2fe503a2c">set_optimization_type</reimplements>
        <param>
          <type>EOptimizationType</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set optimization type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>optimization type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="375"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a335f34eaf332242d81842a0aed94fc4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shogun::CCombinedKernel::precompute_subkernels</definition>
        <argsstring>()</argsstring>
        <name>precompute_subkernels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>precompute all sub-kernels </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="378"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a9abd63cf0031906317301beb54f28df5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* shogun::CCombinedKernel::compute_optimized_kernel_helper</definition>
        <argsstring>(void *p)</argsstring>
        <name>compute_optimized_kernel_helper</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>helper for compute optimized kernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>thread parameter </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="309"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1a323527fc92406555559868a3ff642f78" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* shogun::CCombinedKernel::compute_kernel_helper</definition>
        <argsstring>(void *p)</argsstring>
        <name>compute_kernel_helper</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>helper for compute kernel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>thread parameter </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="315"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1acd0b4ccc487fcb6dc2dd1a7843dd9d16" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>float64_t</type>
        <definition>virtual float64_t shogun::CCombinedKernel::compute</definition>
        <argsstring>(int32_t x, int32_t y)</argsstring>
        <name>compute</name>
        <reimplements refid="classshogun_1_1CKernel_1ab1765c43943a668fea15971d08ff1229">compute</reimplements>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute kernel function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>computed kernel function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="387"/>
      </memberdef>
      <memberdef kind="function" id="classshogun_1_1CCombinedKernel_1af277cbe622d2e37bf2175395433704d3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shogun::CCombinedKernel::adjust_num_lhs_rhs_initialized</definition>
        <argsstring>(CKernel *k)</argsstring>
        <name>adjust_num_lhs_rhs_initialized</name>
        <param>
          <type><ref refid="classshogun_1_1CKernel" kindref="compound">CKernel</ref> *</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adjust the variables num_lhs, num_rhs and initialized based on the kernel to be appended/inserted</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="395" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="394" bodyend="431"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The Combined kernel is used to combine a number of kernels into a single CombinedKernel object by linear combination. </para>    </briefdescription>
    <detaileddescription>
<para>It keeps pointers to the added sub-kernels <formula id="3">$k_m({\bf x}, {\bf x&apos;})$</formula> and for each sub-kernel - a kernel specific weight <formula id="4">$\beta_m$</formula>.</para><para>It is especially useful to combine kernels working on different domains and to combine kernels looking at independent features and requires CCombinedFeatures to be used.</para><para>It is defined as:</para><para><formula id="5">\[ k_{combined}({\bf x}, {\bf x&apos;}) = \sum_{m=1}^M \beta_m k_m({\bf x}, {\bf x&apos;}) \]</formula> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="19">
        <label>shogun::CKernel</label>
        <link refid="classshogun_1_1CKernel"/>
      </node>
      <node id="18">
        <label>shogun::CCombinedKernel</label>
        <link refid="classshogun_1_1CCombinedKernel"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21">
        <label>shogun::CKernel</label>
        <link refid="classshogun_1_1CKernel"/>
        <childnode refid="22" relation="usage">
          <edgelabel>normalizer</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>shogun::CKernelNormalizer</label>
        <link refid="classshogun_1_1CKernelNormalizer"/>
      </node>
      <node id="20">
        <label>shogun::CCombinedKernel</label>
        <link refid="classshogun_1_1CCombinedKernel"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" line="47" bodyfile="/home/thor/Projects/shogun-liblinear/shogun-0.9.1/src/shogun/kernel/CombinedKernel.h" bodystart="46" bodyend="448"/>
    <listofallmembers>
      <member refid="classshogun_1_1CCombinedKernel_1a16968417bd173dc2dbc40181a9002dc5" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>add_to_normal</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1af277cbe622d2e37bf2175395433704d3" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>adjust_num_lhs_rhs_initialized</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a2d39411343af9eac0c544051f0ffc8e1" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>append_kernel</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a5a9c162880fb9f924f98ef649e962dd7" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>append_subkernel_weights</name></member>
      <member refid="classshogun_1_1CKernel_1ae1dc0bbc6ea973b18dcba2e4fac486b8" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>cache_size</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a07d61f04ab036cccb0be04f5ab18a37b" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>CCombinedKernel</name></member>
      <member refid="classshogun_1_1CKernel_1a77872c37fccc650cd7f918b253bbeb68" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>CKernel</name></member>
      <member refid="classshogun_1_1CKernel_1aa2b1f73c8585adee444bb99a98e63a5a" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>CKernel</name></member>
      <member refid="classshogun_1_1CKernel_1a70cfe05692f9ee159aeb0dfcb8d2f5c3" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>CKernel</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a7f557aee80655ab05bb5a2843c3ca0bf" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>cleanup</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a8854708db0659c50c40a0dbaf6e7bb17" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>clear_normal</name></member>
      <member refid="classshogun_1_1CKernel_1a105026c07a74e493c1711dad83b335f1" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>combined_kernel_weight</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1acd0b4ccc487fcb6dc2dd1a7843dd9d16" prot="protected" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>compute</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1aaee239f30347a014defedb746f6d1833" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>compute_batch</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a58f878769d71edfb90e2152c219da76a" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>compute_by_subkernel</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a323527fc92406555559868a3ff642f78" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>compute_kernel_helper</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a48d642a91a56c38852ae3a0ae0927fa4" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>compute_optimized</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a9abd63cf0031906317301beb54f28df5" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>compute_optimized_kernel_helper</name></member>
      <member refid="classshogun_1_1CKernel_1a813bcdc6778b8c0b4c662a5209a68776" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>compute_row_start</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1af3649b5c66de8063fee6e85f426980e4" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>delete_kernel</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a868dd02700f487ca536ecef5c132bc41" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>delete_optimization</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a971604391a76faf94f5582b8ef025fb9" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>emulate_compute_batch</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1ab5ecd4ab329cf29d7f4993b85e0b583f" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_append_subkernel_weights</name></member>
      <member refid="classshogun_1_1CKernel_1ac53fab2767fa28a2141294219ddc5ea5" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_cache_size</name></member>
      <member refid="classshogun_1_1CKernel_1a70a87d5839c56ce67efad04119b16758" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_combined_kernel_weight</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a9714b7077fdfbf5db8b59a4e654cef4e" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_feature_class</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a9930e2789fa7f62f87c4827c34475041" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_feature_type</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a43bd54078ce4a8c2ebb6090825087c15" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_first_kernel</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a642517b55f9a1c98530239ce45b70c95" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_first_kernel</name></member>
      <member refid="classshogun_1_1CKernel_1a4e06bfb908463f9bc28b0c3ae7bdeef3" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_is_initialized</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a8344cfaba6df2e72e55ec1c06de06bb1" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_kernel</name></member>
      <member refid="classshogun_1_1CKernel_1a1f4f83d3d7bc7e34336c4c262ca95570" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_kernel_matrix</name></member>
      <member refid="classshogun_1_1CKernel_1a19c9666c242a0b019f645593e2c63e9f" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_kernel_matrix</name></member>
      <member refid="classshogun_1_1CKernel_1a52f510cf6ece0052527f31ad2274e855" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_kernel_matrix_helper</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a02d6ebe495a982fcb498b57bf1ba9154" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_kernel_type</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a3c92322907aa8eb9ea9fbb2909225e96" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_last_kernel</name></member>
      <member refid="classshogun_1_1CKernel_1a0c71c8eb3ac024069c6bd9ff61ec0c39" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_lhs</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1aa4b0383ba7dab832bb1fbaf57ea168ee" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_name</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1ac1e0678f02cb5373c89c761bdbfdd746" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_next_kernel</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a03af5a5cc8540288c694ed1a8dbbf400" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_next_kernel</name></member>
      <member refid="classshogun_1_1CKernel_1a7aacb7938ed0f98f1fd14253bc1e9b31" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_normalizer</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a7c23fc647382e2262139211ad4c4d27f" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_num_subkernels</name></member>
      <member refid="classshogun_1_1CKernel_1af350caa123740b96ecaa69fd28454a65" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_num_vec_lhs</name></member>
      <member refid="classshogun_1_1CKernel_1a7e45a8f4fc00c39b7d54dd37e001bed9" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_num_vec_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1aff5f02561b6963a3c2a2e63b4ac8e43c" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_optimization_type</name></member>
      <member refid="classshogun_1_1CKernel_1abfd608e83f9839f8ca626ad793e452b0" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>get_rhs</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a4a29899d6a5383eb5a6c087b67b236ba" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_subkernel_weights</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1acc8751dd81f013609a439df313600b01" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>get_subkernel_weights</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1ac24fcf8f886eb9175a5401e4d655fe7f" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>has_features</name></member>
      <member refid="classshogun_1_1CKernel_1afd958e85909aec22c830e9137fcd7d4c" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>has_property</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a526c0f277971aea22aaf2f7f599f949d" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>init</name></member>
      <member refid="classshogun_1_1CKernel_1aeb0378209b4c63b7ae60596540ebed80" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>init_normalizer</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1ab5fb9c3c6619dd651b7694bd25ec3d85" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>init_optimization</name></member>
      <member refid="classshogun_1_1CKernel_1a8363fd727262daf47cad9fb4842daa6c" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>init_optimization_svm</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1ac4a3fcf7f15c9712bdb823219c7264fa" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>initialized</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a355c58ff466cf84f4420478335e62b11" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>insert_kernel</name></member>
      <member refid="classshogun_1_1CKernel_1ab4cbfe2c04238e33322647e22960c246" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>kernel</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a3bf3e1b0a750d65ce1ef385891465ddf" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>kernel_list</name></member>
      <member refid="classshogun_1_1CKernel_1a01f88ea73f221b5a768e1c67c731a763" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>kernel_matrix</name></member>
      <member refid="classshogun_1_1CKernel_1ae7bc6b54431a07498f0b6ef4ab087297" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>lhs</name></member>
      <member refid="classshogun_1_1CKernel_1a28ef59e6dd9055579b2f95fb3a19b2cc" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>lhs_equals_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1a29e2f0ad2694cc53a800f3ad8be56077" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>list_kernel</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a3f6cf3b9f898aecfc3bd53ce02ce228a" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>list_kernels</name></member>
      <member refid="classshogun_1_1CKernel_1a93221d864190e13c4749793d4ae7f0b0" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>load</name></member>
      <member refid="classshogun_1_1CKernel_1acbe5200168cf7ade8c30f1a1eb40469b" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>normalizer</name></member>
      <member refid="classshogun_1_1CKernel_1a0d5cfafbf2afd0260857089504262dd6" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>num_lhs</name></member>
      <member refid="classshogun_1_1CKernel_1a6e741d3d75546bdc15bfb5be41aa9b96" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>num_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1ad96fd157602292f3d88ebfef3077be00" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>opt_type</name></member>
      <member refid="classshogun_1_1CKernel_1a5b4d22f0cd136296f6e9aee3364607d6" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>optimization_initialized</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a335f34eaf332242d81842a0aed94fc4b" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>precompute_subkernels</name></member>
      <member refid="classshogun_1_1CKernel_1a16638a9afae47d4c2e36e20b2dff92f5" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>properties</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a1f4276259986680b40514769edc3e838" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>remove_lhs</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a3a7bbb2e083d4e94b48fe29674bb4440" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>remove_lhs_and_rhs</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a495bec46847655d7f83a8df13c658a54" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>remove_rhs</name></member>
      <member refid="classshogun_1_1CKernel_1a5dab35da7f429dd860f59d9a98960a3f" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>rhs</name></member>
      <member refid="classshogun_1_1CKernel_1ab1241d4ce37e5352cee96f6b456439c4" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>save</name></member>
      <member refid="classshogun_1_1CKernel_1aa552d8e2591297a3fd5aae46bebaf645" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>set_cache_size</name></member>
      <member refid="classshogun_1_1CKernel_1a23ec2b5c3d824b3f148c905bfbafdebf" prot="public" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>set_combined_kernel_weight</name></member>
      <member refid="classshogun_1_1CKernel_1ad2d2934daf162bfb010536c1eefd162c" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>set_is_initialized</name></member>
      <member refid="classshogun_1_1CKernel_1a0a3fc1096d6e00f56ca0f11cadd12ab7" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>set_normalizer</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a5ed88d7063fa74b80db373c11c83ca16" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>set_optimization_type</name></member>
      <member refid="classshogun_1_1CKernel_1abd52ab8944c2fd9efd45e46dee4f27ee" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>set_property</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1abf3fdd4fc2310e86030580c6eaee27f1" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>set_subkernel_weights</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a92c72e80dd2c916887ec5cf3f7181abe" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>subkernel_weights_buffer</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a01e496f9d2a2d1abed2a73af65e5be86" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>sv_count</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a84bd18107be976ce2c2c31f628070d4a" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>sv_idx</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1a674843075d46417d8da8e9af4f09c9d4" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>sv_weight</name></member>
      <member refid="classshogun_1_1CKernel_1a83025690228a1d47e4d43a8ed4304749" prot="protected" virt="non-virtual"><scope>shogun::CCombinedKernel</scope><name>unset_property</name></member>
      <member refid="classshogun_1_1CCombinedKernel_1ad96402145de478eb240b0cd79df8b75c" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>~CCombinedKernel</name></member>
      <member refid="classshogun_1_1CKernel_1ac0b3e1e0d02e446954712d8245cd68c3" prot="public" virt="virtual"><scope>shogun::CCombinedKernel</scope><name>~CKernel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
